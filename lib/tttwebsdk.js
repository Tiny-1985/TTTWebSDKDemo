(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("tttwebsdk", [], factory);
	else if(typeof exports === 'object')
		exports["tttwebsdk"] = factory();
	else
		root["tttwebsdk"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./lib/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./lib/3tmodule/iplocation.js":
/*!************************************!*\
  !*** ./lib/3tmodule/iplocation.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _stringify = __webpack_require__(/*! babel-runtime/core-js/json/stringify */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/json/stringify.js");

var _stringify2 = _interopRequireDefault(_stringify);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var events = __webpack_require__(/*! events */ "./node_modules/_events@3.1.0@events/events.js");
var retry = __webpack_require__(/*! retry */ "./node_modules/_retry@0.12.0@retry/index.js");
var uuid = __webpack_require__(/*! ../utils */ "./lib/utils.js").uuid;
var logger = __webpack_require__(/*! ../logger */ "./lib/logger.js")('IPLocation');
var iplocationAddress = __webpack_require__(/*! ../config */ "./lib/config.js").iplocationAddress;
var iplocationPort = __webpack_require__(/*! ../config */ "./lib/config.js").iplocationPort;
var mediaServerAddress = __webpack_require__(/*! ../config */ "./lib/config.js").mediaServerAddress;

/**
 * Retry operation's paramters.
 */
var WS_DEFAULT_RETRY_OPTIONS = retry.operation({
	retries: 4,
	factor: 2,
	minTimeout: 1 * 1000,
	maxTimeout: 2 * 1000,
	randomize: true
});

/**
 * Get latest ip host service.
 */

var IPLocation = function (_events$EventEmitter) {
	(0, _inherits3.default)(IPLocation, _events$EventEmitter);

	function IPLocation(appId, uid, successfulCB, failedCB) {
		(0, _classCallCheck3.default)(this, IPLocation);

		var _this = (0, _possibleConstructorReturn3.default)(this, (IPLocation.__proto__ || (0, _getPrototypeOf2.default)(IPLocation)).call(this));

		_this.appId = appId;
		_this.connectId = uuid();
		_this._url = 'wss://' + iplocationAddress + ':' + iplocationPort + '/iplocation/';

		logger.debug('constructor: ' + _this._url);

		// send to iplocation server's info.
		_this._wsjson = {
			"eType": 1,
			"sSEQID": "111111111",
			"mProtocolMsg": {
				"sVersion": "Test_4.2.0.777",
				"bLoadBalance": false,
				"bReConnect": false,
				"bVipUser": false,
				"sIDentify": "7B4FCDBC0914E7182B8EC357F07498F1",
				"sSecret": "c052cd055acfabc5",
				"sVerifyCode": "abcd",
				"sAppID": appId,
				"nUserID": +uid,
				"sClientVer": "web_1.0",
				"sConnectID": _this.connectId,
				"mIpAddrMsg": {
					"bFec": false,
					"sIp": iplocationAddress,
					"nPort": 0
				}
			}
		};

		// WebSocket instance.
		_this._ws = null;

		// Closed flag.
		_this._closed = false;

		// succuss & failure callbacks.
		_this._successcb = successfulCB;
		_this._failcb = failedCB;

		_this.reconnectTimes = 1;
		_this.firstConnectTime = Date.now();
		_this.connectedTime = 0;
		_this._hasSolve = false; // 是否已成功得到 IP location 结果
		_this._sendRetry = {
			retry: 5,
			timer: 0
		};
		_this._setWebSocket();
		return _this;
	}

	(0, _createClass3.default)(IPLocation, [{
		key: 'getIpLocationVar',
		value: function getIpLocationVar() {
			return this.svcHost;
		}
	}, {
		key: 'close',
		value: function close() {
			this._closed = true;
			if (this._ws !== null) {
				this._ws.close();
				this._ws = null;
			}
		}
	}, {
		key: '_setWebSocket',
		value: function _setWebSocket() {
			var _this2 = this;

			var operation = retry.operation(WS_DEFAULT_RETRY_OPTIONS);
			var wasConnected = false;

			operation.attempt(function (currentAttempt) {
				if (_this2._closed) {
					operation.stop();

					return;
				}

				logger.debug('_setWebSocket() connecting... [currentAttempt: ' + currentAttempt);

				_this2._ws = new WebSocket(_this2._url);

				_this2._ws.onopen = function () {
					if (_this2._closed) return;

					wasConnected = true;
					_this2.connectedTime = Date.now();
					_this2._ws.send((0, _stringify2.default)(_this2._wsjson));
					_this2._sendRetry.timer = setInterval(function () {
						if (_this2._hasSolve) {
							return;
						}
						// 
						if (_this2._sendRetry.retry === 0) {
							_this2._ws.close();
							operation.retry(true);
							clearInterval(_this2._sendRetry.timer);
						}
						_this2._ws.send((0, _stringify2.default)(_this2._wsjson));
						--_this2._sendRetry.retry;
					}, 500);

					logger.debug('WebSocket event [open]');
				};

				_this2._ws.onclose = function (event) {
					if (_this2._closed) return;

					logger.warn('WebSocket event [close] -- ' + (0, _stringify2.default)(event));

					// Don't retry if code is 4000 (closed by the server).
					if (event.code !== 4000) {
						// If it was not connected, try again.
						if (!wasConnected) {
							if (_this2._closed) return;

							if (operation.retry(true)) ++_this2.reconnectTimes;

							return;
						}
						// If it was connected, start from scratch.
						else {
								operation.stop();

								if (_this2._closed) return;

								_this2._setWebSocket();

								return;
							}
					}

					_this2._closed = true;
				};

				_this2._ws.onerror = function (e) {
					if (_this2._closed) return;

					/*
     logger.error('WebSocket event [error]');
     this._failcb(`websocket event [error]`);
     		this.close();
     */

					logger.error('WebSocket event [error] - error ' + e.toString() + ' - nothing todo.');
				};

				_this2._ws.onmessage = function (event) {
					if (_this2._closed) return;

					var msg = JSON.parse(event.data);
					// 
					if (msg.eResult !== 1) {
						_this2._failcb('msg.eResult: ' + msg.eResult);

						_this2.close();

						return;
					} else {
						var evtobj = msg.mProtocolMsg.mIpAddrMsg;
						_this2.svcHost = {
							ip: evtobj.sIp,
							domain: evtobj.sDomain,
							port: evtobj.nPort
						};

						if (mediaServerAddress !== '') {
							_this2.svcHost = {
								ip: evtobj.sIp,
								domain: mediaServerAddress,
								port: evtobj.nPort
							};
						}

						if (!!_this2._sendRetry.timer) {
							clearInterval(_this2._sendRetry.timer);
							_this2._sendRetry.timer = 0;
						}

						// 
						_this2._hasSolve = true;

						_this2._successcb(_this2.svcHost, msg.mProtocolMsg.mGWIpAddrMsgList);

						_this2.close();
					}
				};
			});
		}
	}], [{
		key: 'IplocationAddress',
		set: function set(value) {
			logger.debug('set IplocationAddress: ' + value);

			iplocationAddress = value;
		},
		get: function get() {
			return iplocationAddress;
		}
	}, {
		key: 'IplocationPort',
		set: function set(port) {
			logger.debug('set IplocationPort: ' + port);

			if (!/^[1-5][0-9]{2,4}$/.test(port)) {
				return;
			}

			iplocationPort = port;
		},
		get: function get() {
			return iplocationPort;
		}
	}, {
		key: 'MediaServerAddress',
		set: function set(value) {
			mediaServerAddress = value;
		},
		get: function get() {
			return mediaServerAddress;
		}
	}]);
	return IPLocation;
}(events.EventEmitter);

module.exports = IPLocation;

/***/ }),

/***/ "./lib/TTTRtcWeb.js":
/*!**************************!*\
  !*** ./lib/TTTRtcWeb.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.TTTRtcWeb = undefined;

var _stringify = __webpack_require__(/*! babel-runtime/core-js/json/stringify */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/json/stringify.js");

var _stringify2 = _interopRequireDefault(_stringify);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EventEmitter = __webpack_require__(/*! events */ "./node_modules/_events@3.1.0@events/events.js").EventEmitter;
var Stream = __webpack_require__(/*! ./stream */ "./lib/stream.js");
var Client = __webpack_require__(/*! ./client */ "./lib/client.js");
var mediasoupClient = __webpack_require__(/*! ./mslib */ "./lib/mslib/index.js");
var config = __webpack_require__(/*! ./config */ "./lib/config.js");
var logger = __webpack_require__(/*! ./logger */ "./lib/logger.js")('<TTTRtcWeb>');
var IpLocation = __webpack_require__(/*! ./3tmodule/iplocation */ "./lib/3tmodule/iplocation.js");
var pkg = __webpack_require__(/*! ../package.json */ "./package.json");

/**
 * 3TRTC Class. There is enter pointer of websdk.
 * The APIs documents hosted on the ./docs forder, please reference at there.
 */

var TTTRtcWeb = function (_EventEmitter) {
	(0, _inherits3.default)(TTTRtcWeb, _EventEmitter);

	function TTTRtcWeb() {
		(0, _classCallCheck3.default)(this, TTTRtcWeb);

		var _this = (0, _possibleConstructorReturn3.default)(this, (TTTRtcWeb.__proto__ || (0, _getPrototypeOf2.default)(TTTRtcWeb)).call(this));

		_this._client = null;
		_this._stream = null;
		_this._isAuth = false;

		// 
		_this.getDevices(function (devices) {
			logger.debug('this.getDevices - devices: ' + (0, _stringify2.default)(devices));
		}, function (err) {
			var errMsg = err.name + err.message + '\n';
			logger.warn('this.getDevices error - ' + errMsg);
		});

		global.g_tttRtcWeb = _this;
		return _this;
	}

	/**
  * Check browser is support webrtc.
  * @return Returns a Boolean indicating if the current browser/device is supported by mediasoup-client.
  */


	(0, _createClass3.default)(TTTRtcWeb, [{
		key: 'checkSystemRequirements',
		value: function checkSystemRequirements() {
			return RTCPeerConnection && navigator.mediaDevices.getUserMedia && mediasoupClient.isDeviceSupported();
		}

		/**
   * Enumerate all the devices of this computer. e.g.: mics, webcams, speakers.
   * @param onSuccess
   * @param onFailure
   * Field	Type	Description
   *  flag	String	Browser/device identifier.
   *  name	String	Browser/device descriptive name (taken from User-Agent.
   *  version	String	Browser/device version.
   *  bowser	Object	Object produced by the _detect() method of the bowser library.
   */

	}, {
		key: 'getDevices',
		value: function getDevices(onSuccess, onFailure) {
			if (typeof onSuccess !== 'function') {
				logger.error('API getDevices() error - parameter: onSuccess invalid');
				throw new TypeError('onSuccess parameter must be a function.');
			}

			if (typeof onFailure !== 'function') {
				logger.error('API getDevices() error - parameter: onFailure invalid');
				throw new TypeError('onFailure parameter must be a function.');
			}

			if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {
				logger.error("enumerateDevices() not supported.");
				throw Error('websdk - system Not supported');
			}

			// List cameras and microphones.
			navigator.mediaDevices.enumerateDevices().then(function (devices) {
				onSuccess(devices);
			}).catch(function (err) {
				onFailure(err);
			});
		}

		/**
   * Set logger level.
   * @param {string} logLevel -- 见 config.js 中 logLevel
   */

	}, {
		key: 'setLogLevel',
		value: function setLogLevel(logLevel) {
			logger._setLoggerLevel(logLevel);
		}

		/**
   * Get version of SDK 3TTech.cn
   * @returns {string}
   */

	}, {
		key: 'getVersion',
		value: function getVersion() {
			return pkg.version;
		}

		/**
   * Create stream object.
   * @param {object} spec. 
   *  {
   *      streamId: '',
   *      audio: true|false,
   *      video: true|false,
   *      attribute: {
   *          resolution: 'sif|vga|hd20' // ref: config.js
   *          minFrameRate: number,
   *          maxFrameRate: number,
   *          idealFrameRate: number
   *      }
   *      screen: true|false,
   *      cameraId: string,
   *      microphoneId: string
   *  }
   */

	}, {
		key: 'createStream',
		value: function createStream(spec) {
			if (!this.checkSystemRequirements()) {
				logger.error('createClient() - checkSystemRequirements not supported.');
				throw Error('websdk - system Not supported');
			}

			this._stream = new Stream(spec);
			return this._stream;
		}

		/**
   * Create client object.
   * @param {Object} config.
      *  {
      *      role: '1|2|3' //1: master, 2: vice, 3: audience
      *  }
   */

	}, {
		key: 'createClient',
		value: function createClient(config) {
			if (!this.checkSystemRequirements()) {
				logger.error('createClient() - checkSystemRequirements not supported.');
				throw Error('websdk - system Not supported');
			}

			// 
			this._client = new Client(config);
			global.g_client = this._client;
			return this._client;
		}

		/**
   * get peerconnection stats.
   */

	}, {
		key: 'getStats',
		value: function getStats() {
			if (this._client == null) {
				throw Error('client is null, please create it before.');
			}

			return this._client.getNetState();
		}

		/**
   * set server urls.
   * @param {*} rootUrl 
   */

	}, {
		key: 'setServerUrl',
		value: function setServerUrl(rootUrl) {
			if (!rootUrl || rootUrl.trim() === '') {
				throw new TypeError('rootUrl');
			}

			IpLocation.MediaServerAddress = rootUrl.trim();
		}

		/**
   * set iplocation host.
   * @param {string} iplocation 
   */

	}, {
		key: 'setIpLocationAddress',
		value: function setIpLocationAddress(iplocation) {
			if (!iplocation || iplocation.trim() === '') {
				throw new TypeError('iplocation');
			}

			IpLocation.IplocationAddress = iplocation;
		}

		/**
   * set iplocation port
   * @param {number} iplocation port 
   */

	}, {
		key: 'setIpLocationPort',
		value: function setIpLocationPort(port) {
			IpLocation.IplocationPort = port;
		}

		/**
   * Dev's can leaverage this method for internal domain deployment.
   * @param {Any} conf 
   * {
   *  urls: 'turn server addresses, 
   *  credential: 'as key word mean',
   *  username: 'as key word mean'
   * } 
   */

	}, {
		key: 'setTurnConf',
		value: function setTurnConf(conf) {
			Client.TurnConf = conf;
		}
	}]);
	return TTTRtcWeb;
}(EventEmitter);

exports.TTTRtcWeb = TTTRtcWeb;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/_webpack@4.41.6@webpack/buildin/global.js */ "./node_modules/_webpack@4.41.6@webpack/buildin/global.js")))

/***/ }),

/***/ "./lib/client.js":
/*!***********************!*\
  !*** ./lib/client.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var _keys = __webpack_require__(/*! babel-runtime/core-js/object/keys */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/keys.js");

var _keys2 = _interopRequireDefault(_keys);

var _typeof2 = __webpack_require__(/*! babel-runtime/helpers/typeof */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/typeof.js");

var _typeof3 = _interopRequireDefault(_typeof2);

var _promise = __webpack_require__(/*! babel-runtime/core-js/promise */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js");

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = __webpack_require__(/*! babel-runtime/regenerator */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/regenerator/index.js");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = __webpack_require__(/*! babel-runtime/helpers/asyncToGenerator */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/asyncToGenerator.js");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getIterator2 = __webpack_require__(/*! babel-runtime/core-js/get-iterator */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/get-iterator.js");

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _stringify = __webpack_require__(/*! babel-runtime/core-js/json/stringify */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/json/stringify.js");

var _stringify2 = _interopRequireDefault(_stringify);

var _map = __webpack_require__(/*! babel-runtime/core-js/map */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/map.js");

var _map2 = _interopRequireDefault(_map);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var IPLocation = __webpack_require__(/*! ./3tmodule/iplocation */ "./lib/3tmodule/iplocation.js");
var config = __webpack_require__(/*! ./config */ "./lib/config.js");
var utils = __webpack_require__(/*! ./utils */ "./lib/utils.js");
var Stream = __webpack_require__(/*! ./stream */ "./lib/stream.js");
var mediasoupClient = __webpack_require__(/*! ./mslib */ "./lib/mslib/index.js");
var EventEmitter = __webpack_require__(/*! events */ "./node_modules/_events@3.1.0@events/events.js").EventEmitter;

var protooClient = __webpack_require__(/*! ./protoo */ "./lib/protoo/index.js");
var Stats = __webpack_require__(/*! ./stats */ "./lib/stats.js");
var logger = __webpack_require__(/*! ./logger */ "./lib/logger.js")('<Client>');

var getStats = __webpack_require__(/*! ./getStats */ "./lib/getStats.js");
/**
 * @type {Any} TURN'sconfigure for internal domain.
 */
var turnConf = {};

var clientConnState = {
	DISCONNECTED: 'DISCONNECTED', // 连接断开。该状态表示 SDK 处于以下任一阶段：1. 调用 Client.join 加入频道前的初始化阶段；2. 调用 Client.leave 后的离开频道阶段
	CONNECTING: 'CONNECTING', // 正在连接中。在调用 Client.join 或者连接中断自动重连的时候为此状态。
	CONNECTED: 'CONNECTED',
	DISCONNECTING: 'DISCONNECTING' // 正在断开连接。在调用 Client.leave 的时候为此状态。
};

var Client = function (_EventEmitter) {
	(0, _inherits3.default)(Client, _EventEmitter);

	function Client() {
		var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		(0, _classCallCheck3.default)(this, Client);

		// Whether we should be a spy.
		var _this = (0, _possibleConstructorReturn3.default)(this, (Client.__proto__ || (0, _getPrototypeOf2.default)(Client)).call(this));

		_this._spy = false;

		// Closed flag.
		_this._closed = false;

		// My peer name.
		_this._peerName = '';

		// Transport for sending.
		// The defualt sending tranport.
		_this._sendTransport = null;

		// Transport for receiving.
		_this._recvTransport = null;

		// Local multiple webcam's producers.
		// There have only two tracks(mic/audio and webcam/video) or one track binding to one stream.
		// The key is StreamID, value is producer.
		// There produces contianer consists the peer's streams.
		_this._mapWebcamProducers = new _map2.default();

		// Local multiple mic's producers.
		// key is streamID, value is producer.
		_this._mapMicProducers = new _map2.default();

		// local multiple webcam's sending transports
		// The key is streamid, value transport. 
		// It's associate with map webcam producers.
		_this._mapVideoSendTransports = new _map2.default();

		// 仅仅用于记录
		_this._publishStreams = new _map2.default();

		_this._protoo = null;

		// 
		_this._remoteVideos = new _map2.default();

		// only for stat
		_this._publishs = new _map2.default();
		_this._subscribes = new _map2.default();

		// 当前 protooTransport 的连接状态
		_this._protooTransportStat = false;

		_this._room = null;

		// Screen, tab or even video producer.
		_this._screenProducer = null;

		// Screen transport.
		// NOTE: screens are special stream thus take it. 
		_this._screenTransport = null;

		// 
		_this.iceRestartTimer = null;

		// 仅仅用于记录
		_this._iceSendDisconnectedCnt = 0;
		_this._iceRecvDisconnectedCnt = 0;

		// The peers.
		// Peer's have two produce maps, one is mic_producers, anthor is webcam_producer.
		// The peers's key is peer_id, value is peer. 
		_this._peers = new _map2.default();

		// transports stats.
		_this._stats = new Stats();

		//Subscribes the transport to RTC stats retrieved via the stats event.
		_this._interval = 3000;

		// IPIP return mechine's ip.
		_this._ip = '';

		_this._options = {};

		// config
		_this._config = config;

		// using simulcast.
		_this._useSimulcast = false;

		_this._tryJoin = 0;
		_this._joinTimer = null;

		// client conn state
		_this._connState = clientConnState.DISCONNECTED;

		// is joined room.
		_this._joined = false;

		_this._appId = '';
		_this._uid = '';
		_this._roomId = '';

		//
		_this._disableRtmpVideo = Boolean(config.disableRtmpVideo);

		_this._timesOfLinkGW = 1;
		_this._linkGWTime = 0;
		_this._sendGWTime = undefined;
		_this._sendEnterTime = undefined;

		global.g_appid = '';
		global.g_userid = '';
		global.g_roomid = '';
		global.g_server = '';

		// rtmp url validate.
		if (typeof config.rtmpUrl === 'string' && config.rtmpUrl.length > 0) {
			/*
   let pattern = new RegExp('^(rtmp?:\\/\\/)?' + // protocol
   	'((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // domain name
   	'((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
   	'(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
   	'(\\?[;:&a-z\\d%_.~+=-]*)?' + // query string
   	'(\\#[-a-z\\d_]*)?$', 'i'); // fragment locator
   if (!pattern.test(config.rtmpUrl))
   {
   	logger.error('API createClient() error - config: rtmpUrl is invalide.');
   	throw new TypeError('rtmp url is invalid')
   }
   */

			_this._valid_rtmp_url = config.rtmpUrl.trim();
		} else {
			_this._valid_rtmp_url = '';
		}

		if (!/^[123]$/.test(config.role)) {
			logger.error('API createClient() error - config: role must be set as 1: master, 2: vice 3: audience.');
			throw new TypeError('role must be set as 1: master, 2: vice 3: audience');
		}
		_this._role = config.role + '';

		logger.debug('API createClient() success - ' + (0, _stringify2.default)(config));

		// only for stat
		_this._statsInterval = null;
		return _this;
	}

	// join room timeout period.


	(0, _createClass3.default)(Client, [{
		key: '_startStatInterval',


		// 
		value: function _startStatInterval() {
			var _this2 = this;

			// only for stat
			this._statsInterval = setInterval(function () {
				var pubs = [];
				_this2._publishs.forEach(function (s, key) {
					pubs.push(s);
				});

				var subs = [];
				_this2._subscribes.forEach(function (s, key) {
					subs.push(s);
				});

				var remoteVideos = [];
				_this2._remoteVideos.forEach(function (s, key) {
					remoteVideos.push(s);
				});

				// 
				var jsonMain = {
					host: _this2._ip,
					appId: _this2._appId,
					userId: _this2._uid,
					role: _this2._role,
					roomId: _this2._roomId,
					connState: _this2._connState,
					joined: _this2._joined,
					iceSendDisconnCnt: _this2._iceSendDisconnectedCnt,
					iceRecvDisconnCnt: _this2._iceRecvDisconnectedCnt,
					publishs: pubs,
					subscribes: subs,
					remoteVideos: remoteVideos
				};
				logger.debug('<CLIENT_STAT> ' + (0, _stringify2.default)(jsonMain));

				// 
			}, 15000);
		}
	}, {
		key: '_stopStatInterval',
		value: function _stopStatInterval() {
			if (this._statsInterval === null) return;

			clearInterval(this._statsInterval);
			this._statsInterval = null;
		}
	}, {
		key: 'init',


		/**
   * Initialize client object.
   * @param {string} appId
      * @param {string|number} uid
   * @param {function} onSuccess
   * @param {function} onFailure
   */
		value: function init(appId, uid, onSuccess, onFailure) {
			var _this3 = this;

			if (typeof onSuccess !== 'function') {
				logger.error('API init() error - parameter: onSuccess invalid');
				throw new TypeError('onSuccess parameter must be a function.');
			}

			if (typeof onFailure !== 'function') {
				logger.error('API init() error - parameter: onFailure invalid');
				throw new TypeError('onFailure parameter must be a function.');
			}

			if (!appId || ('' + appId).trim() === '') {
				logger.error('API init() error - parameter: appId invalid');
				return onFailure(new TypeError('must be set appid'));
			}

			if (!/^[1-9][0-9]{0,18}$/.test(uid)) {
				logger.error('API init() error - parameter: userId invalid');
				return onFailure(new TypeError('userId must be number'));
			}

			/*
   if (uid > (Math.pow(2, 32) - 1))
   {
   	logger.error('API init() error - parameter: userId is out of range.');
   	return onFailure(new Error('userId number is out of range.'));
   }
   */

			this._uid = '' + uid;

			global.g_appid = appId;
			global.g_userid = this._uid;

			logger.debug('API init() appId: ' + appId + ' uid: ' + uid);

			this._appId = appId;
			this._stats.setAppid(appId);

			// 
			this._startStatInterval();

			if (config.privateNet) {
				this._ip = config.mediaServerAddress;

				logger.debug('API init() success - server: ' + this._ip);
				return onSuccess();
			} else {
				this._ipLocation = new IPLocation(appId, +uid, function (ipRes, gwInfo) {
					logger.debug('API init() iplocation success - server: ' + ipRes.domain);

					_this3._stats.setDomain(ipRes.domain);
					_this3._stats.setGWInfo(gwInfo);
					_this3._stats.setIPlocationInfo(_this3._ipLocation);

					// 
					_this3._ip = ipRes.domain;

					return onSuccess();
				}, function (e) {
					// 
					_this3._stopStatInterval();

					// 
					logger.error('API init() failed - iplocation error: ' + (0, _stringify2.default)(e));

					return onFailure('API init() failed - iplocation error: ' + (0, _stringify2.default)(e));
				});
			}
		}

		/**
   * Join room.
   * @param {string|number} roomId.
   * @param {function} onSuccess success call back function.
   * @param {function} onFailure failure call back function.
   */

	}, {
		key: 'join',
		value: function join(roomId, onSuccess, onFailure) {
			var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

			if (typeof onSuccess !== 'function') {
				logger.error('API join() error - parameter: onSuccess invalid');
				throw new TypeError('onSuccess parameter must be a function.');
			}

			if (typeof onFailure !== 'function') {
				logger.error('API join() error - parameter: onFailure invalid');
				throw new TypeError('onFailure parameter must be a function.');
			}

			if (!/^[1-9][0-9]{0,18}$/.test(roomId)) {
				logger.error('API join() error - parameter: roomId invalid');
				return onFailure(new TypeError('roomId must be number'));
			}

			/*
   if (roomId > (Math.pow(2, 32) - 1))
   {
   	logger.error('API join() error - parameter: roomId is out of range.');
   	return onFailure(new Error('roomId number is out of range.'));
   }
   */

			logger.debug('API join() params roomId: ' + roomId + ' role: ' + this._role + ' - tryJoin: ' + this._tryJoin);

			var peerName = this._uid;

			// turn server leaverage udp protocol.
			var forceTcp = false;

			// 
			this._options = options;

			roomId += '';
			this._roomId = roomId;

			// for log
			global.g_roomid = roomId;
			global.g_server = this._ip;
			// 

			this._stats.setRoomId(roomId);
			this._stats.setUserId(peerName);
			this._stats.setRoleType(+this._role);

			var deviceInfo = mediasoupClient.getDeviceInfo();
			this._stats.setDeviceInfo(deviceInfo);

			this._peerName = peerName;
			var protooUrl = utils.getProtooUrl(peerName, roomId, this._appId, this._ip);
			/*
   if (config.privateNet)
   {
   	protooUrl = utils.getProtooUrl(peerName, roomId, this._appId, config.mediaServerAddress);
   }
   else
   {
   	protooUrl = utils.getProtooUrl(peerName, roomId, this._appId, this._ipLocation.getIpLocationVar().domain);
   }
   */

			this._linkGWTime = Date.now();
			// protoo-client Peer instance.
			this._protoo = new protooClient.Peer(protooUrl);
			if (!this._protoo) {
				this._innerClose();

				// 
				logger.error('API join() error - new protooClient.Peer failed.');
				onFailure('new protooClient.Peer failed.');
				return;
			}

			// 
			this.emit('connection-state-change', {
				prevState: this._connState,
				curState: clientConnState.CONNECTING
			});
			this._connState = clientConnState.CONNECTING;

			// Using default setting.
			if (!config.privateNet) {
				turnConf.urls = turnConf.urls || 'turn:' + this._ip + ':3478';
				turnConf.credential = turnConf.credential || config.clientConfig.turnServer.password;
				turnConf.username = turnConf.username || config.clientConfig.turnServer.username;
				turnConf.iceTransportPolicy = turnConf.iceTransportPolicy || config.clientConfig.turnServer.iceTransportPolicy;
			} else if (typeof turnConf.urls === 'undefined' || turnConf.urls === null) {
				// using default configure if not set by dev.
				turnConf.urls = 'turn:' + this._ip + ':3478';
				turnConf.credential = config.clientConfig.turnServer.password;
				turnConf.username = config.clientConfig.turnServer.username;
				turnConf.iceTransportPolicy = config.clientConfig.turnServer.iceTransportPolicy;
			}

			// mediasoup client Room instance.
			this._room = new mediasoupClient.Room({
				requestTimeout: 30000,
				transportOptions: {
					udp: !forceTcp,
					tcp: Boolean(forceTcp)
				},
				spy: this._spy,
				iceTransportPolicy: turnConf.iceTransportPolicy, // relay, all
				turnServers: [{
					'urls': turnConf.urls,
					'credential': turnConf.credential,
					'username': turnConf.username
				}]
			});

			this._join({
				displayName: peerName,
				device: 'webcam',
				options: options
			}, onSuccess, onFailure);
		}
	}, {
		key: '_join',
		value: function _join(_ref, onSuccess, onFailure) {
			var displayName = _ref.displayName,
			    device = _ref.device,
			    options = _ref.options;

			var _this4 = this;

			this._protoo.on('open', function () {
				logger.debug('protooPeer event -- [open] - will _joinRoom...');
				_this4._stats.setWsState('open');

				_this4._protooTransportStat = true;

				_this4._sendGWTime = Date.now();
				_this4._linkGWTime = _this4._sendGWTime - _this4._linkGWTime;

				_this4._joinRoom({ displayName: displayName, device: device, options: options }, onSuccess, onFailure);
			});

			this._protoo.on('conn-reconn', function () {
				logger.debug('protooPeer event -- [conn-reconn]');
				_this4._stats.setWsState('open');

				// 
				_this4._protooTransportStat = true;
				// 
				_this4.emit('connection-state-change', {
					prevState: _this4._connState,
					curState: clientConnState.CONNECTED
				});
				_this4._connState = clientConnState.CONNECTED;
			});

			// 
			this._protoo.on('conn-interrupt', function () {
				logger.debug('protooPeer event -- [conn-interrupt]');
				_this4._stats.setWsState('close');

				// 
				_this4._protooTransportStat = false;
			});

			this._protoo.on('reinit', function () {
				logger.debug('protooPeer event -- [reinit] -- Emit [reinit] to APP');
				_this4._stats.setWsState('open');

				// 
				_this4._innerClose();

				_this4.emit('reinit');
				// 
				_this4._protooTransportStat = true;

				_this4._joinRoom({ displayName: displayName, device: device, options: _this4._options }, function () {}, function () {});
			});

			this._protoo.on('connecting', function (currentAttempt) {
				// 
				_this4.emit('connection-state-change', {
					prevState: _this4._connState,
					curState: clientConnState.CONNECTING
				});
				_this4._connState = clientConnState.CONNECTING;
			});

			this._protoo.on('close', function () {
				_this4._stats.setWsState('close');

				// 
				_this4._protooTransportStat = false;

				// 
				_this4._joined = false;

				if (_this4._closed) return;

				// 
				_this4.emit('connection-state-change', {
					prevState: _this4._connState,
					curState: clientConnState.DISCONNECTED
				});
				_this4._connState = clientConnState.DISCONNECTED;

				logger.warn('API protooPeer event -- [close] -- Emit [disconnected] to APP');
				_this4.emit('disconnected');

				_this4.close();
			});

			this._protoo.on('request', function (request, accept, reject) {
				// logger.debug(
				//     '_handleProtooRequest() [method:%s, data:%o]',
				//     request.method, request.data);
				switch (request.method) {
					case 'mediasoup-notification':
						{
							accept();

							var notification = request.data;

							if (_this4._room !== null) _this4._room.receiveNotification(notification);

							break;
						}

					case 'display-name-changed':
						{
							accept();

							// eslint-disable-next-line no-shadow
							var _request$data = request.data,
							    peerName = _request$data.peerName,
							    _displayName = _request$data.displayName,
							    oldDisplayName = _request$data.oldDisplayName;


							if (_this4._room !== null) {
								// NOTE: Hack, we shouldn't do this, but this is just a demo.
								var peer = _this4._room.getPeerByName(peerName);

								if (!peer) {
									logger.error('display-name-changed peer not found');
									break;
								}

								peer.appData.displayName = _displayName;
								logger.debug('display-name-changed displayName: ' + _displayName + ' peerName: ' + peerName);
							}
							break;
						}

					case '3T_applySpeak':
						{
							accept();
							// auto aprove(not deny) the applying.
							_this4._protoo.send('approveSpeak', request.data);
							break;
						}

					case 'active-speaker':
						{
							accept();
							var _peerName = request.data.peerName;
							// logger.debug('RoomActiveSpeaker', peerName);

							break;
						}

					default:
						{
							logger.error('protoo.requst event -- [' + request.method + '] unknown protoo method');

							reject(404, 'unknown method');
						}
				}
			});

			// NOTE: Custom defined signals by server notification.
			this._protoo.on('notification', function (notification) {
				switch (notification.method) {
					case '3T_sessionid':
						// define by BIG-NET.
						{
							var sessionId = notification.data.sessionId;

							logger.debug('protooPeer event -- [notification:3T_sessionid] - ' + sessionId);

							_this4._stats.setSessionId(sessionId);
							break;
						}

					case '3T_connectid':
						// define by BIG-NET.
						{
							var connectId = notification.data.connectId;

							_this4._stats.setConnectionId(connectId);

							logger.debug('protooPeer event -- [notification:3T_connectid] - ' + connectId);

							onSuccess('You are join the room');

							_this4._joined = true;

							logger.debug('API protooPeer event -- [notification:3T_connectid] -- Emit [enter] to APP');

							// 
							_this4.emit('connection-state-change', {
								prevState: _this4._connState,
								curState: clientConnState.CONNECTED
							});
							_this4._connState = clientConnState.CONNECTED;

							// 
							if (!!_this4._joinTimer) {
								clearTimeout(_this4._joinTimer);
								_this4._joinTimer = null;
							}
							break;
						}

					case '3T_kickout':
						// kickout notified by svc and the leave by client ourself.
						{
							// if (this._role == '1') {
							//     logger.error('I was master in room, then cannot be kickout');
							// } else {
							//     this.emit('kickoout', notification.data);
							//     this.close();
							// }

							logger.debug('API protooPeer event -- [notification:3T_kickout] - Emit [kickout] to APP - ' + (0, _stringify2.default)(notification.data));

							_this4.emit('kickout', notification.data);
							_this4.close();

							break;
						}

					case '3T_CDN_URL':
						// suport CND subscribed.
						{
							var CDN_url = notification.data.CDN_url;


							logger.debug('API protooPeer event -- [notification:3T_CDN_URL] url: ' + CDN_url + ' - Emit [CDN_url] to APP');

							_this4.emit({ 'CDN_url': CDN_url });
							break;
						}

					case 'active-speaker':
						{
							var peerName = notification.data.peerName;

							// logger.debug('RoomActiveSpeaker', peerName);

							break;
						}

					case '3T_audiencevisible':
						{
							var peerId = notification.data.peerId;


							logger.debug('API protooPeer event -- [notification:3T_audiencevisible] peerId: ' + peerId + ' - Emit [peer-join] to APP');
							var peer = _this4._peers.get(peerId);
							if (peer) {
								_this4.emit('peer-join', { userID: peerId, peer: peer });
							}
							break;
						}

					case '3T_changerole':
						{
							var _notification$data = notification.data,
							    _peerId = _notification$data.peerId,
							    role = _notification$data.role;


							logger.debug('API protooPeer event -- [notification:3T_changerole] peerId: ' + _peerId + ' - role: ' + role);
							var _peer = _this4._peers.get(_peerId);
							_peer.appData.role = role.toString();
							if (_peer) {
								if (_peer.appData.role === '2') {
									logger.debug('API protooPeer event -- [notification:3T_changerole] peerId: ' + _peerId + ' role: ' + role + ' - Emit [peer-join] to APP');
									_this4.emit('peer-join', { userID: _peerId, peer: _peer });
								} else if (_peer.appData.role === '3') {
									logger.debug('API protooPeer event -- [notification:3T_changerole] peerId: ' + _peerId + ' role: ' + role + ' - Emit [peer-leave] to APP');
									_this4.emit('peer-leave', { userID: _peerId, streams: [] });
								}
							}
							break;
						}
					case '3T_rtmpfailure':
						{
							var _notification$data2 = notification.data,
							    roomId = _notification$data2.roomId,
							    url = _notification$data2.url;


							logger.debug('API protooPeer event -- [notification:3T_rtmpfailure] url: ' + url + ' - Emit [rtmp-failure] to APP');
							_this4.emit('rtmp-failure', { url: url, channelId: roomId });
							break;
						}
					case '3T_rtmpsuccess':
						{
							var _notification$data3 = notification.data,
							    _roomId = _notification$data3.roomId,
							    _url = _notification$data3.url;


							logger.debug('API protooPeer event -- [notification:3T_rtmpsuccess] url: ' + _url + ' - Emit [rtmp-success] to APP');
							_this4.emit('rtmp-success', { url: _url, channelId: _roomId });
							break;
						}
					case '3T_needrefreshtoken':
						// close to expire.
						{
							logger.debug('API protooPeer event -- [notification:3T_needrefreshtoken] - Emit [onTokenPrivilegeWillExpire] to APP');
							_this4.emit('onTokenPrivilegeWillExpire');
							break;
						}
					default:
						{
							logger.error('protoo.requst event -- [' + notification.method + '] unknown protoo method');

							// reject(404, 'unknown method');
						}
				}
			});
		}
	}, {
		key: '_joinRoom',
		value: function _joinRoom(_ref2, onSuccess, onFailure) {
			var displayName = _ref2.displayName,
			    device = _ref2.device,
			    options = _ref2.options;

			var _this5 = this;

			logger.debug('this._joinRoom() try to join room...');
			// NOTE: We allow rejoining (room.join()) the same mediasoup Room when Protoo
			// WebSocket re-connects, so we must clean existing event listeners. Otherwise
			// they will be called twice after the reconnection.
			this._room.removeAllListeners();

			this._room.on('close', function (originator, appData) {
				if (originator === 'remote') {
					logger.warn('room event -- mediasoup Peer/Room remotely closed -- appData: ' + (0, _stringify2.default)(appData));

					_this5._stats.stopHeartBeat();
				}
			});

			this._room.on('request', function (request, callback, errback) {
				// logger.debug(`room event -- sending mediasoup [request:${request.method}]: ${JSON.stringify(request)}`);
				logger.debug('room event -- [request:' + request.method + '] sending to mediasoup ');

				_this5._protoo.send('mediasoup-request', request).then(callback).catch(errback);
			});

			this._room.on('notify', function (notification) {
				// logger.debug(`room event -- sending mediasoup [notification:${notification.method}]: ${JSON.stringify(notification)}`);
				logger.debug('room event -- [notification:' + notification.method + '] sending to mediasoup');

				if (_this5._closed) {
					return;
				}

				_this5._protoo.send('mediasoup-notification', notification).catch(function (error) {
					logger.warn('Send mediasoup notification failed - ' + error.toString());
				});
			});

			this._room.on('newpeer', function (peer) {
				logger.debug('room event -- [newpeer] peerName: ' + peer.name);
				_this5._peers.set(peer.name, peer);
				_this5._handlePeer(peer);
			});

			this._joinTimer = setTimeout(function () {
				if (_this5._joined) {
					if (!!_this5._joinTimer) {
						clearTimeout(_this5._joinTimer);
					}
					_this5._joinTimer = null;

					return;
				}

				_this5._tryJoin++;
				// 
				if (+_this5._tryJoin < 3) {
					// 
					_this5._innerClose();

					_this5._room = null;
					// 

					// Close protoo Peer (wait a bit so mediasoup-client can send
					// the 'leaveRoom' notification).
					if (_this5._protoo) {
						_this5._protoo.close();
						_this5._protoo = null;
					}

					// 
					setTimeout(function () {
						_this5.join(_this5._roomId, onSuccess, onFailure, _this5._options);
					});
				} else {
					logger.warn('timeout -- join room timeout');
					_this5._joinTimer = null;

					_this5.close();
					_this5._stats.sendTimeOutLog(_this5._timesOfLinkGW, +Client.JOIN_ROOM_TIME_OUT * 3);
					onFailure('join room timeout');
				}
			}, Client.JOIN_ROOM_TIME_OUT);

			var appData = {
				displayName: displayName,
				device: device,
				'role': this._role,
				token: options.token || ''
			};
			// master role application data.
			if (this._role === '1' && this._valid_rtmp_url !== '') {
				appData.rtmpUrl = this._valid_rtmp_url;
				appData.disableRtmpVideo = this._disableRtmpVideo;
			}

			this._room.join(this._peerName, appData).then(function () {
				// 首先中止 ice restart timer
				_this5._stopIceRestartTimer();

				// Create Transport for sending (unless we are spy).
				if (!_this5._spy) {
					_this5._sendTransport = _this5._room.createTransport('send', { media: 'SEND_MIC_WEBCAM' });

					_this5._sendTransport.on('close', function (originator) {
						logger.debug('_sendTransport event -- [close] originator: ' + (0, _stringify2.default)(originator));
					});

					// this._sendTransport.enableStats(this._interval);

					// this._sendTransport.on('stats', (stats) => {
					//     this._stats.pushStats(stats);
					// });

					_this5._sendTransport.on('connectionstatechange', function (connectionstate) {
						logger.debug('_sendTransport event -- [connectionstatechange] connectionstat: ' + connectionstate);

						if (connectionstate === 'disconnected') {
							// only for stat
							_this5._iceSendDisconnectedCnt++;
							// 
							logger.debug('_sendTransport event -- [connectionstatechange:disconnected] - will restart ice after ' + Client.TIMEOUT_ICE_DISCONNECTED + 's');
							setTimeout(function () {
								_this5._retryRestartIce(_this5._sendTransport);
							}, Client.TIMEOUT_ICE_DISCONNECTED);
						}

						if (connectionstate === 'failed') {
							logger.debug('_sendTransport event -- [connectionstatechange:failed] - will restart ice');
							// Can't receved failed event on the chrome 76.0.3809.87 64 bits version.
							_this5._retryRestartIce(_this5._sendTransport);
						}

						if (connectionstate === 'connected') {
							logger.debug('_sendTransport event -- [connectionstatechange:connected]');
							// for webrtc internals
							getStats(_this5._sendTransport._handler._pc, function (result) {
								// console.log(`<STAT> _sendTransport -- ${JSON.stringify(result)}`);
								_this5._stats.setWebrtcInternalSendStats(result);
							}, 1000);
							// end for webrtc internals
						}

						_this5._stats.setSendIceState(connectionstate);
					});
				}

				// Create Transport for recipient.
				_this5._recvTransport = _this5._room.createTransport('recv', { media: 'RECV' });

				_this5._recvTransport.on('close', function (originator) {
					logger.debug('_recvTransport event -- [close] originator: ' + (0, _stringify2.default)(originator));
				});

				_this5._recvTransport.on('connectionstatechange', function (connectionstate) {
					logger.debug('_recvTransport event -- [connectionstatechange] connectionstate: ' + connectionstate);

					if (connectionstate === 'disconnected') {
						// only for stat
						_this5._iceRecvDisconnectedCnt++;

						logger.debug('_recvTransport event -- [connectionstatechange:disconnected] - will restart ice after ' + Client.TIMEOUT_ICE_DISCONNECTED + 's');
						setTimeout(function () {
							_this5._retryRestartIce(_this5._recvTransport);
						}, Client.TIMEOUT_ICE_DISCONNECTED);
					}

					if (connectionstate === 'failed') {
						logger.debug('_recvTransport event -- [connectionstatechange:failed] - will restart ice');
						_this5._retryRestartIce(_this5._recvTransport);
					}

					if (connectionstate === 'connected') {
						logger.debug('_recvTransport event -- [connectionstatechange:connected]');
						// for webrtc internals
						getStats(_this5._recvTransport._handler._pc, function (result) {
							_this5._stats.setWebrtcInternalRecvStats(result);
						}, 1000);
						// end for webrtc internals
					}

					_this5._stats.setRecvIceState(connectionstate);
				});

				// this._recvTransport.enableStats(this._interval);
				// this._recvTransport.on('stats', (stats) => {
				//     this._stats.pushStats(stats);
				// });
			}).then(function () {
				if (_this5._spy) return;

				// Set our media capabilities.
				// this._dispatch(stateActions.setMediaCapabilities(
				// 	{
				// 		canSendMic    : this._room.canSend('audio'),
				// 		canSendWebcam : this._room.canSend('video')
				// 	}));
			}).then(function () {
				logger.debug('_room.join() success.');

				// filter anchor and vice
				var peers = _this5._room.peers;

				var _iteratorNormalCompletion = true;
				var _didIteratorError = false;
				var _iteratorError = undefined;

				try {
					for (var _iterator = (0, _getIterator3.default)(peers), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
						var peer = _step.value;

						_this5._handlePeer(peer, { notify: false });
					}
				} catch (err) {
					_didIteratorError = true;
					_iteratorError = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion && _iterator.return) {
							_iterator.return();
						}
					} finally {
						if (_didIteratorError) {
							throw _iteratorError;
						}
					}
				}

				_this5._stats.startHeartBeat();

				// 注：待收到 3tconnectId 时，才最终通知上层：成功加入房间
			}).catch(function (error) {
				// 如下代码不再执行 -- 完全由 _joinTimer 来控制
				/*
    logger.warn(`_room.join() failed - ${error.toString()}`);
    this.close();
    	this._stats.sendFailLog(this._timesOfLinkGW, this._linkGWTime, this._sendGWTime, this._sendEnterTime, this._role, error.result || 1);
    onFailure(new Error(`Could not join the room: ${error.toString()}`));
    */
			});
		}

		/**
   * Leave the joined room.
   * @param {function} onSuccess
   * @param {function} onFailure
   */

	}, {
		key: 'leave',
		value: function () {
			var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(onSuccess, onFailure) {
				return _regenerator2.default.wrap(function _callee$(_context) {
					while (1) {
						switch (_context.prev = _context.next) {
							case 0:
								if (!(typeof onSuccess !== 'function')) {
									_context.next = 3;
									break;
								}

								logger.error('API leave() error - parameter: onSuccess invalid');
								throw TypeError('onSuccess is not a fucntion.');

							case 3:
								if (!(typeof onFailure !== 'function')) {
									_context.next = 6;
									break;
								}

								logger.error('API leave() error - parameter: onFailure invalid');
								throw TypeError('onFailure is not a fucntion.');

							case 6:

								if (!this._protooTransportStat) {
									logger.warn('API leave() error - protooTransport broken');

									/*
         onFailure('protooTransport is broken');
         return;
         */
								}

								_context.prev = 7;

								// 更新当前登录状态为 未登录
								this._joined = false;

								_context.next = 11;
								return this._room.leave();

							case 11:

								logger.debug('API leave() success.');
								// return onSuccess();
								_context.next = 17;
								break;

							case 14:
								_context.prev = 14;
								_context.t0 = _context['catch'](7);

								logger.warn('API leave() error - ' + _context.t0.toString());
								// onFailure(e);

							case 17:
								_context.prev = 17;

								onSuccess();

								logger.debug('API leave() finish.');
								return _context.finish(17);

							case 21:
							case 'end':
								return _context.stop();
						}
					}
				}, _callee, this, [[7, 14, 17, 21]]);
			}));

			function leave(_x3, _x4) {
				return _ref3.apply(this, arguments);
			}

			return leave;
		}()

		/**
   * publish stream.
   * @param stream wish puslished.
   * @param {function} onSuccess success call back.
   * @param {function} onFailure fualure call back.
   */

	}, {
		key: 'publish',
		value: function publish(stream, onSuccess, onFailure) {
			var _this6 = this;

			if (!stream || !stream.streamObj) {
				logger.error('API publish() error - stream is null');
				throw new TypeError('stream param error');
			}

			if (typeof onSuccess !== 'function') {
				logger.error('API publish() error - parameter: onSuccess invalid');
				throw new TypeError('onSuccess parameter must be a function.');
			}

			if (typeof onFailure !== 'function') {
				logger.error('API publish() error - parameter: onFailure invalid');
				throw new TypeError('onFailure parameter must be a function.');
			}

			if (!this._protooTransportStat) {
				logger.warn('API publish() error - protooTransport is broken');

				onFailure('protooTransport is broken');

				return;
			}

			if (!this._joined) {
				logger.warn('API publish() error - non-joined');

				onFailure('non-joined');

				return;
			}

			// Don't produce if we are spy.
			if (this._spy) {
				logger.error('API publish() error - user is _spy');
				onFailure('you are spy');
				return;
			}

			if (this._role === '3') {
				logger.error('API publish() error - forbidden because of Audience role');
				onFailure('you are audience');
				return;
			}

			stream.userID = this._uid;
			var micProducer = this._mapMicProducers.get(stream._innerStreamID);
			if (micProducer) {
				// 2020.2.9 this.resumeMic();
				this._resumeProducer(micProducer);
			}

			var webcamProducer = this._mapWebcamProducers.get(stream._innerStreamID);
			if (webcamProducer) {
				// 2020.2.9 this.resumeWebcam();
				this._resumeProducer(webcamProducer);

				//
				// 在 非publish 状态下，曾经调用过 replaceTrack，故此处应执行一下 updateTrack
				if (stream._needUpdateTrack) {
					this._updateTrack(stream, stream.videoTracks);
					// 要及时将 stream._needUpdateTrack 重置为 false
					stream._needUpdateTrack = false;
				}
			}

			if (webcamProducer || micProducer) {
				logger.debug('API publish() success - streamId: ' + stream.innerStreamID + ' - Emit [stream-published] to APP');
				stream._published = true;

				// only for stat
				this._publishs.set(stream.innerStreamID, stream.innerStreamID);

				this.emit('stream-published', { stream: stream });

				onSuccess();
				return;
			}

			if (!stream.streamObj.getAudioTracks()[0] && !stream.streamObj.getVideoTracks()[0]) {
				logger.debug('API publish() error - audioTrack or videoTrack non-exist.');
				onFailure('no audio and video kind track');
				return;
			}

			var audioPublished = false;
			var videoPublished = false;

			// NOTE: Don't depend on this Promise to continue (so we don't do return).
			_promise2.default.resolve()
			// Add our mic.
			.then((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
				return _regenerator2.default.wrap(function _callee2$(_context2) {
					while (1) {
						switch (_context2.prev = _context2.next) {
							case 0:
								if (_this6._room.canSend('audio')) {
									_context2.next = 3;
									break;
								}

								logger.warn('API publish() error - audio cannot Send.');
								return _context2.abrupt('return');

							case 3:
								if (stream.streamObj.getAudioTracks()[0]) {
									_context2.next = 6;
									break;
								}

								logger.debug('API publish() error - audioTrack non-exist.');
								return _context2.abrupt('return');

							case 6:
								_context2.prev = 6;
								_context2.next = 9;
								return _this6._setMicProducer(stream);

							case 9:
								audioPublished = true;
								_this6._stats.audioOpen = true;
								_context2.next = 16;
								break;

							case 13:
								_context2.prev = 13;
								_context2.t0 = _context2['catch'](6);

								logger.warn('API publish() error - ' + _context2.t0.toString());
								// logger.error(e);

							case 16:
							case 'end':
								return _context2.stop();
						}
					}
				}, _callee2, _this6, [[6, 13]]);
			})))
			// Add our webcam (unless the cookie says no).
			.then((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
				return _regenerator2.default.wrap(function _callee3$(_context3) {
					while (1) {
						switch (_context3.prev = _context3.next) {
							case 0:
								if (_this6._room.canSend('video')) {
									_context3.next = 3;
									break;
								}

								logger.warn('API publish() error - video cannot Send.');
								return _context3.abrupt('return');

							case 3:
								if (stream.streamObj.getVideoTracks()[0]) {
									_context3.next = 6;
									break;
								}

								logger.debug('API publish() error - videoTrack non-exist.');
								return _context3.abrupt('return');

							case 6:
								_context3.prev = 6;
								_context3.next = 9;
								return _this6._setWebcamProducer(stream);

							case 9:
								videoPublished = true;
								_this6._stats.videoOpen = true;
								_context3.next = 16;
								break;

							case 13:
								_context3.prev = 13;
								_context3.t0 = _context3['catch'](6);

								logger.warn('API publish() error - ' + _context3.t0.toString());
								// logger.error(e);

							case 16:
							case 'end':
								return _context3.stop();
						}
					}
				}, _callee3, _this6, [[6, 13]]);
			}))).then(function () {
				if (audioPublished || videoPublished) {
					stream._published = true;
					logger.debug('API publish() success - streamId: ' + stream.innerStreamID + '- Emit [stream-published] to APP');

					// only for stat
					_this6._publishs.set(stream.innerStreamID, stream.innerStreamID);

					_this6.emit('stream-published', { stream: stream });

					onSuccess();
				} else {
					onFailure('no audio or video to be sent');
				}
			}).catch(function (e) {
				logger.warn('API publish() error - ' + e.toString());
				onFailure(e);
			});
		}

		/**
   * Unpublish the stream. 
   * @param {Any} stream wish unpulbish.
   * @param {function} onSuccess
   * @param {function} onFailure
   */

	}, {
		key: 'unpublish',
		value: function unpublish(stream, onSuccess, onFailure) {
			if (!stream) {
				logger.error('API unpublish() error - stream is null');
				throw new TypeError('stream param error');
			}

			// check params.
			if (typeof onSuccess !== 'function') {
				logger.error('API unpublish() error - parameter: onSuccess invalid');
				throw new TypeError('onSuccess parameter must be a function.');
			}

			if (typeof onFailure !== 'function') {
				logger.error('API unpublish() error - parameter: onFailure invalid');
				throw new TypeError('onFailure parameter must be a function.');
			}

			if (!this._protooTransportStat) {
				logger.warn('API unpublish() error - protooTransport is broken');

				onFailure('protooTransport is broken');

				return;
			}

			// NOTE: Nothing to doing if not published of the stream.
			var micProducer = this._mapMicProducers.get(stream._innerStreamID);
			if (micProducer) {
				// 2020.2.9 this.pauseMic(stream);
				this._pauseProducer(micProducer);
				// this._micProducer.close();
			}

			var webcamProducer = this._mapWebcamProducers.get(stream._innerStreamID);
			if (webcamProducer) {
				// 2020.2.9 this.pauseWebcam(stream);
				this._pauseProducer(webcamProducer);
				// this._webcamProducer.close();
			}

			// 
			this._stats.audioOpen = false;
			this._stats.videoOpen = false;

			stream._published = false;

			// only for stat
			this._publishs.delete(stream.innerStreamID);

			logger.debug('API unpublish() success - streamId: ' + stream.innerStreamID + ' - Emit [stream-unpublished] to APP');
			this.emit('stream-unpublished', { stream: stream });

			onSuccess();
		}

		/**
   * publish screen.
  * 该函数废弃 -- 对于屏幕流，也统一采用 publish
   * @param {object} stream 
   * @param {function} onSuccess 
   * @param {function} onFailure 
   */

	}, {
		key: 'publishScreen',
		value: function publishScreen(stream, onSuccess, onFailure) {
			var _this7 = this;

			if (!stream || !stream.streamObj) {
				logger.error('API publishScreen() error - parameter: stream is invalid');
				throw new TypeError('stream param error');
			}

			if (typeof onSuccess !== 'function') {
				logger.error('API publishScreen() error - parameter: onSuccess invalid');
				throw new TypeError('onSuccess is not function.');
			}

			if (typeof onFailure !== 'function') {
				logger.error('API publishScreen() error - parameter: onFailure invalid');
				throw new TypeError('onFailure is not function.');
			}

			if (!this._protooTransportStat) {
				logger.warn('API publishScreen() error - protooTransport broken');

				onFailure('protooTransport is broken');

				return;
			}

			if (!this._joined) {
				logger.warn('API publishScreen() error - non-joined');

				onFailure('non-joined');

				return;
			}

			// Don't produce if we are spy.
			if (this._spy) {
				logger.error('API publishScreen() error - user is _spy');
				onFailure('you are spy');
				return;
			}

			// Prohibition for audience.
			if (this._role === '3') {
				logger.error('API publishScreen() error - forbidden because of Audience role');
				onFailure('you are audience');
				return;
			}

			stream.userID = this._uid;
			if (this._screenProducer !== null) {
				this.resumeScreen();
				logger.debug('API publishScreen() success streamId: ' + stream.innerStreamID + ' - Emit [stream-published] to APP');
				this.emit('screen-published', { stream: stream });

				return;
			}

			_promise2.default.resolve()
			// add own screen.
			.then(function () {
				if (!_this7._room.canSend('video')) {
					logger.warn('API publishScreen() error - video cannot Send.');
					return;
				}

				_this7._setScreenProducer(stream).catch(function (e) {
					logger.error('API publishScreen() error - ' + e.toString() + '.');
				});

				logger.debug('API publishScreen() success - streamId: ' + stream.innerStreamID + ' - Emit [stream-published] to APP');
				_this7.emit('screen-published', { stream: stream });

				onSuccess();
			});
		}

		/**
   * unpublish screen stream.
  * 该函数废弃 -- 对于屏幕流，也统一采用 unpublish
   * @param {Any} stream 
   * @param {function} onSuccess 
   * @param {function} onFailure 
   */

	}, {
		key: 'unpublishScreen',
		value: function unpublishScreen(stream, onSuccess, onFailure) {
			if (!stream || !stream.streamObj) {
				logger.error('API unpublishScreen() error - parameter: stream is invalid');
				throw new TypeError('stream param error');
			}

			if (typeof onSuccess !== 'function') {
				logger.error('API unpublishScreen() error - parameter: onSuccess invalid');
				throw TypeError('onSuccess is not function.');
			}

			if (typeof onFailure !== 'function') {
				logger.error('API unpublishScreen() error - parameter: onFailure invalid');
				throw TypeError('onFailure is not function.');
			}

			if (!this._protooTransportStat) {
				logger.warn('API unpublishScreen() error - protooTransport broken');

				onFailure('protooTransport is broken');

				return;
			}

			if (this._screenProducer) {
				// Not pause it just mandatory close.
				this._screenProducer.close();
			}

			this._screenProducer = null;

			logger.debug('API unpublishScreen() success - streamId: ' + stream.innerStreamID + ' - Emit [stream-unpublished] to APP');
			this.emit('screen-unpublished', { stream: stream });

			return onSuccess();
		}
	}, {
		key: 'subscribeAudio',
		value: function subscribeAudio(stream, onSuccess, onFailure) {
			var _this8 = this;

			if (!stream) {
				logger.error('API subscribeAudio() error - parameter: stream is invalid');
				throw new TypeError('stream');
			}

			if (typeof onSuccess !== 'function') {
				logger.error('API subscribeAudio() error - parameter: onSuccess invalid');
				throw TypeError('onSuccess is not function.');
			}

			if (typeof onFailure !== 'function') {
				logger.error('API subscribeAudio() error - parameter: onFailure invalid');
				throw TypeError('onFailure is not function.');
			}

			if (!this._protooTransportStat) {
				logger.warn('API subscribeAudio() error - protooTransport broken');

				onFailure('protooTransport is broken');

				return;
			}

			if (!this._joined) {
				logger.warn('API subscribeAudio() error - non-joined');

				onFailure('non-joined');

				return;
			}

			logger.debug('API subscribeAudio() - streamId: ' + stream.getId() + ' stream.userID: ' + stream.userID);

			var peer = this._peers.get(stream.userID);
			if (!peer) {
				logger.error('API subscribeAudio() error - non-peer: ' + stream.userID);
				return onFailure('Can not found this peer');
			}

			peer.consumers.forEach(function (element) {
				if (!!element.appData && element.appData.streamID === stream.streamID) {
					if (element.kind === 'audio') _this8._consumerAct(stream, element, 'resume', 'audio', onSuccess);
				}
			});
		}
	}, {
		key: 'unsubscribeAudio',
		value: function unsubscribeAudio(stream, onSuccess, onFailure) {
			var _this9 = this;

			if (!stream) {
				logger.error('API unsubscribeAudio() error - parameter: stream is invalid');
				throw new TypeError('stream');
			}

			if (typeof onSuccess !== 'function') {
				logger.error('API unsubscribeAudio() error - parameter: onSuccess invalid');
				throw TypeError('onSuccess is not function.');
			}

			if (typeof onFailure !== 'function') {
				logger.error('API unsubscribeAudio() error - parameter: onFailure invalid');
				throw TypeError('onFailure is not function.');
			}

			if (!this._protooTransportStat) {
				logger.warn('API unsubscribeAudio() error - protooTransport broken');

				onFailure('protooTransport is broken');

				return;
			}

			logger.debug('API unsubscribeAudio() - streamId: ' + stream.getId() + ' stream.userID: ' + stream.userID);

			var peer = this._peers.get(stream.userID);
			if (!peer) {
				logger.error('API unsubscribeAudio() error - non-peer: ' + stream.userID);
				return onFailure('Can not found this peer');
			}

			peer.consumers.forEach(function (element) {
				if (!!element.appData && element.appData.streamID === stream.streamID) {
					if (element.kind === 'audio') _this9._consumerAct(stream, element, 'pause', 'audio', onSuccess);
				}
			});
		}
	}, {
		key: 'subscribeVideo',
		value: function subscribeVideo(stream, onSuccess, onFailure) {
			var _this10 = this;

			if (!stream) {
				logger.error('API subscribeVideo() error - parameter: stream is invalid');
				throw new TypeError('stream');
			}

			if (typeof onSuccess !== 'function') {
				logger.error('API subscribeVideo() error - parameter: onSuccess invalid');
				throw TypeError('onSuccess is not function.');
			}

			if (typeof onFailure !== 'function') {
				logger.error('API subscribeVideo() error - parameter: onFailure invalid');
				throw TypeError('onFailure is not function.');
			}

			if (!this._protooTransportStat) {
				logger.warn('API subscribeVideo() error - protooTransport broken');

				onFailure('protooTransport is broken');

				return;
			}

			if (!this._joined) {
				logger.warn('API subscribeVideo() error - non-joined');

				onFailure('non-joined');

				return;
			}

			logger.debug('API subscribeVideo() - streamId: ' + stream.getId() + ' stream.userID: ' + stream.userID);

			var peer = this._peers.get(stream.userID);
			if (!peer) {
				logger.error('API subscribeVideo() error - non-peer: ' + stream.userID);
				return onFailure('Can not found this peer');
			}

			peer.consumers.forEach(function (element) {
				if (!!element.appData && element.appData.streamID === stream.streamID) {
					if (element.kind === 'video') _this10._consumerAct(stream, element, 'resume', 'video', onSuccess);
				}
			});
		}
	}, {
		key: 'unsubscribeVideo',
		value: function unsubscribeVideo(stream, onSuccess, onFailure) {
			var _this11 = this;

			if (!stream) {
				logger.error('API unsubscribeVideo() error - parameter: stream is invalid');
				throw new TypeError('stream');
			}

			if (typeof onSuccess !== 'function') {
				logger.error('API unsubscribeVideo() error - parameter: onSuccess invalid');
				throw TypeError('onSuccess is not function.');
			}

			if (typeof onFailure !== 'function') {
				logger.error('API unsubscribeVideo() error - parameter: onFailure invalid');
				throw TypeError('onFailure is not function.');
			}

			if (!this._protooTransportStat) {
				logger.warn('API unsubscribeVideo() error - protooTransport broken');

				onFailure('protooTransport is broken');

				return;
			}

			logger.debug('API unsubscribeVideo() streamId: ' + stream.getId() + ' stream.userID: ' + stream.userID);

			var peer = this._peers.get(stream.userID);
			if (!peer) {
				logger.error('API unsubscribeVideo() error - non-peer: ' + stream.userID);
				return onFailure('Can not found this peer');
			}

			peer.consumers.forEach(function (element) {
				if (!!element.appData && element.appData.streamID === stream.streamID) {
					if (element.kind === 'video') _this11._consumerAct(stream, element, 'pause', 'video', onSuccess);
				}
			});
		}

		// 

	}, {
		key: '_consumerAct',
		value: function _consumerAct(stream, consumer, type, kind, onSuccess) {
			if (!consumer) {
				throw new TypeError('consumer');
			}

			var evt = { stream: stream };

			if (type === 'pause') {
				consumer.pause();
				onSuccess(stream);
				logger.debug('API _consumerAct() success - streamId: ' + stream.getId() + ' - Emit [stream-' + kind + '-unsubscribed] to APP');

				this.emit('stream-' + kind + '-unsubscribed', evt);

				return;
			} else if (type === 'resume') {
				consumer.resume();
				onSuccess(stream);
				logger.debug('API _consumerAct() success - streamId: ' + stream.getId() + ' - Emit [stream-' + kind + '-subscribed] to APP');

				this.emit('stream-' + kind + '-subscribed', evt);

				return;
			} else {
				logger.debug('API _consumerAct() error - invalid type - should be [resume|pause]');
			}

			throw new TypeError('type');
		}

		/**
   * Subscribe the stream of your purpose.
   * @param stream
   * @param onSuccess
   * @param onFailure
   */

	}, {
		key: 'subscribe',
		value: function subscribe(stream, onSuccess, onFailure) {
			var _this12 = this;

			if (!stream) {
				logger.error('API subscribe() error - parameter: stream is invalid');
				throw new TypeError('stream');
			}

			if (typeof onSuccess !== 'function') {
				logger.error('API subscribe() error - parameter: onSuccess invalid');
				throw TypeError('onSuccess is not function.');
			}

			if (typeof onFailure !== 'function') {
				logger.error('API subscribe() error - parameter: onFailure invalid');
				throw TypeError('onFailure is not function.');
			}

			if (!this._protooTransportStat) {
				logger.warn('API subscribe() error - protooTransport broken');

				onFailure('protooTransport is broken');

				return;
			}

			if (!this._joined) {
				logger.warn('API subscribe() error - non-joined');

				onFailure('non-joined');

				return;
			}

			var peer = this._peers.get(stream.userID);
			if (!peer) {
				logger.error('API subscribe() error - non-peer: ' + stream.userID);
				return onFailure('Can not found this peer');
			}

			var consumers = [];
			peer.consumers.forEach(function (element) {
				if (element.appData.streamID === stream.streamID) {
					consumers.push(element);

					// only for stat
					_this12._subscribes.set(stream.streamID, {
						streamID: stream.streamID,
						status: 'active'
					});
				}
			});

			consumers.forEach(function (value) {
				value.resume();
			});

			stream.subscribed = true;
			var evt = { stream: stream };

			onSuccess(stream);

			logger.debug('API subscribe() success - streamId: ' + stream.getId() + ' - Emit [stream-subscribed] to APP');

			this.emit('stream-subscribed', evt);
		}

		/**
   * Unsbubscribe the stream.
   * @param {Any} stream
   * @param {function} onSuccess
   * @param {function} onFailure
   */

	}, {
		key: 'unsubscribe',
		value: function unsubscribe(stream, onSuccess, onFailure) {
			var _this13 = this;

			if (!stream) {
				logger.error('API unsubscribe() error - parameter: stream is invalid');
				throw TypeError('stream param error');
			}

			if (typeof onSuccess !== 'function') {
				logger.error('API unsubscribe() error - parameter: onSuccess invalid');
				throw TypeError('onSuccess is not function.');
			}

			if (typeof onFailure !== 'function') {
				logger.error('API unsubscribe() error - parameter: onFailure invalid');
				throw TypeError('onFailure is not function.');
			}

			if (!this._protooTransportStat) {
				logger.warn('API unsubscribe() error - protooTransport broken');

				onFailure('protooTransport is broken');

				return;
			}

			var peer = this._peers.get(stream.userID);
			if (!peer) {
				logger.error('API unsubscribe() error - non-peer: ' + stream.userID);
				return onFailure('Can not found this peer');
			}

			var consumers = [];
			peer.consumers.forEach(function (element) {
				if (element.appData.streamID === stream.streamID) {
					consumers.push(element);

					// only for stat
					_this13._subscribes.delete(stream.streamID);
				}
			});

			consumers.forEach(function (value) {
				value.pause();
			});

			stream.subscribed = false;
			var evt = { stream: stream };

			onSuccess(stream);

			logger.debug('API unsubscribe() success - streamId: ' + stream.getId() + ' - Emit [stream-unsubscribed] to APP');

			this.emit('stream-unsubscribed', evt);
		}

		/**
   * Pause Mic of local stream.
   * @param {Any} stream
   */

	}, {
		key: 'pauseMic',
		value: function pauseMic(stream) {
			logger.debug('API pauseMic()');
			var producer = void 0;
			if (!stream) {
				producer = this._mapMicProducers.values().next().value;
			} else {
				producer = this._mapMicProducers.get(stream._innerStreamID);
			}

			if (!producer) {
				logger.warn('API pauseMic() error - non mic producer.');
				return;
			}

			this._pauseProducer(producer);
		}

		/**
   * Resume Mic of local stream.
   * @param {Any} stream 
   */

	}, {
		key: 'resumeMic',
		value: function resumeMic(stream) {
			logger.debug('API resumeMic()');
			var producer = void 0;
			if (!stream) {
				producer = this._mapMicProducers.values().next().value;
			} else {
				producer = this._mapMicProducers.get(stream._innerStreamID);
			}

			if (!producer) {
				logger.warn('API resumeMic() error - non mic producer.');
				return;
			}

			this._resumeProducer(producer);
		}

		/**
   * Pause webcam of local stream.
   * @param {Any} stream 
   */

	}, {
		key: 'pauseWebcam',
		value: function pauseWebcam(stream) {
			logger.debug('API pauseWebcam()');
			var producer = void 0;

			// only one stream. That's will comptible with previous viersion(nul multi-stream)
			if (!stream) {
				producer = this._mapWebcamProducers.values().next().value;
			} else {
				//multistream
				producer = this._mapWebcamProducers.get(stream._innerStreamID);
			}

			if (!producer) {
				logger.warn('API pauseWebcam() error - non webcam producer.');
				return;
			}

			this._pauseProducer(producer);
		}

		/**
   * Resume webcam of local stream.
   * @param {Any} stream 
   */

	}, {
		key: 'resumeWebcam',
		value: function resumeWebcam(stream) {
			logger.debug('API resumeWebcam()');
			var producer = void 0;
			if (!stream) {
				producer = this._mapWebcamProducers.values().next().value;
			} else {
				producer = this._mapWebcamProducers.get(stream._innerStreamID);
			}

			if (!producer) {
				logger.warn('API resumeWebcam() error - non webcam producer.');
				return;
			}

			this._resumeProducer(producer);
		}

		/**
   * update track (only video).
   * @param {Any} stream 
   * @param {Any} track 
   */

	}, {
		key: '_updateTrack',
		value: function _updateTrack(stream, track) {
			if (!stream) {
				logger.warn('_updateTrack() error - parameter [stream] is INVALID.');
				return;
			}
			logger.debug('_updateTrack() - streamId: ' + stream.innerStreamID);

			// Only support update video kind track now.
			var producer = this._mapWebcamProducers.get(stream._innerStreamID);
			if (!producer) {
				logger.debug('_updateTrack() error - client update track(kind video of webcam) can not found producer ' + stream.innerStreamID + '.');
				return;
			}

			// Hard resetting track especial bandwidth.
			producer.updateTrack(track, {
				idealBandwidth: stream.idealBandwidth,
				maxBandwidth: stream.maxBandwidth,
				minBandwidth: stream.minBandwidth
			});
		}

		/**
   * Replace track.
   * @param {Any} stream 
   * @param {Any} track this track will cover the privous it.
   */

	}, {
		key: '_replaceTrack',
		value: function _replaceTrack(stream, track) {
			var _this14 = this;

			if (!stream) {
				logger.warn('_replaceTrack() error - parameter [stream] is INVALID.');
				return;
			}

			logger.debug('_replaceTrack() - stream.streamID: ' + stream.innerStreamID);
			// Only support update video kind track now.
			var producer = this._mapWebcamProducers.get(stream._innerStreamID);
			if (!producer) {
				logger.debug('_replaceTrack() error - client replace track(kind video of webcam) can not found producer ' + stream._innerStreamID + '.');
				return;
			}

			_promise2.default.resolve().then(function () {
				producer.replaceTrack(track);
			}).then(function () {
				if (stream._published) {
					_this14._updateTrack(stream, track);
				} else {
					stream._needUpdateTrack = true;
				}
			}).catch(function (e) {
				logger.error('_replaceTrack() error - replace track failed - ' + e.toString());
				throw e;
			});
		}
	}, {
		key: '_resumeProducer',
		value: function _resumeProducer(producer) {
			if (!producer) {
				logger.error('_resumeProducer() error - parameter [producer] is INVALID.');
				throw new TypeError('producer');
			}

			producer.resume();
		}
	}, {
		key: '_pauseProducer',
		value: function _pauseProducer(producer) {
			if (!producer) {
				logger.error('_pauseProducer() error - parameter [producer] is INVALID.');
				throw new TypeError('producer');
			}

			producer.pause();
		}
	}, {
		key: 'pauseScreen',
		value: function pauseScreen() {
			logger.debug('API pauseScreen()');

			if (this._screenProducer !== null) {
				this._screenProducer.pause();
			}
		}
	}, {
		key: 'resumeScreen',
		value: function resumeScreen() {
			logger.debug('API resumeScreen()');

			if (this._screenProducer !== null) {
				this._screenProducer.resume();
			}
		}

		/**
   * Renew Channel Key,
   * TODO.
   * @param channelKey
   * @param onSuccess
   * @param onFailure
   */

	}, {
		key: 'renewChannelKey',
		value: function renewChannelKey(channelKey, onSuccess, onFailure) {}

		/**
   * 开启双流模式
   * TODO.
   */

	}, {
		key: 'enableDualStream',
		value: function enableDualStream() {}

		/**
   * TODO.
   * Set video stream type.
   * @param stream
   * @param streamType
   */

	}, {
		key: 'setRemoteVideoStreamType',
		value: function setRemoteVideoStreamType(stream, streamType) {}

		/**
   * TODO.
   */

	}, {
		key: 'setLowStreamParameter',
		value: function setLowStreamParameter() {}

		/**
   * TODO.
   * close dual stream.
   * @param onSuccess
   * @param onFailure
   */

	}, {
		key: 'disableDualStream',
		value: function disableDualStream(onSuccess, onFailure) {}

		/**
   * set proxy server, e.g.: nginx.
   * TODO.
   */

	}, {
		key: 'setProxyServer',
		value: function setProxyServer(domainName) {}

		/**
   * 设置 AES 加密密码
   * TODO.
   */

	}, {
		key: 'setEncryptionSecret',
		value: function setEncryptionSecret() {}

		/**
   * 设置 AES 加密方案
   * TODO.
   */

	}, {
		key: 'setEncryptionMode',
		value: function setEncryptionMode() {}

		/**
   * read only property.
   */

	}, {
		key: 'closeStream',
		value: function () {
			var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(stream) {
				var micProducer, webcamProducer;
				return _regenerator2.default.wrap(function _callee4$(_context4) {
					while (1) {
						switch (_context4.prev = _context4.next) {
							case 0:
								if (stream) {
									_context4.next = 3;
									break;
								}

								logger.error('API closeStream() error - parameter [stream] is INVALID.');

								throw new TypeError('stream param error');

							case 3:

								logger.error('API closeStream() - streamId: ' + stream.getId());

								// 
								micProducer = this._mapMicProducers.get(stream._innerStreamID);

								if (!micProducer) {
									_context4.next = 14;
									break;
								}

								_context4.prev = 6;
								_context4.next = 9;
								return micProducer.close();

							case 9:
								_context4.next = 14;
								break;

							case 11:
								_context4.prev = 11;
								_context4.t0 = _context4['catch'](6);

								this.logger.warn('API closeStream() error - close micProducer error - ' + _context4.t0.toString());

							case 14:

								// 
								webcamProducer = this._mapWebcamProducers.get(stream._innerStreamID);

								if (!webcamProducer) {
									_context4.next = 24;
									break;
								}

								_context4.prev = 16;
								_context4.next = 19;
								return webcamProducer.close();

							case 19:
								_context4.next = 24;
								break;

							case 21:
								_context4.prev = 21;
								_context4.t1 = _context4['catch'](16);

								this.logger.warn('API closeStream() error - close webcamProducer error - ' + _context4.t1.toString());

							case 24:
							case 'end':
								return _context4.stop();
						}
					}
				}, _callee4, this, [[6, 11], [16, 21]]);
			}));

			function closeStream(_x5) {
				return _ref6.apply(this, arguments);
			}

			return closeStream;
		}()
	}, {
		key: '_innerClose',
		value: function _innerClose() {
			// 更新当前为 未登录
			this._joined = false;

			// 
			this.emit('connection-state-change', {
				prevState: this._connState,
				curState: clientConnState.DISCONNECTED
			});
			this._connState = clientConnState.DISCONNECTED;

			// 
			// 
			if (!!this._joinTimer) {
				clearTimeout(this._joinTimer);
				this._joinTimer = null;
			}

			// 
			this._stopStatInterval();
			// 
			this._remoteVideos.clear();
			this._publishs.clear();
			this._subscribes.clear();

			// 
			this._mapMicProducers.forEach(function (value, key) {
				value.close();
			});

			this._mapWebcamProducers.forEach(function (value, key) {
				value.close();
			});

			this._mapMicProducers.clear();
			this._mapWebcamProducers.clear();

			if (this._sendTransport != null) {
				this._sendTransport.close();
				this._sendTransport = null;
			}

			if (this._screenTransport) {
				this._screenTransport.close();
				this._screenTransport = null;
			}

			if (this._screenProducer) {
				this._screenProducer.close();
				this._screenProducer = null;
			}

			this._mapVideoSendTransports.forEach(function (value, key) {
				value.close();
			});

			this._mapVideoSendTransports.clear();

			if (this._recvTransport) {
				this._recvTransport.close();
				this._recvTransport = null;
			}

			// Leave the mediasoup Room.
			if (this._room) {
				this._room.removeAllListeners();
				this._room.leave();
			}

			this._peers.clear();
		}

		/**
   * close client.
   */

	}, {
		key: 'close',
		value: function close() {
			if (this._closed) return;

			this._closed = true;

			logger.debug('API close()');

			// 
			this._innerClose();

			this._room = null;
			// 

			// Close protoo Peer (wait a bit so mediasoup-client can send
			// the 'leaveRoom' notification).
			if (this._protoo) {
				this._protoo.close();
				this._protoo = null;
			}

			this._stats.stopHeartBeat();
			this.removeAllListeners();
		}
	}, {
		key: '_handlePeer',
		value: function _handlePeer(peer) {
			var _this15 = this;

			var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
			    _ref7$notify = _ref7.notify,
			    notify = _ref7$notify === undefined ? true : _ref7$notify;

			var displayName = peer.appData.displayName;

			logger.debug('API _handlePeer() userID: ' + peer.name + ' - Emit [peer-join] to APP');

			// The peer name equal with peer.id.
			if (peer.appData.role.toString() !== '3') {
				this.emit('peer-join', {
					userID: peer.name,
					peer: peer // for compatibility with previous version(3.0 and 3.1)
				});
			}
			this._peers.set(peer.name, peer);

			/*
         logger.debug('addPeer:', {
   	name: peer.name,
   	displayName: displayName,
   	device: peer.appData.device,
   	consumers: []
   });
   */

			var _iteratorNormalCompletion2 = true;
			var _didIteratorError2 = false;
			var _iteratorError2 = undefined;

			try {
				for (var _iterator2 = (0, _getIterator3.default)(peer.consumers), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
					var consumer = _step2.value;

					this._handleConsumer(consumer);
				}
			} catch (err) {
				_didIteratorError2 = true;
				_iteratorError2 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion2 && _iterator2.return) {
						_iterator2.return();
					}
				} finally {
					if (_didIteratorError2) {
						throw _iteratorError2;
					}
				}
			}

			peer.on('close', function (originator) {
				logger.debug('peer event [close] - userID: ' + peer.name + ' originator: ' + originator);

				_this15._peers.delete(peer.name);
				if (!_this15._closed) {
					logger.debug('API _handlePeer() event [close] - userID: ' + peer.name + ' - Emit [peer-leave] to APP');
					_this15.emit('peer-leave', { userID: peer.name, streams: peer.streams || [], peer: peer /**for compatibility previous version(3.0, 3.1) */ });
				}
			});

			peer.on('newconsumer', function (consumer) {
				/*
             logger.debug(
                 `peer event -- [newconsumer] name:'%s', id:%s, consumer:%o]`,
    	peer.name, consumer.id, consumer);
    */
				logger.debug('API _handlePeer() peer event [newconsumer] - peer.name: ' + peer.name + ' consumer.id: ' + consumer.id);

				_this15._handleConsumer(consumer);
			});
		}
	}, {
		key: '_handleConsumer',
		value: function () {
			var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(consumer) {
				var _this16 = this;

				var codec, stream_;
				return _regenerator2.default.wrap(function _callee5$(_context5) {
					while (1) {
						switch (_context5.prev = _context5.next) {
							case 0:
								codec = consumer.rtpParameters.codecs[0];


								logger.debug({
									id: consumer.id,
									peerName: consumer.peer.name,
									source: consumer.appData.source,
									supported: consumer.supported,
									locallyPaused: consumer.locallyPaused,
									remotelyPaused: consumer.remotelyPaused,
									track: null,
									codec: codec ? codec.name : null
								}, consumer.peer.name);

								consumer.on('close', function (originator) {
									// 
									_this16._stats.removeStreamById('consumer_' + consumer.id);
									//
									/*
                  logger.debug(
                      'consumer event -- [close] [id:%s, originator:%s, consumer:%o]',
         	consumer.id, originator, consumer);
         */
									logger.debug('consumer event [close] - consumer.id: ' + consumer.id + ' originator: ' + originator);

									// clearInterval(this._intervalStats);

									// There comunicated peers are sited the same server.
									// 'CLOSE' signal.
									// if (consumer.peer.stream !== null) {
									//     if (consumer.kind === 'video' && consumer.peer.stream !== null) {
									//         let tracks = consumer.peer.stream.streamObj.getVideoTracks();
									//         tracks.forEach(element => {
									//             consumer.peer.stream.streamObj.removeTrack(element);
									//         });
									//     }

									//     if (consumer.kind === 'audio' && consumer.peer.stream !== null) {
									//         let tracks = consumer.peer.stream.streamObj.getAudioTracks();
									//         tracks.forEach(element => {
									//             consumer.peer.stream.streamObj.removeTrack(element);
									//         });
									//     }
									//     this.emit('stream-removed', { stream: consumer.peer.stream });
									//     consumer.peer.stream = null;
									// }

									// this.emit(`${consumer.kind}-removed`);
									consumer.disableStats();

									// consumer.disableInternalStats()
								});

								consumer.on('pause', function (originator) {
									// 
									_this16._stats.actStreamSSRCPairs('consumer_' + consumer.id, false);
									/*
                  logger.debug(
                      'consumer event -- [pause] [id:%s, originator:%s, consumer:%o]',
         	consumer.id, originator, consumer);
         */
									logger.debug('consumer event [pause] - consumer.id: ' + consumer.id + ' originator: ' + originator);

									var smute = 'audio-mute';
									if (consumer.kind === 'audio') {
										smute = 'audio-mute';
									}

									if (consumer.kind === 'video') {
										smute = 'video-mute';
									}

									// There comunicated peers are sited the different servers.
									// 'PAUSE' signal.
									// let remotePaused = 0;
									// if (originator === 'remote') {
									//     let peer = this._peers.get(consumer.peer.name);
									//     if (peer != null) {
									//         peer.consumers.forEach(element => {
									//             if (element.kind === 'audio' && element.remotelyPaused) {
									//                 remotePaused += 1;
									//             }

									//             if (element.kind === 'video' && element.remotelyPaused) {
									//                 remotePaused += 1;
									//             }
									//         });
									//     }

									//     if (remotePaused >= 2) {
									//         if (consumer.peer.stream !== null) {
									//             let vtracks = consumer.peer.stream.streamObj.getVideoTracks();
									//             vtracks.forEach(e => {
									//                 consumer.peer.stream.streamObj.removeTrack(e);
									//             });

									//             let atracks = consumer.peer.stream.streamObj.getAudioTracks();
									//             atracks.forEach(e => {
									//                 consumer.peer.stream.streamObj.removeTrack(e);
									//             });

									//             this.emit('stream-removed', { stream: consumer.peer.stream });
									//             consumer.peer.stream = null;
									//         }
									//     }
									// }

									// if (originator === 'remote' && remotePaused <= 1)
									if (originator === 'remote') {
										if (consumer.peer && consumer.peer.streams && consumer.appData) {
											logger.debug('API _handleConsumer() consumer event [pause] - streamId: ' + consumer.appData.streamID + ' userID: ' + consumer.peer.name + ' - Emit [' + smute + '] to APP');
											_this16.emit(smute, {
												stream: consumer.peer.streams.get(consumer.appData.streamID)
											});

											// only for stat
											_this16._subscribes.set(consumer.appData.streamID, {
												streamID: consumer.appData.streamID,
												status: 'inactive'
											});
										} else {
											logger.warn('API _handleConsumer() consumer event [pause] error - invalid consumer.peer or consumer.appData');
										}
									}
								});

								consumer.on('resume', function (originator) {
									// 
									_this16._stats.actStreamSSRCPairs('consumer_' + consumer.id, true);
									/*
                  logger.debug(
                      'consumer event -- [resume] [id:%s, originator:%s, consumer:%o]',
         	consumer.id, originator, consumer);
         	*/
									logger.debug('consumer event [resume] - consumer.id: ' + consumer.id + ' originator: ' + originator);

									var smute = 'audio-unmute';
									if (consumer.kind === 'audio') {
										smute = 'audio-unmute';
									}

									if (consumer.kind === 'video') {
										smute = 'video-unmute';
									}

									if (originator === 'remote') {
										if (consumer.peer && consumer.peer.streams && consumer.appData) {
											var stream = consumer.peer.streams.get(consumer.appData.streamID);
											if (smute === 'video-unmute') {
												if (!_this16._remoteVideos.has(consumer.appData.streamID)) {
													_this16.emit('video-added', { stream: stream });

													// 
													_this16._remoteVideos.set(stream.getId(), {
														userId: consumer.peer.name,
														streamId: stream.getId()
													});
												}
											}

											// 
											logger.debug('API _handleConsumer() consumer event [resume] - streamId: ' + consumer.appData.streamID + ' userID: ' + consumer.peer.name + ' - Emit [' + smute + '] to APP');
											_this16.emit(smute, { stream: stream });

											// only for stat
											_this16._subscribes.set(consumer.appData.streamID, {
												streamID: consumer.appData.streamID,
												status: 'active'
											});
										} else {
											logger.warn('API _handleConsumer() consumer event [resume] - error - invalid consumer.peer or consumer.appData');
										}
									}
								});

								consumer.on('effectiveprofilechange', function (profile) {
									/*
                  logger.debug(
                      'consumer event -- [effectiveprofilechange] [id:%s, consumer:%o, profile:%s]',
         	consumer.id, consumer, profile);
         	*/
									logger.debug('consumer event [effectiveprofilechange] - consumer.id: ' + consumer.id + ' profile: ' + profile);
								});

								consumer.on('stats', function (stats) {
									consumer.getStats().then(function (s) {
										var r = {};
										if (!!consumer.track && consumer.track.kind === 'video') {
											r = _this16._extractResolution(s);
										}

										// 
										if (!consumer.peer) {
											return;
										}

										var sid = consumer.peer.name;
										if (!!consumer.appData) {
											sid = consumer.appData.streamID;
										}

										_this16._stats.setConsumeStats(stats, r, consumer.peer.name, consumer.id, sid);
									}).catch(function (e) {
										logger.error('consumer event [stats] error - ' + e.toString());
									});
								});

								consumer.on('internalStats', function (stats) {
									if (!consumer.peer) {
										return;
									}

									var result = _this16._internalStats('receiverStats', stats, consumer.peer.name, consumer.id);
									_this16._stats.pushLoggerToServer(null, result);
								});

								// Receive the consumer (if we can).
								if (consumer.supported) {
									// TODO : 将 streams 变量显式定义到 mediasoupclient::Peer 中
									if (!consumer.peer.streams) consumer.peer.streams = new _map2.default();

									// Seek after existing stream.
									stream_ = consumer.peer.streams.get(consumer.appData.streamID);

									if (!stream_) {
										stream_ = new Stream({
											userID: consumer.peer.name,
											source: consumer.appData.source,
											streamID: !consumer.appData.streamID ? consumer.peer.name : consumer.appData.streamID,
											videoType: consumer.appData.videoType,
											streamType: 'consumer',
											openAudioCtx: true
										});
										stream_.streamObj = new MediaStream();
										consumer.peer.streams.set(stream_.streamID, stream_);
									}

									consumer.receive(this._recvTransport).then(function (track) {
										logger.debug('API _handleConsumer() consumer.receive - consumer.name: ' + consumer.peer.name + ' track.kind: ' + track.kind);

										if (track.kind === 'audio') {
											stream_.audioTracks = track;

											// TODO : 如下采用 timer 并不合理
											setTimeout(function () {
												logger.debug('API _handleConsumer() consumer userID: ' + consumer.peer.name + ' streamId: ' + stream_.getId() + ' - Emit [audio-added] to APP');
												_this16.emit('audio-added', { stream: stream_ });
											}, 100);
										}

										if (track.kind === 'video') {
											stream_.videoTracks = track;

											// TODO : 如下采用 timer 并不合理
											setTimeout(function () {
												logger.debug('API _handleConsumer() consumer userID: ' + consumer.peer.name + ' streamId: ' + stream_.getId() + ' - Emit [video-added] to APP');

												// 
												if (!consumer.remotelyPaused) {
													_this16.emit('video-added', { stream: stream_ });

													// 
													_this16._remoteVideos.set(stream_.getId(), {
														userId: consumer.peer.name,
														streamId: stream_.getId()
													});
												}
												// 
											}, 100);
										}

										if (stream_.trackNumber === 1) {
											// TODO : 如下采用 timer 并不合理
											// delay 500ms, becasuse need waiting peer-join event arrived.
											setTimeout(function () {
												logger.debug('API _handleConsumer() consumer userID: ' + consumer.peer.name + ' streamId: ' + stream_.getId() + ' - Emit [stream-added] to APP');
												_this16.emit('stream-added', { stream: stream_, type: stream_.type });
											}, 500);
										}

										consumer.transport.handler._pc.getStats(track).then(function (stat) {
											stat.forEach(function (e) {
												if (e.type === 'inbound-rtp') {
													var _stats$getStreamPrope = _this16._stats.getStreamPropertyBySSRC(e.ssrc, 'userID'),
													    id = _stats$getStreamPrope.id,
													    value = _stats$getStreamPrope.value;

													if (value === '') {
														_this16._stats.setStreamSSRCPairs('consumer_' + consumer.id, e.ssrc, stream_, false);
													}
												}
											});
										});
									}).catch(function (error) {
										logger.error('API _handleConsumer() error - unexpected error while receiving a new Consumer: ' + error.toString());
									});

									// pause the track by default.
									if (!stream_.subscribed) consumer.pause();

									// Concern transmission statistics.
									/* 
         // 2020/2/4 禁用
         consumer.enableInternalStats(this._interval);
         */
									consumer.enableStats(this._interval);
								} else {
									logger.warn('API _handleConsumer() error - consumer.peer.name: ' + consumer.peer.name + ' consumer.supported: ' + consumer.supported);
								}

							case 9:
							case 'end':
								return _context5.stop();
						}
					}
				}, _callee5, this);
			}));

			function _handleConsumer(_x7) {
				return _ref8.apply(this, arguments);
			}

			return _handleConsumer;
		}()
	}, {
		key: '_setMicProducer',
		value: function _setMicProducer(stream) {
			var _this17 = this;

			if (!stream) {
				logger.error('API _setMicProducer() error - parameter [stream] is INVALID.');
				return _promise2.default.reject(new Error('INVALID parameter [stream]'));
			}

			logger.debug('API _setMicProducer() - stream.streamID: ' + stream.streamID);

			if (!this._room.canSend('audio')) {
				return _promise2.default.reject(new Error('cannot send audio'));
			}

			if (this._mapMicProducers.get(stream._innerStreamID)) {
				return _promise2.default.reject(new Error('mic Producer already exists'));
			}

			var producer = void 0;

			return _promise2.default.resolve().then(function () {
				var track = stream.streamObj.getAudioTracks()[0];

				// send inner-stream identify.
				producer = _this17._room.createProducer(track, {
					audioProfile: stream.getAudioProfile()
				}, {
					source: 'mic_' + stream.streamID,
					streamID: stream.innerStreamID,
					userID: stream.userID
				});
				// No need to keep original track.
				// track.stop();

				// Send it.
				return producer.send(_this17._sendTransport);
			}).then(function () {
				_this17._mapMicProducers.set(stream._innerStreamID, producer);
				producer.enableStats(_this17._interval);

				/*
    // 2020/2/4 禁用
    producer.enableInternalStats(this._interval);
    */

				logger.debug({
					id: producer.id,
					source: 'mic',
					locallyPaused: producer.locallyPaused,
					remotelyPaused: producer.remotelyPaused,
					track: producer.track,
					codec: producer.rtpParameters.codecs[0].name
				});

				producer.on('close', function (originator) {
					logger.debug('_setMicProducer() micProducer event [close] - [originator:' + originator + ']');

					if (originator === 'remote') {
						logger.debug('producer close');
					}

					_this17._mapMicProducers.delete(stream._innerStreamID);

					producer.disableStats();
					// producer.disableInternalStats();
				});

				producer.on('pause', function (originator) {
					logger.debug('_setMicProducer() micProducer event [pause] - [originator:' + originator + ']');
				});

				producer.on('resume', function (originator) {
					logger.debug('_setMicProducer() micProducer event [resume] - [originator:' + originator + ']');
				});

				producer.on('handled', function () {
					logger.debug('_setMicProducer() micProducer event [handled]');
				});

				producer.on('unhandled', function () {
					logger.debug('_setMicProducer() micProducer event [unhandled]');
				});

				producer.on('stats', function (stats) {
					_this17._stats.setMicStats(stats, stream._innerStreamID);
				});

				producer.on('internalStats', function (stats) {
					var result = _this17._internalStats('senderStats', stats);
					_this17._stats.pushLoggerToServer(null, result);
				});
			}).then(function () {
				logger.debug('_setMicProducer() succeeded');
			}).catch(function (error) {
				logger.error('_setMicProducer() failed - ' + error.toString());

				if (producer) {
					producer.close();
					_this17._mapMicProducers.delete(stream._innerStreamID);
				}

				throw error;
			});
		}
	}, {
		key: '_setWebcamProducer',
		value: function _setWebcamProducer(stream) {
			var _this18 = this;

			if (!stream) {
				logger.error('API _setWebcamProducer() error - parameter [stream] is INVALID.');
				return _promise2.default.reject(new Error('INVALID parameter [stream]'));
			}

			logger.debug('API _setWebcamProducer() stream.streamID: ' + stream.streamID);

			if (!this._room.canSend('video')) {
				return _promise2.default.reject(new Error('cannot send video'));
			}

			if (this._webcamProducer) {
				return _promise2.default.reject(new Error('webcam Producer already exists'));
			}

			var producer = void 0;

			return _promise2.default.resolve().then((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {
				var track, transport;
				return _regenerator2.default.wrap(function _callee6$(_context6) {
					while (1) {
						switch (_context6.prev = _context6.next) {
							case 0:
								track = stream.streamObj.getVideoTracks()[0];

								// send inner-stream identify.                

								producer = _this18._room.createProducer(track, {
									simulcast: _this18._useSimulcast,
									audioProfile: stream.getAudioProfile(),
									codecOptions: {
										videoGoogleStartBitrate: stream.idealBandwidth,
										videoGoogleMaxBitrate: stream.maxBandwidth,
										videoGoogleMinBitrate: stream.minBandwidth
									}
								}, {
									source: 'webcam_' + stream.streamID,
									streamID: stream.innerStreamID,
									userID: stream.userID,
									videoType: stream.videoType
								});

								// No need to keep original track.
								// track.stop();

								// Send it.
								transport = void 0;

								if (!_this18._sendTransport.videoSent()) {
									_context6.next = 10;
									break;
								}

								_context6.next = 6;
								return _this18._newTransport('send', 'web_cam');

							case 6:
								transport = _context6.sent;

								_this18._mapVideoSendTransports.set(stream._innerStreamID, transport);
								_context6.next = 11;
								break;

							case 10:
								transport = _this18._sendTransport;

							case 11:
								return _context6.abrupt('return', producer.send(transport));

							case 12:
							case 'end':
								return _context6.stop();
						}
					}
				}, _callee6, _this18);
			}))).then(function () {
				_this18._mapWebcamProducers.set(stream._innerStreamID, producer);
				producer.enableStats(_this18._interval);

				/*
    // 2020/2/4 禁用
    producer.enableInternalStats(this._interval);
    */

				logger.debug({
					id: producer.id,
					source: 'webcam',
					deviceLabel: 'device.webcam',
					type: 'front/rear',
					locallyPaused: producer.locallyPaused,
					remotelyPaused: producer.remotelyPaused,
					track: producer.track,
					codec: producer.rtpParameters.codecs[0].name
				});

				producer.on('close', function (originator) {
					// 
					_this18._stats.removeStreamById('producer_' + producer.id);
					// 
					logger.debug('_setWebcamProducer() webcamProducer event [close] - [originator:' + originator + ']');

					producer.disableStats();
					// producer.disableInternalStats();

					_this18._mapWebcamProducers.delete(stream._innerStreamID);
					var transport = _this18._mapVideoSendTransports.get(stream._innerStreamID);
					if (typeof transport !== 'undefined') {
						transport.close();
						transport.removeAllListeners();
						_this18._mapVideoSendTransports.delete(stream._innerStreamID);
					}
				});

				producer.on('pause', function (originator) {
					// 
					_this18._stats.actStreamSSRCPairs('producer_' + producer.id, false);
					// 
					logger.debug('_setWebcamProducer() webcamProducer event [pause] - [originator:' + originator + ']');
				});

				producer.on('resume', function (originator) {
					// 
					_this18._stats.actStreamSSRCPairs('producer_' + producer.id, true);
					// 
					logger.debug('_setWebcamProducer() webcamProducer event [resume] [originator:' + originator + ']');
				});

				producer.on('handled', function () {
					logger.debug('_setWebcamProducer() webcamProducer event [handled]');
				});

				producer.on('unhandled', function () {
					logger.debug('_setWebcamProducer() webcamProducer event [unhandled]');
				});

				producer.on('stats', function (stats) {
					// logger.log(stats);
					_this18._stats.setWebcamStats(stats, stream._innerStreamID);
				});

				producer.on('internalStats', function (stats) {
					var result = _this18._internalStats('senderStats', stats);
					_this18._stats.pushLoggerToServer(null, result);
				});
			}).then(function () {
				logger.debug('_setWebcamProducer() succeeded');
				producer.transport.handler._pc.getStats(producer.track).then(function (stat) {
					stat.forEach(function (e) {
						if (e.type === 'outbound-rtp') {
							_this18._stats.setStreamSSRCPairs('producer_' + producer.id, e.ssrc, stream, true);
						}
					});
				});
			}).catch(function (error) {
				logger.error('_setWebcamProducer() failed:%o', error);

				if (producer) {
					producer.close();
					_this18._mapWebcamProducers.delete(stream._innerStreamID);
				}

				throw error;
			});
		}

		/**
   * set(create) screen producer.
   * 
   * @param {Any} stream screen stream.
   */

	}, {
		key: '_setScreenProducer',
		value: function _setScreenProducer(stream) {
			var _this19 = this;

			if (!stream) {
				logger.error('API _setScreenProducer() error - parameter [stream] is INVALID.');
				return _promise2.default.reject(new Error('INVALID parameter [stream]'));
			}

			logger.debug('API _setScreenProducer() streamId: ' + stream.innerStreamID);

			if (!this._room.canSend('video')) {
				return _promise2.default.reject(new Error('cannot send video'));
			}

			if (this._screenProducer) {
				return _promise2.default.reject(new Error('screen Producer already exists'));
			}

			var producer = void 0;

			return _promise2.default.resolve().then((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7() {
				var track;
				return _regenerator2.default.wrap(function _callee7$(_context7) {
					while (1) {
						switch (_context7.prev = _context7.next) {
							case 0:
								track = stream.streamObj.getVideoTracks()[0];


								producer = _this19._room.createProducer(track, {
									simulcast: _this19._useSimulcast
								}, {
									source: 'screen',
									streamID: stream.innerStreamID
								});

								// No need to keep original track.
								// track.stop();

								// Send it.
								_context7.next = 4;
								return _this19._newTransport('send', 'screen');

							case 4:
								_this19._screenTransport = _context7.sent;
								return _context7.abrupt('return', producer.send(_this19._screenTransport));

							case 6:
							case 'end':
								return _context7.stop();
						}
					}
				}, _callee7, _this19);
			}))).then(function () {
				_this19._screenProducer = producer;
				_this19._screenProducer.enableStats(_this19._interval);

				/*
    // 2020/2/4 禁用
    this._screenProducer.enableInternalStats(this._interval);
    */

				logger.debug({
					id: producer.id,
					source: 'screen',
					deviceLabel: 'device.screen',
					type: 'front',
					locallyPaused: producer.locallyPaused,
					remotelyPaused: producer.remotelyPaused,
					track: producer.track,
					codec: producer.rtpParameters.codecs[0].name
				});

				producer.on('close', function (originator) {
					// 
					_this19._stats.removeStreamById('producer_' + producer.id);
					// 
					logger.debug('setScreenProducer() screenProducer event [close] - [originator:' + originator + ']');

					_this19._screenProducer = null;
					_this19._screenTransport.close();
					_this19._screenTransport.removeAllListeners();
					_this19._screenTransport = null;

					producer.disableStats();
					// producer.disableInternalStats();
				});

				producer.on('pause', function (originator) {
					// 
					_this19._stats.actStreamSSRCPairs('producer_' + producer.id, false);
					// 
					logger.debug('_setScreenProducer() screenProducer event [pause] - [originator:' + originator + ']');
				});

				producer.on('resume', function (originator) {
					// 
					_this19._stats.actStreamSSRCPairs('producer_' + producer.id, true);
					// 
					logger.debug('_setScreenProducer() screenProducer event [resume] - [originator:' + originator + ']');
				});

				producer.on('handled', function () {
					logger.debug('_setScreenProducer() screenProducer event [handled]');
				});

				producer.on('unhandled', function () {
					logger.debug('screen Producer event [unhandled]');
				});

				producer.on('stats', function (stats) {
					// logger.log(stats);
					_this19._stats.setWebcamStats(stats, stream.innerStreamID);
				});

				producer.on('internalStats', function (stats) {
					var result = _this19._internalStats('senderStats', stats);
					_this19._stats.pushLoggerToServer(null, result);
				});
			}).then(function () {
				logger.debug('_setScreenProducer() succeeded');
				producer.transport.handler._pc.getStats(producer.track).then(function (stat) {
					stat.forEach(function (e) {
						if (e.type === 'outbound-rtp') {
							_this19._stats.setStreamSSRCPairs('producer_' + producer.id, e.ssrc, stream, true);
						}
					});
				});
			}).catch(function (error) {
				logger.error('_setScreenProducer() failed:%o', error);

				if (producer) {
					producer.close();
					_this19._screenProducer = null;
				}

				throw error;
			});
		}

		/**
   * Delay with some of milliseconds.
   * 
   * @param {number} ms milliseconds
   */

	}, {
		key: '_delay',
		value: function _delay(ms) {
			var ctr,
			    rej,
			    p = new _promise2.default(function (resolve, reject) {
				ctr = setTimeout(resolve, ms);
				rej = reject;
			});
			p.cancel = function () {
				clearTimeout(ctr);rej(Error('Cancelled'));
			};
			return p;
		}

		// 中止 ice restart 重试

	}, {
		key: '_stopIceRestartTimer',
		value: function _stopIceRestartTimer() {
			if (!!this.iceRestartTimer) {
				clearInterval(this.iceRestartTimer);
				this.iceRestartTimer = null;
			}
		}
	}, {
		key: '_retryRestartIce',
		value: function _retryRestartIce(transport) {
			var _this20 = this;

			if (!transport) {
				logger.error('_retryRestartIce() error - parameter [transport] is INVALID');
				return;
			}

			// No need doing anythin if protoo closed.
			if (!this._protoo || this._protoo.closed) {
				logger.warn('_retryRestartIce() error - _protoo not connected.');
				return;
			}

			// if state is 'connected'.
			if (transport.connectionState === 'connected') {
				return;
			}

			logger.debug('_retryRestartIce() - transport.id: ' + transport.id);

			var retry_time = 0;
			this.iceRestartTimer = setInterval(function () {
				// if protoo was closed.
				if (!_this20._protoo || _this20._protoo.closed) {
					if (!!_this20.iceRestartTimer) {
						clearInterval(_this20.iceRestartTimer);
					}
					_this20.iceRestartTimer = null;

					return;
				}

				// 如果当前尚未进入连接状态，则直接return
				if (!_this20._protoo.connected) {
					return;
				}

				// 
				if (!_this20._joined) {
					return;
				}

				// if too many retries.
				if (retry_time++ > Client.ICE_RETRY_NUM_TIME) {
					if (!!_this20.iceRestartTimer) {
						clearInterval(_this20.iceRestartTimer);
					}
					_this20.iceRestartTimer = null;

					return;
				}

				logger.debug('iceRestartTimer - retrying ... transport.id: ' + transport.id + ' retry_time: ' + retry_time);

				_this20._restartIce(transport).then(function () {
					// let transport_ = tp
					setTimeout(function () {
						if (transport.connectionState === 'connected') {
							logger.debug('iceRestartTimer - [connected] transport.id: ' + transport.id + ' retry_time: ' + retry_time);
							// 
							if (!!_this20.iceRestartTimer) {
								clearInterval(_this20.iceRestartTimer);
							}
							_this20.iceRestartTimer = null;
						}
					}, 1000);

					return;
				}).catch(function (error) {
					logger.warn('_retryRestartIce() error - ' + error.toString());
				});
			}, 3000);
		}

		/**
   * restart ICE.
   * @param {Any} tp transport 
   */

	}, {
		key: '_restartIce',
		value: function () {
			var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(tp) {
				return _regenerator2.default.wrap(function _callee8$(_context8) {
					while (1) {
						switch (_context8.prev = _context8.next) {
							case 0:
								_context8.prev = 0;
								_context8.next = 3;
								return tp.restartIce(null, function (e) {
									logger.warn('_restartIce() transport.id: ' + tp.id + ' error - ' + e.toString());
								});

							case 3:
								logger.debug('_restartIce() transport.id: ' + tp.id);

								return _context8.abrupt('return', tp);

							case 7:
								_context8.prev = 7;
								_context8.t0 = _context8['catch'](0);

								logger.error('_restartIce() error - ' + _context8.t0.toString());
								throw _context8.t0;

							case 11:
							case 'end':
								return _context8.stop();
						}
					}
				}, _callee8, this, [[0, 7]]);
			}));

			function _restartIce(_x8) {
				return _ref11.apply(this, arguments);
			}

			return _restartIce;
		}()
	}, {
		key: 'getNetState',
		value: function getNetState() {
			// 
			var clientStats = {
				iceSendTransport: !this._sendTransport || !this._sendTransport._handler || !this._sendTransport._handler._pc ? 'fault' : this._sendTransport._handler._pc.iceConnectionState,
				iceRecvTransport: !this._recvTransport || !this._recvTransport._handler || !this._recvTransport._handler._pc ? 'fault' : this._recvTransport._handler._pc.iceConnectionState,
				websocketTransport: !this._protoo || !this._protoo._transport ? 'fault' : this._protoo._transport.connected ? 'online' : 'offline',
				loginStatus: this._joined ? 'online' : 'offline',
				stats: !this._stats ? {} : this._stats.summarize
			};

			return clientStats;
		}

		/**
   * get audio recv stats
   * @param {*} callback 
   * 
   */

	}, {
		key: 'getRemoteAudioStats',
		value: function getRemoteAudioStats(callback) {
			if (typeof callback !== 'function') {
				logger.error('API getRemoteAudioStats() error - parameter: callback invalid');
				throw new TypeError('callback is not function.');
			}

			callback(this._stats.audioDownStat);
		}

		/**
   * get video recv stats
   * @param {*} callback 
   * 
   */

	}, {
		key: 'getRemoteVideoStats',
		value: function getRemoteVideoStats(callback) {
			if (typeof callback !== 'function') {
				logger.error('API getRemoteVideoStats() error - parameter: callback invalid');
				throw new TypeError('callback is not function.');
			}

			callback(this._stats.videoDownStat);
		}

		/**
   * get audio send stats
   * @param {*} callback 
   */

	}, {
		key: 'getLocalAudioStats',
		value: function getLocalAudioStats(callback) {
			if (typeof callback !== 'function') {
				logger.error('API getLocalAudioStats() error - parameter: callback invalid');
				throw new TypeError('callback is not function.');
			}

			callback(this._stats.audioUpStat);
		}

		/**
   * get video send stats
   * @param {*} callback 
   */

	}, {
		key: 'getLocalVideoStats',
		value: function getLocalVideoStats(callback) {
			if (typeof callback !== 'function') {
				logger.error('API getLocalVideoStats() error - parameter: callback invalid');
				throw new TypeError('callback is not function.');
			}

			callback(this._stats.videoUpStat);
		}

		/**
   * set sei.
   * @param {string|number} uid 
   * @param {string} type
   * @param {Boolean} isScreen
   * @param {Object} sei conference layout
   * @param {string} devId innerStreamId
   */

	}, {
		key: 'setSEI',
		value: function setSEI(uid, type, isScreen, sei, devId) {
			var _this21 = this;

			if (!this._protooTransportStat) {
				logger.warn('API setSEI() error - protooTransport broken');
				throw Error('protooTransport broken');
			}

			if (!this._joined) {
				logger.warn('API setSEI() error - non-joined');

				throw Error('non-joined');
			}

			if (this._role !== '1') {
				logger.warn('API setSEI() error - Must be master - this._role: ' + this._role);
				throw Error('setSEI() error. Role error.');
			}

			var _type = '';
			if (type.toLocaleLowerCase() === 'add') {
				_type = 'add';
			} else if (type.toLocaleLowerCase() === 'del') {
				_type = 'del';
			}

			if (_type === '') {
				logger.error('setSEI() error - parameter [type] type: ' + type + ' is INVALID');

				throw TypeError('type');
			}

			var sType = {
				'type': _type,
				'peerId': '' + uid,
				'devId': devId || ''
			};

			if (isScreen) {
				sType.devId = uid + ':screen';
				sei.pos = sei.pos.map(function (e) {
					if (e.id === devId) {
						e.id = uid + ':screen';
					}
					return e;
				});
			}

			logger.debug('API setSEI() - uid: ' + uid + ' type: ' + type + ' isScreen: ' + isScreen + ' sei: ' + (0, _stringify2.default)(sei) + ' devId: ' + devId);

			_promise2.default.resolve().then(function () {
				logger.debug('API setSEI() - setMixer sType: ' + (0, _stringify2.default)(sType));
				_this21._protoo.send('setMixer', sType);
				return;
			}).then(function () {
				_this21._protoo.send('setSEI', { sei: sei });
				return;
			}).catch(function (error) {
				logger.error('API setSEI() error - ' + error);
			});
		}

		/**
   * subscribe other room's audio/video
   * @param {*} subscribeRoomId 
   * @param {function} onSuccess 
   * @param {function} onFailure 
   */

	}, {
		key: 'subscribeOtherRoom',
		value: function subscribeOtherRoom(subscribeRoomId, onSuccess, onFailure) {
			if (!subscribeRoomId) {
				logger.error('API subscribeOtherRoom() error - parameter: subscribeRoomId invalid');
				throw TypeError('subscribeRoomId param error');
			}
			if (typeof onSuccess !== 'function') {
				logger.error('API subscribeOtherRoom() error - parameter: onSuccess invalid');
				throw TypeError('onSuccess is not function.');
			}

			if (typeof onFailure !== 'function') {
				logger.error('API subscribeOtherRoom() error - parameter: onFailure invalid');
				throw TypeError('onFailure is not function.');
			}

			if (!this._protooTransportStat) {
				logger.warn('API subscribeOtherRoom() error - protooTransport broken');

				onFailure('protooTransport is broken');

				return;
			}

			if (!this._joined) {
				logger.warn('API subscribeOtherRoom() error - non-joined');

				onFailure('non-joined');

				return;
			}

			if (this._role !== '1') {
				logger.warn('API subscribeOtherRoom() error - Must be master - this._role: ' + this._role);
				return;
			}

			logger.warn('API subscribeOtherRoom() - subscribeRoomId: ' + subscribeRoomId);

			this._protoo.send('subscribeOtherRoom', { subscribeRoomId: subscribeRoomId }).then(onSuccess).catch(onFailure);
		}

		/**
   * unsubscribe other room's audio/video
   * @param {*} unsubscribeRoomId 
   * @param {function} onSuccess 
   * @param {function} onFailure 
   */

	}, {
		key: 'unsubscribeOtherRoom',
		value: function unsubscribeOtherRoom(unsubscribeRoomId, onSuccess, onFailure) {
			if (!unsubscribeRoomId) {
				logger.error('API unsubscribeOtherRoom() error - parameter: unsubscribeRoomId invalid');
				throw TypeError('unsubscribeRoomId param error');
			}
			if (typeof onSuccess !== 'function') {
				logger.error('API unsubscribeOtherRoom() error - parameter: onSuccess invalid');
				throw TypeError('onSuccess is not function.');
			}

			if (typeof onFailure !== 'function') {
				logger.error('API unsubscribeOtherRoom() error - parameter: onFailure invalid');
				throw TypeError('onFailure is not function.');
			}

			if (!this._protooTransportStat) {
				logger.warn('API unsubscribeOtherRoom() error - protooTransport broken');

				onFailure('protooTransport is broken');

				return;
			}

			if (!this._joined) {
				logger.warn('API unsubscribeOtherRoom() error - non-joined');

				onFailure('non-joined');

				return;
			}

			if (this._role !== '1') {
				logger.warn('API unsubscribeOtherRoom() error - Must be master - this._role: ' + this._role);
				return;
			}

			logger.warn('API unsubscribeOtherRoom() - subscribeRoomId: ' + unsubscribeRoomId);

			this._protoo.send('unsubscribeOtherRoom', { unsubscribeRoomId: unsubscribeRoomId }).then(onSuccess).catch(onFailure);
		}

		/**
   * switch user role
   * @param {Number} role
   * @param {Function} onSuccess
   * @param {Function} onFailure
   */

	}, {
		key: 'setClientRole',
		value: function setClientRole(role, onSuccess, onFailure) {
			var _this22 = this;

			if (!role) {
				logger.warn('API setClientRole() error - parameter [role] is INVALID.');
				return;
			}

			if (typeof onSuccess !== 'function') {
				logger.error('API setClientRole() error - parameter: onSuccess invalid');
				throw TypeError('onSuccess is not function.');
			}

			if (typeof onFailure !== 'function') {
				logger.error('API setClientRole() error - parameter: onFailure invalid');
				throw TypeError('onFailure is not function.');
			}

			var formatRole = +role;
			if (this._joined) {
				if (!this._protooTransportStat) {
					logger.warn('API setClientRole() error - protooTransport broken');

					onFailure('protooTransport is broken');

					return;
				}

				if (+this._role === formatRole) {
					onFailure && onFailure('Role has no changed.');
					return;
				}
				if (formatRole !== 2 && formatRole !== 3) {
					onFailure && onFailure('Illegal role: please make sure the role you want to set is 2 or 3.');
					return;
				}

				if (+this._role === 1) {
					onFailure && onFailure('Permision denied: Anchor is not allowed to change role.');
					return;
				}

				logger.warn('API setClientRole() - role: ' + role);

				// send message
				this._protoo.send('changeRole', { role: role }).then(function () {
					_this22._role = role;
					onSuccess && onSuccess();
				}).catch(onFailure);
			} else {
				if (formatRole > 3 || formatRole < 1) {
					logger.warn('API setClientRole() error - parameter [role] is INVALID.');
					onFailure && onFailure('Illegal role: please make sure the role you want to set is 1 or 2 or 3.');
					return;
				}

				logger.warn('API setClientRole() - role: ' + role);

				onSuccess && onSuccess();
				this._role = role;
			}
		}
	}, {
		key: 'setRtmpUrl',
		value: function setRtmpUrl(url) {
			if (typeof url !== 'string') {
				logger.warn('API setRtmpUrl() error - url: ' + (typeof url === 'undefined' ? 'undefined' : (0, _typeof3.default)(url)));
				throw TypeError('Wrong arguments: url must be string.');
			}

			/* 暂不执行格式检查，由上层保证
   let pattern = new RegExp('^(rtmp?:\\/\\/)?' + // protocol
   	'((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // domain name
   	'((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
   	'(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
   	'(\\?[;:&a-z\\d%_.~+=-]*)?' + // query string
   	'(\\#[-a-z\\d_]*)?$', 'i'); // fragment locator
   if (!pattern.test(url))
   {
   	logger.warn(`API setRtmpUrl() error - url is invalid`);
   	throw Error('url is invalid');
   }
   */

			this._valid_rtmp_url = url.trim();

			if (this._joined) {
				this._protoo.send('updateRtmpUrl', { roomId: this._roomId, url: url });
				logger.debug('API setRtmpUrl() success - ' + url);
			}
		}

		/**
   * update token
   * @param {string} token
   */

	}, {
		key: 'renewToken',
		value: function renewToken(token) {
			if (!this._joined) {
				logger.warn('you should join room first.');
				return;
			}
			if (typeof token === 'string') {
				this._protoo.send('refreshToken', { token: token });
			} else {
				throw TypeError('token must be String. Please retry.');
			}
		}

		/**
   * kickout peer.
   * @param {string} peerName 
   */

	}, {
		key: 'kickOut',
		value: function kickOut(peerName) {
			if (!this._protooTransportStat) {
				logger.warn('API kickOut() error - protooTransport broken');

				throw TypeError('protooTransport is broken');
			}

			if (!this._joined) {
				logger.warn('API kickOut() error - non-joined');

				throw TypeError('non-joined');
			}

			if (!peerName || peerName.trim() === '') {
				logger.warn('API kickOut() error - parameter [peerName] is INVALID.');

				throw TypeError('peerName');
			}

			if (this._role !== '1') {
				logger.warn('API kickOut() error - Must be master - this._role: ' + this._role);
				throw Error('You not master so no permission of kickout.');
			}

			if (!this._peers.get(peerName)) {
				logger.warn('API kickOut() error - peerName: ' + peerName + ' not found.');
				throw Error('no this peer: ' + peerName);
			}

			logger.warn('API kickOut() - peerName: ' + peerName);

			this._protoo.send('kickout', { peerId: peerName });
		}

		/**
   * get status of ice(sendtransport, recvtransport)\websocket\login
   */

	}, {
		key: 'getTransportStatus',
		value: function getTransportStatus() {
			return {
				iceSendTransport: !this._sendTransport || !this._sendTransport._handler || !this._sendTransport._handler._pc ? 'fault' : this._sendTransport._handler._pc.iceConnectionState,
				iceRecvTransport: !this._recvTransport || !this._recvTransport._handler || !this._recvTransport._handler._pc ? 'fault' : this._recvTransport._handler._pc.iceConnectionState,
				websocketTransport: !this._protoo || !this._protoo._transport ? 'fault' : this._protoo._transport.connected,
				loginStatus: this._joined ? 'online' : 'offline'
			};
		}

		/**
   * extract Resulution (width and height) from stats
   * @param {Any} stats 
   */

	}, {
		key: '_extractResolution',
		value: function _extractResolution(stats) {
			var resolution = {
				frameHeight: 0,
				frameWidth: 0
			};

			var BreakException = {};
			stats.forEach(function (report) {
				(0, _keys2.default)(report).forEach(function (statName) {
					if (statName.toLocaleLowerCase() === 'frameheight') //frameHeight
						resolution.frameHeight = report[statName];
					if (statName.toLocaleLowerCase() === 'framewidth') //frameWidth
						resolution.frameWidth = report[statName];
				});

				try {
					if (resolution.frameWidth !== 0) {
						throw BreakException;
					}
				} catch (e) {
					if (e !== BreakException) throw e;
				}
			});

			return resolution;
		}

		/**
   * Generate new sending transport.
   * @param {string} direction send | recv.
   * @param {string} type Media type of string.
   */

	}, {
		key: '_newTransport',
		value: function () {
			var _ref12 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10(direction, type) {
				var _this23 = this;

				var type_, sendTransport;
				return _regenerator2.default.wrap(function _callee10$(_context10) {
					while (1) {
						switch (_context10.prev = _context10.next) {
							case 0:
								type_ = '';

								if (!(typeof direction === 'undefined' || direction === null)) {
									_context10.next = 5;
									break;
								}

								throw new TypeError('direction');

							case 5:
								if (!(direction !== 'send')) {
									_context10.next = 8;
									break;
								}

								if (!(direction !== 'recv')) {
									_context10.next = 8;
									break;
								}

								throw new TypeError('direction have to be [send|recv]');

							case 8:

								if (typeof type === 'undefined' || type === null) {
									type_ = 'SEND_MIC_WEBCAM';
								} else if (type === '') {
									type_ = 'SEND_MIC_WEBCAM';
								} else {
									type_ = type;
								}

								sendTransport = this._room.createTransport('send', { media: type_ });


								sendTransport.on('close', function (originator) {
									logger.debug('sendTransport event [close] - [originator: ' + originator + ']');
								});

								// The actual code of events we are intresting, and all the stuff heppens in below lines of 'failed'.
								// Note: The major stats PC follow with default sending transport, thus try one time at here.
								// 
								sendTransport.on('connectionstatechange', function () {
									var _ref13 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9(connectionstate) {
										return _regenerator2.default.wrap(function _callee9$(_context9) {
											while (1) {
												switch (_context9.prev = _context9.next) {
													case 0:
														if (connectionstate === 'disconnected') {
															// only for stat
															_this23._iceSendDisconnectedCnt++;

															logger.warn('sendTransport disconnected. will retryRestartIce...');
															setTimeout(function () {
																_this23._retryRestartIce(sendTransport);
															}, _this23.TIMEOUT_ICE_DISCONNECTED);
														}

														if (connectionstate === 'failed') {
															logger.warn('sendTransport failed. will retryRestartIce...');
															_this23._retryRestartIce(sendTransport);
														}

														if (connectionstate === 'connected') {
															// for webrtc internals
															getStats(sendTransport._handler._pc, function (result) {
																_this23._stats.setWebrtcInternalSendStats(result);
															}, 1000);
															// end for webrtc internals	
														}

														logger.debug('sendTransport connectionstatechange: ' + connectionstate);

													case 4:
													case 'end':
														return _context9.stop();
												}
											}
										}, _callee9, _this23);
									}));

									return function (_x11) {
										return _ref13.apply(this, arguments);
									};
								}());

								return _context10.abrupt('return', sendTransport);

							case 13:
							case 'end':
								return _context10.stop();
						}
					}
				}, _callee10, this);
			}));

			function _newTransport(_x9, _x10) {
				return _ref12.apply(this, arguments);
			}

			return _newTransport;
		}()

		/**
   * Interanal statistic data.
   * @param {string} direction for interanl statistic data.
   * @param {Any} stats statistic data.
   * @param {name} consumer name.
   * @param {id} consumer id.
   */

	}, {
		key: '_internalStats',
		value: function _internalStats(direction, stats, name, id) {
			// Receiver stats[that's our concerned]
			// Report type=media-source
			// Report type=certificate ? option
			// Report type=codec
			// Report type=candidate-pair
			// Report type=local-candidate
			// Report type=remote-candidate
			// Report type=inbound-rtp
			// Report type=outbound-rtp
			// Report type=media-source
			// Report type=remote-inbound-rtp
			// Report type=track
			// Report type=stream
			// Report type=peer-connection
			// Report type=transport

			// direction: Receiver stats | Sender stats
			var result = {
				'appId': this._appId,
				'userId': this._uid,
				'roomId': this._roomId,
				'stats': 'internalStats',
				'direction': direction,
				'meida-source': [],
				'certificate': [],
				'codec': [],
				'candidate-pair': [],
				'local-candidate': [],
				'remote-candidate': [],
				'inbound-rtp': [],
				'outbound-rtp': [],
				'remote-inbound-rtp': [],
				'track': [],
				'stream': [],
				'peer-connection': [],
				'transport': []
			};

			stats.forEach(function (res) {
				if (res.type === 'certificate') {
					//ignore
				}

				if (res.type === 'codec') {
					result['codec'].push(res);
				}

				if (res.type === 'candidate-pair') {
					result['candidate-pair'].push(res);
				}

				if (res.type === 'local-candidate') {
					result['local-candidate'].push(res);
				}

				if (res.type === 'inbound-rtp') {
					result['inbound-rtp'].push(res);
				}

				if (res.type === 'track') {
					result['track'].push(res);
				}

				if (res.type === 'stream') {
					result['stream'].push(res);
				}

				if (res.type === 'peer-connection') {
					result['peer-connection'].push(res);
				}

				if (res.type === 'transport') {
					result['transport'].push(res);
				}

				if (res.type === 'meida-source') {
					result['meida-source'].push(res);
				}

				if (res.type === 'transport') {
					result['transport'].push(res);
				}
			});

			if (direction === 'receiverStats') {
				result.consumerPeerId = name;
				result.consumer = id;
			}

			return result;
		}
	}, {
		key: 'producerStreams',
		get: function get() {
			var streams = [];

			this._publishStreams.forEach(function (s, key) {
				if (!s) {
					return;
				}

				var item = {
					streamId: s.streamID,
					type: s.streamType,
					userId: s.userID,
					specialCameraId: s.specialCameraId,
					specialMicId: s.specialMicId,
					hasVideo: s.hasVideo(),
					hasAudio: s.hasAudio()
				};

				streams.push(item);
			});

			return streams;
		}
	}, {
		key: 'consumerStreams',
		get: function get() {
			var streams = [];

			this._peers.forEach(function (value, key) {
				if (!value.streams) {
					return;
				}

				value.streams.forEach(function (s, index) {
					if (!s) {
						return;
					}

					var item = {
						streamId: s.streamID,
						type: s.streamType,
						userId: s.userID,
						specialCameraId: s.specialCameraId,
						specialMicId: s.specialMicId,
						hasVideo: s.hasVideo(),
						hasAudio: s.hasAudio()
					};

					// 
					streams.push(item);
				});
			});

			return streams;
		}

		// 

	}, {
		key: 'micProducers',
		get: function get() {
			var producers = [];

			this._mapMicProducers.forEach(function (value, key) {
				var item = {
					streamId: key,
					appData: value.appData
				};

				// 
				producers.push(item);
			});

			return producers;
		}
	}, {
		key: 'webcamProducers',
		get: function get() {
			var producers = [];

			this._mapWebcamProducers.forEach(function (value, key) {
				var item = {
					streamId: key,
					appData: value.appData
				};

				// 
				producers.push(item);
			});

			return producers;
		}
	}, {
		key: 'screenProducers',
		get: function get() {
			var producers = [];

			if (this._screenProducer != null) {
				var item = {
					streamId: 'x_screen',
					appData: this._screenProducer.appData
				};

				// 
				producers.push(item);
			}

			return producers;
		}
	}, {
		key: 'closed',
		get: function get() {
			return this._closed;
		}
	}], [{
		key: 'JOIN_ROOM_TIME_OUT',
		get: function get() {
			return 2000; // 10000;
		}

		// ice reconnect waiting time.

	}, {
		key: 'TIMEOUT_ICE_DISCONNECTED',
		get: function get() {
			return 10000;
		}

		// limit ice retry number of times.

	}, {
		key: 'ICE_RETRY_NUM_TIME',
		get: function get() {
			return 10;
		}

		/**
   * @param {Any} conf TURN configure.
   * Set TURN server configure.
   */

	}, {
		key: 'TurnConf',
		set: function set(conf) {
			if (typeof conf === 'undefined' || conf === null) {
				throw new TypeError('turn configure');
			}

			try {
				turnConf.urls = conf.urls;
				turnConf.credential = conf.credential;
				turnConf.username = conf.username;
				turnConf.iceTransportPolicy = conf.iceTransportPolicy;
			} catch (e) {
				throw e;
			}
		}
	}]);
	return Client;
}(EventEmitter);

module.exports = Client;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/_webpack@4.41.6@webpack/buildin/global.js */ "./node_modules/_webpack@4.41.6@webpack/buildin/global.js")))

/***/ }),

/***/ "./lib/config.js":
/*!***********************!*\
  !*** ./lib/config.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _map = __webpack_require__(/*! babel-runtime/core-js/map */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/map.js");

var _map2 = _interopRequireDefault(_map);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * client config of default.
 * You can coustom it and pass to client object as parameter.
 */
var clientConfig = {
  mode: 'live',
  codec: 'vp8',
  proxyServer: 'YOUR NGINX PROXY SERVER IP',
  turnServer: {
    turnServerURL: 'turn:114.116.84.241', //YOUR TURNSERVER URL
    username: 'lijunshan', //YOUR USERNAME
    password: '123456', //YOUR PASSWORD
    udpport: 'THE UDP PORT YOU WANT TO ADD',
    tcpport: 'THE TCP PORT YOU WANT TO ADD',
    iceTransportPolicy: 'all' // relay, all
  },
  svcRootUrl: '119_3_245_117.3ttech.cn',
  role: '2',
  publish_rtmp_url: 'rtmp://push.3ttech.cn/sdk/?',
  subcribe_rtmp_url: 'rtmp://pull.3ttech.cn/sdk/?'
};

/**
 * retry protoo-client
 * @ref: https://www.npmjs.com/package/retry#retryoperationoptions
 * @ref: https://protoojs.org/#websockettransport34
 */
var protoo_peer_RETRY_OPTIONS = {
  retries: 3,
  factor: 2,
  minTimeout: 1 * 1000,
  maxTimeout: 8 * 1000
};

/**
 * stream specication config.
 */
var spec = {
  streamID: null,
  audio: false,
  video: false,
  screen: true,
  extensionId: 'minllpmhdgpndnkomcoccfekfegnlikg'

  /**
   * the log level by defined.
   */
};var logLevel = {
  'LOG_NONE': 6, //不输出日志信息
  'LOG_ERROR': 5, //输出 ERROR 级别的日志信息
  'LOG_WARN': 4, //输出 WARN 和 ERROR 级别的日志信息
  'LOG_INFO': 3, // 输出 INFO WARN 和 ERROR 级别的日志信息
  'LOG_DEBUG': 2, //输出所有 API 日志信息
  'LOG_TRACE': 1
};

/**
 * The video profile information.
 * @type {{Profile_80p: string, Profile_120p: string, Profile_180p: string, Profile_240p: string, Profile_360p: string, Profile_480p: string, Profile_720p: string, Profile_1080: string}}
 */
var videoProfile = {
  // profile of resolution  |resolution  | FPS  | bps * k
  Profile_80p: '80p', //110*80     | 15   | 50*1000 
  Profile_120p: '120p', //120*160    | 15   | 60*1000
  Profile_160p: '160p', //210*160    | 15   | 100*1000
  Profile_200p: '200p', //270*200    | 15   | 140*1000
  Profile_240p: '240p', //320*240    | 15   | 200*1000
  Profile_320p: '320p', //420*240    | 15   | 250*1000
  Profile_360p: '360p', //480*360    | 15   | 300*1000
  Profile_480p: '480p', //640*480    | 15   | 500*1000
  Profile_540p: '540p', //720*540    | 15   | 800*1000
  Profile_720p: '720p', //1024*720   | 15   | 1130*1000
  Profile_1080p: '1080p', //1920*1080  | 15   | 2080*1000
  Profile_3840p: '3840p', //3840*2160  | 15   | 8000*1000
  Profile_7680p: '7680p' //7680*4320  | 15   | 20000*1000
};

/** 4:3 resolution and bandwidth */
var videoResolution = new _map2.default([[80, { width: 110, height: 80, bps: { ideal: 60 * 1000, min: 50 * 1000, max: 100 * 1000 } }], [120, { width: 160, height: 120, bps: { ideal: 65 * 1000, min: 60 * 1000, max: 100 * 1000 } }], [160, { width: 210, height: 160, bps: { ideal: 140 * 1000, min: 100 * 1000, max: 200 * 1000 } }], [200, { width: 270, height: 200, bps: { ideal: 140 * 1000, min: 100 * 1000, max: 200 * 1000 } }], [240, { width: 320, height: 240, bps: { ideal: 300 * 1000, min: 200 * 1000, max: 400 * 1000 } }], [320, { width: 420, height: 320, bps: { ideal: 350 * 1000, min: 250 * 1000, max: 500 * 1000 } }], [360, { width: 480, height: 360, bps: { ideal: 400 * 1000, min: 300 * 1000, max: 600 * 1000 } }], [480, { width: 640, height: 480, bps: { ideal: 500 * 1000, min: 400 * 1000, max: 800 * 1000 } }], [540, { width: 720, height: 540, bps: { ideal: 1000 * 1000, min: 800 * 1000, max: 1200 * 1000 } }], [720, { width: 1280, height: 720, bps: { ideal: 1130 * 1000, min: 1000 * 1000, max: 2000 * 1000 } }], [1080, { width: 1920, height: 1080, bps: { ideal: 2000 * 1000, min: 1800 * 1000, max: 3000 * 1000 } }], [3840, { width: 3840, height: 2160, bps: { ideal: 8000 * 1000, min: 7000 * 1000, max: 15000 * 1000 } }], [7680, { width: 7680, height: 4320, bps: { ideal: 20000 * 1000, min: 15000 * 1000, max: 25000 * 1000 } }]]);

/** the screen resolution and bandwidth. */
var screenResolution = new _map2.default([[720, { width: 1280, height: 720, bps: { ideal: 1000 * 1000, min: 800 * 1000, max: 1500 * 1000 } }], [1080, { width: 1920, height: 1080, bps: { ideal: 1800 * 1000, min: 1500 * 1000, max: 2000 * 1000 } }], [2160, { width: 3840, height: 2160, bps: { ideal: 2500 * 1000, min: 2000 * 1000, max: 3000 * 1000 } }], [4320, { width: 7680, height: 4320, bps: { ideal: 3000 * 1000, min: 2500 * 1000, max: 4000 * 1000 } }]]);

/**
 * The video resolution constraints.
 * A vast majority of the customer leaverage it thus it's defined by sensor producters.
 */
var videoAttributes = {
  sif: [320, 240],
  vga: [640, 480],
  hd720p: [1280, 720]

  /**
   * video parameter
   */
};var videoSpec = {
  /**
   * The invalid constraint error in safari is because the browser expects that you pass a correct width, one of:
   *   320
   *   640
   *   1280
   *  the height is auto calculate in an aspect ratio of 4:3 for 320 or 640, and 16:9 for 1280, then if you pass a width of 320, you video stream is set in:
   */
  width: { min: '80', ideal: '640', max: '1920' },
  height: { min: '60', ideal: '480', max: '1080' },
  bitrate: {
    min: 80,
    max: 300,
    ideal: 200
  },
  frameRate: { min: 2, ideal: 15, max: 30 },
  aspectRatio: 4 / 3
};

/**
 * audio parameters.
 */
var audioSpec = {
  sampleRate: {
    min: 4000,
    max: 48000,
    ideal: 8000
  },
  channelCount: {
    min: 1,
    max: 2,
    ideal: 1
  }

  //
  // {
  //	stereo : 1, // 取值 1 / 0
  //	maxaveragebitrate : 24 * 1024, // 数值型
  //	maxplaybackrate   : 48000, // 数值型
  //	cbr : 1, // 取值 1 / 0
  //	useinbandfec : 1, // 取值 1 / 0
  //	usedtx : 1, // 取值 1 / 0
  //	maxptime : 20, // 最大打包时长
  // }
  // speech_low_quality | speech_standard | music_standard | standard_stereo | high_quality | high_quality_stereo
};var audioProfileSpec = new _map2.default([['speech_low_quality', {
  codec: 'opus',
  maxplaybackrate: 16000,
  stereo: 0,
  maxaveragebitrate: 24 * 1024
}], ['speech_standard', {
  codec: 'opus',
  maxplaybackrate: 32000,
  stereo: 0,
  maxaveragebitrate: 24 * 1024
}], ['music_standard', {
  codec: 'opus',
  maxplaybackrate: 48000,
  stereo: 0,
  maxaveragebitrate: 40 * 1024
}], ['standard_stereo', {
  codec: 'opus',
  maxplaybackrate: 48000,
  stereo: 1,
  maxaveragebitrate: 64 * 1024
}], ['high_quality', {
  codec: 'opus',
  maxplaybackrate: 48000,
  stereo: 0,
  maxaveragebitrate: 128 * 1024
}], ['high_quality_stereo', {
  codec: 'opus',
  maxplaybackrate: 48000,
  stereo: 1,
  maxaveragebitrate: 192 * 1024
}]]);

/**
 * screen specification constraints.
 */
var screenSpec = {
  's_frameRate': 15,
  's_720p': {
    maxWidth: 1280,
    maxHeight: 720,
    maxAspectRatio: 1.77
  },
  's_1080p': {
    maxWidth: 1920,
    maxHeight: 1080,
    maxAspectRatio: 1.77
  },
  's_2k': {
    maxWidth: 2048,
    maxHeight: 1080,
    maxAspectRatio: 1.77
  },
  's_4k': {
    maxWidth: 3840,
    maxHeight: 2160,
    maxAspectRatio: 1.77
  },
  's_8k': {
    maxWidth: 7680,
    maxHeight: 4320,
    maxAspectRatio: 1.77
  }

  /**
   * log server url.
   * @type {string}
   */
};var logserver_url = 'https://log4websdk.3ttech.cn/webSdk/putInfo';

/**
 * The authorization server address. server support JSONP callback.
 * @type {string}
 * 废弃
 */
var auth_url = 'https://apiusercenter.3ttech.cn/authority.php';

/**
 * ip location address.
 * @type {string}
 */
var iplocationAddress = 'webdispatch.3ttech.cn';

var iplocationPort = 443;

/**
 * control server address.
 * @type {string}
 */
var mediaServerAddress = ''; //'webdispatch.3ttech.cn';

/**
 * private deployment flag ---- (true: will'd not access internet).
 * @type {Boolean}
 */
var privateNet = false;

/**
 * log to server flag
 */
var log2Server = true;

/**
 * 	stat2Server
 */
var stat2Server = true;

module.exports = {
  clientConfig: clientConfig,
  logLevel: logLevel,
  authUrl: auth_url,
  audioProfileSpec: audioProfileSpec,
  videoProfile: videoProfile,
  audioSpec: audioSpec,
  videoSpec: videoSpec,
  mediaServerAddress: mediaServerAddress,
  logserver_url: logserver_url,
  iplocationAddress: iplocationAddress,
  iplocationPort: iplocationPort,
  videoResolution: videoResolution,
  screenResolution: screenResolution,
  videoAttributes: videoAttributes,
  protoo_peer_RETRY_OPTIONS: protoo_peer_RETRY_OPTIONS,
  stat2Server: stat2Server,
  privateNet: privateNet,
  log2Server: log2Server,
  screenSpec: screenSpec
};

/***/ }),

/***/ "./lib/getStats.js":
/*!*************************!*\
  !*** ./lib/getStats.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

// Last time updated: 2019-02-20 3:31:29 PM UTC

// _______________
// getStats v1.2.0

// Open-Sourced: https://github.com/muaz-khan/getStats

// --------------------------------------------------
// Muaz Khan     - www.MuazKhan.com
// MIT License   - www.WebRTC-Experiment.com/licence
// --------------------------------------------------

var _typeof2 = __webpack_require__(/*! babel-runtime/helpers/typeof */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/typeof.js");

var _typeof3 = _interopRequireDefault(_typeof2);

var _keys = __webpack_require__(/*! babel-runtime/core-js/object/keys */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/keys.js");

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var statInterval = 0;

var getStats = function getStats(mediaStreamTrack, callback, interval) {

	var browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';

	(function (that) {
		if (!that) {
			return;
		}

		if (typeof window !== 'undefined') {
			return;
		}

		if (typeof global === 'undefined') {
			return;
		}

		global.navigator = {
			userAgent: browserFakeUserAgent,
			getUserMedia: function getUserMedia() {}
		};

		if (!global.console) {
			global.console = {};
		}

		if (typeof global.console.log === 'undefined' || typeof global.console.error === 'undefined') {
			global.console.error = global.console.log = global.console.log || function () {
				console.log(arguments);
			};
		}

		if (typeof document === 'undefined') {
			/*global document:true */
			that.document = {
				documentElement: {
					appendChild: function appendChild() {
						return '';
					}
				}
			};

			document.createElement = document.captureStream = document.mozCaptureStream = function () {
				var obj = {
					getContext: function getContext() {
						return obj;
					},
					play: function play() {},
					pause: function pause() {},
					drawImage: function drawImage() {},
					toDataURL: function toDataURL() {
						return '';
					}
				};
				return obj;
			};

			that.HTMLVideoElement = function () {};
		}

		if (typeof location === 'undefined') {
			/*global location:true */
			that.location = {
				protocol: 'file:',
				href: '',
				hash: ''
			};
		}

		if (typeof screen === 'undefined') {
			/*global screen:true */
			that.screen = {
				width: 0,
				height: 0
			};
		}

		if (typeof URL === 'undefined') {
			/*global screen:true */
			that.URL = {
				createObjectURL: function createObjectURL() {
					return '';
				},
				revokeObjectURL: function revokeObjectURL() {
					return '';
				}
			};
		}

		if (typeof MediaStreamTrack === 'undefined') {
			/*global screen:true */
			that.MediaStreamTrack = function () {};
		}

		if (typeof RTCPeerConnection === 'undefined') {
			/*global screen:true */
			that.RTCPeerConnection = function () {};
		}

		/*global window:true */
		that.window = global;
	})(typeof global !== 'undefined' ? global : null);

	var RTCPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;

	if (typeof MediaStreamTrack === 'undefined') {
		MediaStreamTrack = {}; // todo?
	}

	var systemNetworkType = ((navigator.connection || {}).type || 'unknown').toString().toLowerCase();

	var getStatsResult = {
		isSafari: false,
		encryption: 'sha-256',
		audio: {
			ssrc: [],
			bytesSent: 0,
			bytesReceived: 0,
			latency: 0,
			packetsLost: 0
		},
		video: {
			ssrc: [],
			bytesSent: 0,
			bytesReceived: 0,
			latency: 0,
			packetsLost: 0
		},
		bandwidth: {
			systemBandwidth: 0,
			sentPerSecond: 0,
			encodedPerSecond: 0,
			helper: {
				audioBytesSent: 0,
				videoBytesSent: 0,
				prevBytesReceived: 0,
				prevBytesSent: 0
			},
			upSpeed: 0,
			downSpeed: 0,
			rtt: 0
		},
		results: {},
		connectionType: {
			systemNetworkType: systemNetworkType,
			systemIpAddress: '192.168.1.2',
			local: {
				candidateType: [],
				transport: [],
				ipAddress: [],
				networkType: []
			},
			remote: {
				candidateType: [],
				transport: [],
				ipAddress: [],
				networkType: []
			}
		},
		resolutions: {
			send: {
				width: 0,
				height: 0
			},
			recv: {
				width: 0,
				height: 0
			}
		},
		internal: {
			audio: {},
			video: {},
			candidates: {}
		},
		nomore: function nomore() {
			_nomore = true;
		}
	};

	var getStatsParser = {
		checkIfOfferer: function checkIfOfferer(result) {
			if (result.type === 'googLibjingleSession') {
				getStatsResult.isOfferer = result.googInitiator;
			}
		}
	};

	var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);

	// 
	getStatsResult.isSafari = isSafari;

	var peer = this;

	if (!(arguments[0] instanceof RTCPeerConnection)) {
		throw '1st argument is not instance of RTCPeerConnection.';
	}

	peer = arguments[0];

	if (arguments[1] instanceof MediaStreamTrack) {
		mediaStreamTrack = arguments[1]; // redundant on non-safari
		callback = arguments[2];
		interval = arguments[3];
	}

	// 
	if (+interval < 1000) {
		interval = 1000;
	}

	// 
	statInterval = interval;

	var _nomore = false;

	function getStatsLooper() {
		getStatsWrapper(function (results) {
			if (!results || !results.forEach) return;

			// dump
			// console.log(`<WEBRTC-STAT> ${JSON.stringify(results)}`);

			if (isSafari) return;
			results.forEach(function (result) {
				// console.error('result', result);
				(0, _keys2.default)(getStatsParser).forEach(function (key) {
					if (typeof getStatsParser[key] === 'function') {
						try {
							getStatsParser[key](result);
						} catch (e) {
							console.error(e.message, e.stack, e);
						}
					}
				});
			});

			try {
				if (peer.iceConnectionState.search(/failed|closed|disconnected/gi) !== -1) {
					_nomore = true;
				}
			} catch (e) {
				_nomore = true;
			}

			if (_nomore === true) {
				if (getStatsResult.datachannel) {
					getStatsResult.datachannel.state = 'close';
				}
				getStatsResult.ended = true;
			}

			// allow users to access native results
			getStatsResult.results = results;

			// 
			getStatsResult.audio.ssrc.forEach(function (ssrc) {
				// TODO : 
			});

			// 
			getStatsResult.video.ssrc.forEach(function (ssrc) {
				// TODO : 
			});

			// 
			/*
   if (getStatsResult.audio && getStatsResult.video)
   {
   	getStatsResult.bandwidth.upSpeed = (getStatsResult.audio.bytesSent - getStatsResult.bandwidth.helper.audioBytesSent) + (getStatsResult.video.bytesSent - getStatsResult.bandwidth.helper.videoBytesSent);
   	getStatsResult.bandwidth.upSpeed = (getStatsResult.bandwidth.upSpeed * 1000) / interval;
   	getStatsResult.bandwidth.helper.audioBytesSent = getStatsResult.audio.bytesSent;
   	getStatsResult.bandwidth.helper.videoBytesSent = getStatsResult.video.bytesSent;
   }
   */

			// console.log(`<WEBRTC-STAT-RES> ${JSON.stringify(getStatsResult)}`)

			callback(getStatsResult);

			// second argument checks to see, if target-user is still connected.
			if (!_nomore) {
				(typeof interval === 'undefined' ? 'undefined' : (0, _typeof3.default)(interval)) != undefined && interval && setTimeout(getStatsLooper, interval || 1000);
			}
		});
	}

	// a wrapper around getStats which hides the differences (where possible)
	// following code-snippet is taken from somewhere on the github
	function getStatsWrapper(cb) {
		// if !peer or peer.signalingState == 'closed' then return;

		if (typeof window.InstallTrigger !== 'undefined' || isSafari) {
			// maybe "isEdge?"
			peer.getStats(window.mediaStreamTrack || null).then(function (res) {
				var items = [];
				res.forEach(function (r) {
					items.push(r);
				});
				cb(items);
			}).catch(cb);
		} else {
			peer.getStats(function (res) {
				var items = [];
				res.result().forEach(function (res) {
					var item = {};
					res.names().forEach(function (name) {
						item[name] = res.stat(name);
					});
					item.id = res.id;
					item.type = res.type;
					item.timestamp = res.timestamp;
					items.push(item);
				});
				cb(items);
			});
		}
	};

	getStatsParser.datachannel = function (result) {
		if (result.type !== 'datachannel') return;

		getStatsResult.datachannel = {
			state: result.state // open or connecting
		};
	};

	getStatsParser.googCertificate = function (result) {
		if (result.type == 'googCertificate') {
			getStatsResult.encryption = result.googFingerprintAlgorithm;
		}

		// Safari-11 or higher
		if (result.type == 'certificate') {
			// todo: is it possible to have different encryption methods for senders and receivers?
			// if yes, then we need to set:
			//    getStatsResult.encryption.local = value;
			//    getStatsResult.encryption.remote = value;
			getStatsResult.encryption = result.fingerprintAlgorithm;
		}
	};

	// 
	getStatsParser.checkAudioTracks = function (result) {
		if (result.type !== 'ssrc') return;
		if (result.mediaType !== 'audio') return;

		var ssrc = result.ssrc;

		var sendrecvType = result.id.split('_').pop();
		if (result.isRemote === true) {
			sendrecvType = 'recv';
		}
		if (result.isRemote === false) {
			sendrecvType = 'send';
		}

		if (!sendrecvType) return;

		// 将 ssrc 记录下来
		if (getStatsResult.audio.ssrc.indexOf(ssrc) === -1) {
			getStatsResult.audio.ssrc.push(ssrc);
		}

		// 
		if (!getStatsResult.audio[ssrc]) {
			getStatsResult.audio[ssrc] = {};
			getStatsResult.audio[ssrc][sendrecvType] = {};
			getStatsResult.audio[ssrc][sendrecvType].codecs = [];
			getStatsResult.audio[ssrc][sendrecvType].tracks = [];
		}

		if (getStatsResult.audio[ssrc][sendrecvType].codecs.indexOf(result.googCodecName || 'opus') === -1) {
			getStatsResult.audio[ssrc][sendrecvType].codecs.push(result.googCodecName || 'opus');
		}

		// 
		if (!getStatsResult.internal.audio[ssrc]) {
			getStatsResult.internal.audio[ssrc] = {};
		}

		//
		if (!getStatsResult.internal.audio[ssrc][sendrecvType]) {
			getStatsResult.internal.audio[ssrc][sendrecvType] = {};
		}

		// 
		if (!!result.bytesSent) {
			if (!getStatsResult.internal.audio[ssrc][sendrecvType].prevBytesSent) {
				getStatsResult.internal.audio[ssrc][sendrecvType].prevBytesSent = 0; //result.bytesSent;
			}

			var bytes = result.bytesSent - getStatsResult.internal.audio[ssrc][sendrecvType].prevBytesSent;
			getStatsResult.internal.audio[ssrc][sendrecvType].prevBytesSent = result.bytesSent;

			var kilobytes = bytes * 8 / 1024; // to kbps
			getStatsResult.audio[ssrc][sendrecvType].availableBandwidth = parseInt(kilobytes, 10);
			getStatsResult.audio[ssrc].bytesSent = parseInt(kilobytes, 10);
		}

		if (!!result.bytesReceived) {
			if (!getStatsResult.internal.audio[ssrc][sendrecvType].prevBytesReceived) {
				getStatsResult.internal.audio[ssrc][sendrecvType].prevBytesReceived = 0; //result.bytesReceived;
			}

			var bytes = result.bytesReceived - getStatsResult.internal.audio[ssrc][sendrecvType].prevBytesReceived;
			getStatsResult.internal.audio[ssrc][sendrecvType].prevBytesReceived = result.bytesReceived;

			var kilobytes = bytes * 8 / 1024; // to kbps

			// getStatsResult.audio[sendrecvType].availableBandwidth = kilobytes.toFixed(1);
			getStatsResult.audio[ssrc].bytesReceived = parseInt(kilobytes, 10);
		}

		if (result.googTrackId && getStatsResult.audio[ssrc][sendrecvType].tracks.indexOf(result.googTrackId) === -1) {
			getStatsResult.audio[ssrc][sendrecvType].tracks.push(result.googTrackId);
		}

		// calculate latency
		if (!!result.googCurrentDelayMs) {
			getStatsResult.internal.audio[ssrc].googCurrentDelayMs = result.googCurrentDelayMs;

			getStatsResult.audio[ssrc].latency = parseInt(result.googCurrentDelayMs, 10);

			if (getStatsResult.audio[ssrc].latency < 0) {
				getStatsResult.audio[ssrc].latency = 0;
			}
		}

		// 
		if (!!result.packetsReceived) {
			if (!getStatsResult.internal.audio[ssrc].prevPacketsReceived) {
				getStatsResult.internal.audio[ssrc].prevPacketsReceived = 0;
			}

			var pkts = result.packetsReceived - getStatsResult.internal.audio[ssrc].prevPacketsReceived;
			getStatsResult.internal.audio[ssrc].prevPacketsReceived = result.packetsReceived;

			getStatsResult.audio[ssrc].packetsReceived = parseInt(pkts, 10);

			if (getStatsResult.audio[ssrc].packetsReceived < 0) {
				getStatsResult.audio[ssrc].packetsReceived = 0;
			}
		}

		// 
		if (!!result.packetsSent) {
			if (!getStatsResult.internal.audio[ssrc].prevPacketsSent) {
				getStatsResult.internal.audio[ssrc].prevPacketsSent = 0;
			}

			var pkts = result.packetsSent - getStatsResult.internal.audio[ssrc].prevPacketsSent;
			getStatsResult.internal.audio[ssrc].prevPacketsSent = result.packetsSent;

			getStatsResult.audio[ssrc].packetsSent = parseInt(pkts, 10);

			if (getStatsResult.audio[ssrc].packetsSent < 0) {
				getStatsResult.audio[ssrc].packetsSent = 0;
			}
		}

		// calculate packetsLost
		if (!!result.packetsLost) {
			if (!getStatsResult.internal.audio[ssrc].prevPacketsLost) {
				getStatsResult.internal.audio[ssrc].prevPacketsLost = 0; //result.packetsLost;
			}

			var lost = result.packetsLost - getStatsResult.internal.audio[ssrc].prevPacketsLost;
			getStatsResult.internal.audio[ssrc].prevPacketsLost = result.packetsLost;

			getStatsResult.audio[ssrc].packetsLost = parseInt(lost, 10);

			if (getStatsResult.audio[ssrc].packetsLost < 0) {
				getStatsResult.audio[ssrc].packetsLost = 0;
			}
		}
	};

	getStatsParser.checkVideoTracks = function (result) {
		if (result.type !== 'ssrc') return;
		if (result.mediaType !== 'video') return;

		var ssrc = result.ssrc;

		var sendrecvType = result.id.split('_').pop();
		if (result.isRemote === true) {
			sendrecvType = 'recv';
		}
		if (result.isRemote === false) {
			sendrecvType = 'send';
		}

		if (!sendrecvType) return;

		// 将 ssrc 记录下来
		if (getStatsResult.video.ssrc.indexOf(ssrc) === -1) {
			getStatsResult.video.ssrc.push(ssrc);
		}

		// 
		if (!getStatsResult.video[ssrc]) {
			getStatsResult.video[ssrc] = {};
			getStatsResult.video[ssrc][sendrecvType] = {};
			getStatsResult.video[ssrc][sendrecvType].codecs = [];
			getStatsResult.video[ssrc][sendrecvType].tracks = [];
		}

		if (getStatsResult.video[ssrc][sendrecvType].codecs.indexOf(result.googCodecName || 'VP8') === -1) {
			getStatsResult.video[ssrc][sendrecvType].codecs.push(result.googCodecName || 'VP8');
		}

		// 
		if (!getStatsResult.internal.video[ssrc]) {
			getStatsResult.internal.video[ssrc] = {};
			getStatsResult.internal.video[ssrc][sendrecvType] = {};
		}

		//
		if (!getStatsResult.internal.video[ssrc][sendrecvType]) {
			getStatsResult.internal.video[ssrc][sendrecvType] = {};
		}

		if (!!result.bytesSent) {
			if (!getStatsResult.internal.video[ssrc][sendrecvType].prevBytesSent) {
				getStatsResult.internal.video[ssrc][sendrecvType].prevBytesSent = 0; //result.bytesSent;
			}

			var bytes = result.bytesSent - getStatsResult.internal.video[ssrc][sendrecvType].prevBytesSent;
			getStatsResult.internal.video[ssrc][sendrecvType].prevBytesSent = result.bytesSent;

			var kilobytes = bytes * 8 / 1024; // to kbps

			getStatsResult.video[ssrc][sendrecvType].availableBandwidth = parseInt(kilobytes, 10);
			getStatsResult.video[ssrc].bytesSent = parseInt(kilobytes, 10);
		}

		if (!!result.bytesReceived) {
			if (!getStatsResult.internal.video[ssrc][sendrecvType].prevBytesReceived) {
				getStatsResult.internal.video[ssrc][sendrecvType].prevBytesReceived = 0; //result.bytesReceived;
			}

			var bytes = result.bytesReceived - getStatsResult.internal.video[ssrc][sendrecvType].prevBytesReceived;
			getStatsResult.internal.video[ssrc][sendrecvType].prevBytesReceived = result.bytesReceived;

			var kilobytes = bytes * 8 / 1024; // to kbps
			// getStatsResult.video[ssrc][sendrecvType].availableBandwidth = kilobytes.toFixed(1);
			getStatsResult.video[ssrc].bytesReceived = parseInt(kilobytes, 10);
		}

		/*
        if (result.googFrameHeightReceived && result.googFrameWidthReceived) {
            getStatsResult.video[ssrc][sendrecvType].resolutions.width = result.googFrameWidthReceived;
            getStatsResult.video[ssrc][sendrecvType].resolutions.height = result.googFrameHeightReceived;
        }
         if (result.googFrameHeightSent && result.googFrameWidthSent) {
            getStatsResult.video[ssrc][sendrecvType].resolutions.width = result.googFrameWidthSent;
            getStatsResult.video[ssrc][sendrecvType].resolutions.height = result.googFrameHeightSent;
  }
  */

		if (result.googTrackId && getStatsResult.video[ssrc][sendrecvType].tracks.indexOf(result.googTrackId) === -1) {
			getStatsResult.video[ssrc][sendrecvType].tracks.push(result.googTrackId);
		}

		// calculate latency
		if (!!result.googCurrentDelayMs) {
			getStatsResult.internal.video[ssrc].googCurrentDelayMs = result.googCurrentDelayMs;

			getStatsResult.video[ssrc].latency = parseInt(result.googCurrentDelayMs, 10);

			if (getStatsResult.video[ssrc].latency < 0) {
				getStatsResult.video[ssrc].latency = 0;
			}
		}

		// 
		if (!!result.packetsReceived) {
			if (!getStatsResult.internal.video[ssrc].prevPacketsReceived) {
				getStatsResult.internal.video[ssrc].prevPacketsReceived = 0;
			}

			var pkts = result.packetsReceived - getStatsResult.internal.video[ssrc].prevPacketsReceived;
			getStatsResult.internal.video[ssrc].prevPacketsReceived = result.packetsReceived;

			getStatsResult.video[ssrc].packetsReceived = parseInt(pkts, 10);

			if (getStatsResult.video[ssrc].packetsReceived < 0) {
				getStatsResult.video[ssrc].packetsReceived = 0;
			}
		}

		// 
		if (!!result.packetsSent) {
			if (!getStatsResult.internal.video[ssrc].prevPacketsSent) {
				getStatsResult.internal.video[ssrc].prevPacketsSent = 0;
			}

			var pkts = result.packetsSent - getStatsResult.internal.video[ssrc].prevPacketsSent;
			getStatsResult.internal.video[ssrc].prevPacketsSent = result.packetsSent;

			getStatsResult.video[ssrc].packetsSent = parseInt(pkts, 10);

			if (getStatsResult.video[ssrc].packetsSent < 0) {
				getStatsResult.video[ssrc].packetsSent = 0;
			}
		}

		// calculate packetsLost
		if (!!result.packetsLost) {
			if (!getStatsResult.internal.video[ssrc].prevPacketsLost) {
				getStatsResult.internal.video[ssrc].prevPacketsLost = 0; //result.packetsLost;
			}

			var lost = result.packetsLost - getStatsResult.internal.video[ssrc].prevPacketsLost;
			getStatsResult.internal.video[ssrc].prevPacketsLost = result.packetsLost;

			getStatsResult.video[ssrc].packetsLost = parseInt(lost, 10);

			if (getStatsResult.video[ssrc].packetsLost < 0) {
				getStatsResult.video[ssrc].packetsLost = 0;
			}
		}
	};

	getStatsParser.bweforvideo = function (result) {
		if (result.type !== 'VideoBwe') return;

		getStatsResult.bandwidth.availableSendBandwidth = result.googAvailableSendBandwidth;

		getStatsResult.bandwidth.googActualEncBitrate = result.googActualEncBitrate;
		getStatsResult.bandwidth.googAvailableSendBandwidth = result.googAvailableSendBandwidth;
		getStatsResult.bandwidth.googAvailableReceiveBandwidth = result.googAvailableReceiveBandwidth;
		getStatsResult.bandwidth.googRetransmitBitrate = result.googRetransmitBitrate;
		getStatsResult.bandwidth.googTargetEncBitrate = result.googTargetEncBitrate;
		getStatsResult.bandwidth.googBucketDelay = result.googBucketDelay;
		getStatsResult.bandwidth.googTransmitBitrate = result.googTransmitBitrate;
	};

	getStatsParser.candidatePair = function (result) {
		if (result.type !== 'googCandidatePair' && result.type !== 'candidate-pair' && result.type !== 'local-candidate' && result.type !== 'remote-candidate') return;

		// result.googActiveConnection means either STUN or TURN is used.

		if (result.googActiveConnection == 'true') {
			// id === 'Conn-audio-1-0'
			// localCandidateId, remoteCandidateId

			getStatsResult.bandwidth.rtt = result.googRtt;

			// 
			var downSpeed = (result.bytesReceived - getStatsResult.bandwidth.helper.prevBytesReceived) * 1000 * 8 / statInterval;
			var upSpeed = (result.bytesSent - getStatsResult.bandwidth.helper.prevBytesSent) * 1000 * 8 / statInterval;
			getStatsResult.bandwidth.helper.prevBytesReceived = result.bytesReceived;
			getStatsResult.bandwidth.helper.prevBytesSent = result.bytesSent;
			// 
			getStatsResult.bandwidth.upSpeed = upSpeed > 0 ? upSpeed : 0;
			getStatsResult.bandwidth.downSpeed = downSpeed > 0 ? downSpeed : 0;

			(0, _keys2.default)(getStatsResult.internal.candidates).forEach(function (cid) {
				var candidate = getStatsResult.internal.candidates[cid];
				if (candidate.ipAddress.indexOf(result.googLocalAddress) !== -1) {
					getStatsResult.connectionType.local.candidateType = candidate.candidateType;
					getStatsResult.connectionType.local.ipAddress = candidate.ipAddress;
					getStatsResult.connectionType.local.networkType = candidate.networkType;
					getStatsResult.connectionType.local.transport = candidate.transport;
				}
				if (candidate.ipAddress.indexOf(result.googRemoteAddress) !== -1) {
					getStatsResult.connectionType.remote.candidateType = candidate.candidateType;
					getStatsResult.connectionType.remote.ipAddress = candidate.ipAddress;
					getStatsResult.connectionType.remote.networkType = candidate.networkType;
					getStatsResult.connectionType.remote.transport = candidate.transport;
				}
			});

			getStatsResult.connectionType.transport = result.googTransportType;

			var localCandidate = getStatsResult.internal.candidates[result.localCandidateId];
			if (localCandidate) {
				if (localCandidate.ipAddress) {
					getStatsResult.connectionType.systemIpAddress = localCandidate.ipAddress;
				}
			}

			var remoteCandidate = getStatsResult.internal.candidates[result.remoteCandidateId];
			if (remoteCandidate) {
				if (remoteCandidate.ipAddress) {
					getStatsResult.connectionType.systemIpAddress = remoteCandidate.ipAddress;
				}
			}
		}

		if (result.type === 'candidate-pair') {
			if (result.selected === true && result.nominated === true && result.state === 'succeeded') {
				// remoteCandidateId, localCandidateId, componentId
				var localCandidate = getStatsResult.internal.candidates[result.remoteCandidateId];
				var remoteCandidate = getStatsResult.internal.candidates[result.remoteCandidateId];

				// Firefox used above two pairs for connection
			}
		}

		if (result.type === 'local-candidate') {
			getStatsResult.connectionType.local.candidateType = result.candidateType;
			getStatsResult.connectionType.local.ipAddress = result.ipAddress;
			getStatsResult.connectionType.local.networkType = result.networkType;
			getStatsResult.connectionType.local.transport = result.mozLocalTransport || result.transport;
		}

		if (result.type === 'remote-candidate') {
			getStatsResult.connectionType.remote.candidateType = result.candidateType;
			getStatsResult.connectionType.remote.ipAddress = result.ipAddress;
			getStatsResult.connectionType.remote.networkType = result.networkType;
			getStatsResult.connectionType.remote.transport = result.mozRemoteTransport || result.transport;
		}

		/*
  // TODO : 
  if (isSafari)
  {
  	// result.remoteCandidateId
  	// todo: below line will always force "send" on Safari; find a solution
  	var sendrecvType = result.localCandidateId ? 'send' : 'recv';
  		if (!sendrecvType) return;
  		if (!!result.bytesSent)
  	{
  		var kilobytes = 0;
  		if (!getStatsResult.internal.video[sendrecvType].prevBytesSent)
  		{
  			getStatsResult.internal.video[sendrecvType].prevBytesSent = 0;//result.bytesSent;
  		}
  			var bytes = result.bytesSent - getStatsResult.internal.video[sendrecvType].prevBytesSent;
  		getStatsResult.internal.video[sendrecvType].prevBytesSent = result.bytesSent;
  			kilobytes = (bytes * 8 / 1024); // to kbps
  			// TODO : getStatsResult.video[ssrc]
  		getStatsResult.video[sendrecvType].availableBandwidth = kilobytes.toFixed(1);
  		getStatsResult.video.bytesSent = kilobytes.toFixed(1);
  	}
  		if (!!result.bytesReceived)
  	{
  		var kilobytes = 0;
  		if (!getStatsResult.internal.video[sendrecvType].prevBytesReceived)
  		{
  			getStatsResult.internal.video[sendrecvType].prevBytesReceived = 0;//result.bytesReceived;
  		}
  			var bytes = result.bytesReceived - getStatsResult.internal.video[sendrecvType].prevBytesReceived;
  		getStatsResult.internal.video[sendrecvType].prevBytesReceived = result.bytesReceived;
  			kilobytes = (bytes * 8 / 1024); // to kbps
  			// TODO : getStatsResult.video[ssrc]
  		// getStatsResult.video[sendrecvType].availableBandwidth = kilobytes.toFixed(1);
  		getStatsResult.video.bytesReceived = kilobytes.toFixed(1);
  	}
  		if (!!result.availableOutgoingBitrate)
  	{
  		var kilobytes = 0;
  		if (!getStatsResult.internal.video[sendrecvType].prevAvailableOutgoingBitrate)
  		{
  			getStatsResult.internal.video[sendrecvType].prevAvailableOutgoingBitrate = 0;//result.availableOutgoingBitrate;
  		}
  			var bytes = result.availableOutgoingBitrate - getStatsResult.internal.video[sendrecvType].prevAvailableOutgoingBitrate;
  		getStatsResult.internal.video[sendrecvType].prevAvailableOutgoingBitrate = result.availableOutgoingBitrate;
  			kilobytes = (bytes * 8 / 1024); // to kbps
  			// TODO : getStatsResult.video[ssrc]
  		// getStatsResult.video[sendrecvType].availableBandwidth = kilobytes.toFixed(1);
  		getStatsResult.video.availableOutgoingBitrate = kilobytes.toFixed(1);
  	}
  		if (!!result.availableIncomingBitrate)
  	{
  		var kilobytes = 0;
  		if (!getStatsResult.internal.video[sendrecvType].prevAvailableIncomingBitrate)
  		{
  			getStatsResult.internal.video[sendrecvType].prevAvailableIncomingBitrate = 0;//result.availableIncomingBitrate;
  		}
  			var bytes = result.availableIncomingBitrate - getStatsResult.internal.video[sendrecvType].prevAvailableIncomingBitrate;
  		getStatsResult.internal.video[sendrecvType].prevAvailableIncomingBitrate = result.availableIncomingBitrate;
  			kilobytes = (bytes * 8 / 1024); // to kbps
  			// TODO : getStatsResult.video[ssrc]
  		// getStatsResult.video[sendrecvType].availableBandwidth = kilobytes.toFixed(1);
  		getStatsResult.video.availableIncomingBitrate = kilobytes.toFixed(1);
  	}
  }
  */
	};

	var LOCAL_candidateType = {};
	var LOCAL_transport = {};
	var LOCAL_ipAddress = {};
	var LOCAL_networkType = {};

	getStatsParser.localcandidate = function (result) {
		if (result.type !== 'localcandidate' && result.type !== 'local-candidate') return;
		if (!result.id) return;

		if (!LOCAL_candidateType[result.id]) {
			LOCAL_candidateType[result.id] = [];
		}

		if (!LOCAL_transport[result.id]) {
			LOCAL_transport[result.id] = [];
		}

		if (!LOCAL_ipAddress[result.id]) {
			LOCAL_ipAddress[result.id] = [];
		}

		if (!LOCAL_networkType[result.id]) {
			LOCAL_networkType[result.id] = [];
		}

		if (result.candidateType && LOCAL_candidateType[result.id].indexOf(result.candidateType) === -1) {
			LOCAL_candidateType[result.id].push(result.candidateType);
		}

		if (result.transport && LOCAL_transport[result.id].indexOf(result.transport) === -1) {
			LOCAL_transport[result.id].push(result.transport);
		}

		if (result.ipAddress && LOCAL_ipAddress[result.id].indexOf(result.ipAddress + ':' + result.portNumber) === -1) {
			LOCAL_ipAddress[result.id].push(result.ipAddress + ':' + result.portNumber);
		}

		if (result.networkType && LOCAL_networkType[result.id].indexOf(result.networkType) === -1) {
			LOCAL_networkType[result.id].push(result.networkType);
		}

		getStatsResult.internal.candidates[result.id] = {
			candidateType: LOCAL_candidateType[result.id],
			ipAddress: LOCAL_ipAddress[result.id],
			portNumber: result.portNumber,
			networkType: LOCAL_networkType[result.id],
			priority: result.priority,
			transport: LOCAL_transport[result.id],
			timestamp: result.timestamp,
			id: result.id,
			type: result.type
		};

		getStatsResult.connectionType.local.candidateType = LOCAL_candidateType[result.id];
		getStatsResult.connectionType.local.ipAddress = LOCAL_ipAddress[result.id];
		getStatsResult.connectionType.local.networkType = LOCAL_networkType[result.id];
		getStatsResult.connectionType.local.transport = LOCAL_transport[result.id];
	};

	var REMOTE_candidateType = {};
	var REMOTE_transport = {};
	var REMOTE_ipAddress = {};
	var REMOTE_networkType = {};

	getStatsParser.remotecandidate = function (result) {
		if (result.type !== 'remotecandidate' && result.type !== 'remote-candidate') return;
		if (!result.id) return;

		if (!REMOTE_candidateType[result.id]) {
			REMOTE_candidateType[result.id] = [];
		}

		if (!REMOTE_transport[result.id]) {
			REMOTE_transport[result.id] = [];
		}

		if (!REMOTE_ipAddress[result.id]) {
			REMOTE_ipAddress[result.id] = [];
		}

		if (!REMOTE_networkType[result.id]) {
			REMOTE_networkType[result.id] = [];
		}

		if (result.candidateType && REMOTE_candidateType[result.id].indexOf(result.candidateType) === -1) {
			REMOTE_candidateType[result.id].push(result.candidateType);
		}

		if (result.transport && REMOTE_transport[result.id].indexOf(result.transport) === -1) {
			REMOTE_transport[result.id].push(result.transport);
		}

		if (result.ipAddress && REMOTE_ipAddress[result.id].indexOf(result.ipAddress + ':' + result.portNumber) === -1) {
			REMOTE_ipAddress[result.id].push(result.ipAddress + ':' + result.portNumber);
		}

		if (result.networkType && REMOTE_networkType[result.id].indexOf(result.networkType) === -1) {
			REMOTE_networkType[result.id].push(result.networkType);
		}

		getStatsResult.internal.candidates[result.id] = {
			candidateType: REMOTE_candidateType[result.id],
			ipAddress: REMOTE_ipAddress[result.id],
			portNumber: result.portNumber,
			networkType: REMOTE_networkType[result.id],
			priority: result.priority,
			transport: REMOTE_transport[result.id],
			timestamp: result.timestamp,
			id: result.id,
			type: result.type
		};

		getStatsResult.connectionType.remote.candidateType = REMOTE_candidateType[result.id];
		getStatsResult.connectionType.remote.ipAddress = REMOTE_ipAddress[result.id];
		getStatsResult.connectionType.remote.networkType = REMOTE_networkType[result.id];
		getStatsResult.connectionType.remote.transport = REMOTE_transport[result.id];
	};

	getStatsParser.dataSentReceived = function (result) {
		if (!result.googCodecName || result.mediaType !== 'video' && result.mediaType !== 'audio') return;

		if (!!result.bytesSent) {
			getStatsResult[result.mediaType].bytesSent = parseInt(result.bytesSent);
		}

		if (!!result.bytesReceived) {
			getStatsResult[result.mediaType].bytesReceived = parseInt(result.bytesReceived);
		}
	};

	getStatsParser.inboundrtp = function (result) {
		if (!isSafari) return;
		if (result.type !== 'inbound-rtp') return;

		var mediaType = result.mediaType || 'audio';
		var sendrecvType = result.isRemote ? 'recv' : 'send';

		if (!sendrecvType) return;

		var ssrc = result.ssrc;

		if (!getStatsResult.internal[mediaType][ssrc]) {
			getStatsResult.internal[mediaType][ssrc] = {};
			getStatsResult.internal[mediaType][ssrc][sendrecvType] = {};
		}

		if (!!result.bytesSent) {
			var kilobytes = 0;
			if (!getStatsResult.internal[mediaType][ssrc][sendrecvType].prevBytesSent) {
				getStatsResult.internal[mediaType][ssrc][sendrecvType].prevBytesSent = 0; //result.bytesSent;
			}

			var bytes = result.bytesSent - getStatsResult.internal[mediaType][ssrc][sendrecvType].prevBytesSent;
			getStatsResult.internal[mediaType][ssrc][sendrecvType].prevBytesSent = result.bytesSent;

			kilobytes = bytes * 8 / 1024; // to kbps

			getStatsResult[mediaType][sendrecvType].availableBandwidth = kilobytes.toFixed(1);
			getStatsResult[mediaType].bytesSent = kilobytes.toFixed(1);
		}

		if (!!result.bytesReceived) {
			var kilobytes = 0;
			if (!getStatsResult.internal[mediaType][ssrc][sendrecvType].prevBytesReceived) {
				getStatsResult.internal[mediaType][ssrc][sendrecvType].prevBytesReceived = 0; //result.bytesReceived;
			}

			var bytes = result.bytesReceived - getStatsResult.internal[mediaType][ssrc][sendrecvType].prevBytesReceived;
			getStatsResult.internal[mediaType][ssrc][sendrecvType].prevBytesReceived = result.bytesReceived;

			kilobytes = bytes * 8 / 1024; // to kbps
			// getStatsResult[mediaType][sendrecvType].availableBandwidth = kilobytes.toFixed(1);
			getStatsResult[mediaType].bytesReceived = kilobytes.toFixed(1);
		}
	};

	getStatsParser.outboundrtp = function (result) {
		if (!isSafari) return;
		if (result.type !== 'outbound-rtp') return;

		var mediaType = result.mediaType || 'audio';
		var sendrecvType = result.isRemote ? 'recv' : 'send';

		if (!sendrecvType) return;

		var ssrc = result.ssrc;

		if (!getStatsResult.internal[mediaType][ssrc]) {
			getStatsResult.internal[mediaType][ssrc] = {};
			getStatsResult.internal[mediaType][ssrc][sendrecvType] = {};
		}

		if (!!result.bytesSent) {
			var kilobytes = 0;
			if (!getStatsResult.internal[mediaType][ssrc][sendrecvType].prevBytesSent) {
				getStatsResult.internal[mediaType][ssrc][sendrecvType].prevBytesSent = 0; //result.bytesSent;
			}

			var bytes = result.bytesSent - getStatsResult.internal[mediaType][ssrc][sendrecvType].prevBytesSent;
			getStatsResult.internal[mediaType][ssrc][sendrecvType].prevBytesSent = result.bytesSent;

			kilobytes = bytes * 8 / 1024; // to kbps

			getStatsResult[mediaType][sendrecvType].availableBandwidth = kilobytes.toFixed(1);
			getStatsResult[mediaType].bytesSent = kilobytes.toFixed(1);
		}

		if (!!result.bytesReceived) {
			var kilobytes = 0;
			if (!getStatsResult.internal[mediaType][ssrc][sendrecvType].prevBytesReceived) {
				getStatsResult.internal[mediaType][ssrc][sendrecvType].prevBytesReceived = 0; //result.bytesReceived;
			}

			var bytes = result.bytesReceived - getStatsResult.internal[mediaType][ssrc][sendrecvType].prevBytesReceived;
			getStatsResult.internal[mediaType][ssrc][sendrecvType].prevBytesReceived = result.bytesReceived;

			kilobytes = bytes * 8 / 1024; // to kbps
			// getStatsResult[mediaType][sendrecvType].availableBandwidth = kilobytes.toFixed(1);
			getStatsResult[mediaType].bytesReceived = kilobytes.toFixed(1);
		}
	};

	getStatsParser.track = function (result) {
		if (!isSafari) return;
		if (result.type !== 'track') return;

		var sendrecvType = result.remoteSource === true ? 'send' : 'recv';

		if (result.frameWidth && result.frameHeight) {
			getStatsResult.resolutions[sendrecvType].width = result.frameWidth;
			getStatsResult.resolutions[sendrecvType].height = result.frameHeight;
		}

		// framesSent, framesReceived
	};

	var SSRC = {
		audio: {
			send: [],
			recv: []
		},
		video: {
			send: [],
			recv: []
		}
	};

	getStatsParser.ssrc = function (result) {
		if (!result.googCodecName || result.mediaType !== 'video' && result.mediaType !== 'audio') return;
		if (result.type !== 'ssrc') return;
		var sendrecvType = result.id.split('_').pop();

		if (SSRC[result.mediaType][sendrecvType].indexOf(result.ssrc) === -1) {
			SSRC[result.mediaType][sendrecvType].push(result.ssrc);
		}

		// getStatsResult[result.mediaType][sendrecvType].streams = SSRC[result.mediaType][sendrecvType].length;
	};

	getStatsLooper();
};

if (true /* && !!module.exports*/) {
		module.exports = getStats;
	}

if (true) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
		return getStats;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/_webpack@4.41.6@webpack/buildin/global.js */ "./node_modules/_webpack@4.41.6@webpack/buildin/global.js")))

/***/ }),

/***/ "./lib/index.js":
/*!**********************!*\
  !*** ./lib/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.TTTRtcWeb = undefined;

var _TTTRtcWeb = __webpack_require__(/*! ./TTTRtcWeb */ "./lib/TTTRtcWeb.js");

exports.TTTRtcWeb = _TTTRtcWeb.TTTRtcWeb;

/***/ }),

/***/ "./lib/logger.js":
/*!***********************!*\
  !*** ./lib/logger.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var _stringify = __webpack_require__(/*! babel-runtime/core-js/json/stringify */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/json/stringify.js");

var _stringify2 = _interopRequireDefault(_stringify);

var _typeof2 = __webpack_require__(/*! babel-runtime/helpers/typeof */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/typeof.js");

var _typeof3 = _interopRequireDefault(_typeof2);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-console */
var debug = __webpack_require__(/*! debug */ "./node_modules/_debug@4.1.1@debug/src/browser.js");
var clogLevel = __webpack_require__(/*! ./config */ "./lib/config.js").logLevel;
var config = __webpack_require__(/*! ./config */ "./lib/config.js");

var APP_NAME = 'tttwebsdk';
var LOG_LEVEL = clogLevel.LOG_TRACE;

var Logger = function () {
	function Logger(prefix) {
		(0, _classCallCheck3.default)(this, Logger);

		this._userAgent = navigator.userAgent;
		this._isMobile = /mobile/i.test(this._userAgent);

		// 
		if (prefix) {
			this._prefix = APP_NAME + ' ' + prefix;
			this._debug = debug(APP_NAME + ':' + prefix);
			this._warn = debug(APP_NAME + ':WARN:' + prefix);
			this._error = debug(APP_NAME + ':ERROR:' + prefix);
		} else {
			this._prefix = '' + APP_NAME;
			this._debug = debug(APP_NAME);
			this._warn = debug(APP_NAME + ':WARN');
			this._error = debug(APP_NAME + ':ERROR');
		}

		/* eslint-disable no-console */
		// this._debug.log = console.info.bind(console);
		// this._warn.log = console.warn.bind(console);
		// this._error.log = console.error.bind(console);
		this._debug = this._log_debug.bind(this);
		this._warn = this._log_warn.bind(this);
		this._error = this._log_error.bind(this);
		/* eslint-enable no-console */

		this._setLoggerLevel = this.setLoggerLevel;
	}

	(0, _createClass3.default)(Logger, [{
		key: 'setLoggerLevel',
		value: function setLoggerLevel(level) {
			Logger.logLevel = level;
		}
	}, {
		key: '_log_debug',
		value: function _log_debug() {
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}

			if (Logger.logLevel <= clogLevel.LOG_INFO) {
				var msg = '[' + this._prefix + ']';

				[].slice.apply(args).forEach(function (element) {
					if ((typeof element === 'undefined' ? 'undefined' : (0, _typeof3.default)(element)) === 'object') msg += ' ' + (0, _stringify2.default)(element);else msg += ' ' + element;
				});

				// eslint-disable-next-line no-console
				console.log(msg);
			}
			this._log.apply(this, args);
		}
	}, {
		key: '_log_error',
		value: function _log_error() {
			for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
				args[_key2] = arguments[_key2];
			}

			if (Logger.logLevel <= clogLevel.LOG_ERROR) {
				// let msg = `${new Date()} -- [${this._prefix}]`;
				var msg = '[' + this._prefix + ']';

				[].slice.apply(args).forEach(function (element) {
					if ((typeof element === 'undefined' ? 'undefined' : (0, _typeof3.default)(element)) === 'object') msg += ' ' + (0, _stringify2.default)(element);else msg += ' ' + element;
				});

				// eslint-disable-next-line no-console
				console.error(msg);
			}

			this._log.apply(this, args);
		}
	}, {
		key: '_log_warn',
		value: function _log_warn() {
			for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
				args[_key3] = arguments[_key3];
			}

			if (Logger.logLevel <= clogLevel.LOG_WARN) {
				// let msg = `${new Date()} -- [${this._prefix}]`;
				var msg = '[' + this._prefix + ']';

				[].slice.apply(args).forEach(function (element) {
					if ((typeof element === 'undefined' ? 'undefined' : (0, _typeof3.default)(element)) === 'object') msg += ' ' + (0, _stringify2.default)(element);else msg += ' ' + element;
				});

				// eslint-disable-next-line no-console
				console.warn(msg);
			}

			this._log.apply(this, args);
		}
	}, {
		key: '_log',
		value: function _log() {
			if (!config.log2Server) {
				return;
			}

			// eslint-disable-next-line no-undef
			var dev = this._isMobile ? 'web_mobile' : 'web';
			var msg = 'appid=' + global.g_appid + ', roomid=' + global.g_roomid + ', userid=' + global.g_userid + ' server=' + global.g_server + ' dev=' + dev + ' ua=' + this._userAgent + ' time=' + new Date();

			for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
				args[_key4] = arguments[_key4];
			}

			[].slice.apply(args).forEach(function (element) {
				if ((typeof element === 'undefined' ? 'undefined' : (0, _typeof3.default)(element)) === 'object') msg += ' ' + (0, _stringify2.default)(element);else msg += ' ' + element;
			});

			fetch('https://log.wushuangtech.com:15100', {
				method: "POST",
				mode: "cors",
				cache: "no-cache",
				headers: {
					"Content-Type": "text/plain; charset=utf-8"
					// "Content-Type": "application/json; charset=utf-8",
				},
				redirect: "follow",
				referrer: "no-referrer",
				body: 'event=' + this._prefix + ' ' + msg
			})
			// eslint-disable-next-line no-console
			.catch(function (error) {
				return console.warn('Error:', error);
			}).then(function (response) {
				return (0, _stringify2.default)(response);
			});
		}
	}, {
		key: 'debug',
		get: function get() {
			return this._debug;
		}
	}, {
		key: 'warn',
		get: function get() {
			return this._warn;
		}
	}, {
		key: 'error',
		get: function get() {
			return this._error;
		}
	}], [{
		key: 'logLevel',
		get: function get() {
			return LOG_LEVEL;
		},
		set: function set(value) {
			switch (value) {
				case 'LOG_NONE':
					LOG_LEVEL = clogLevel.LOG_NONE;
					break;

				case 'LOG_ERROR':
					LOG_LEVEL = clogLevel.LOG_ERROR;
					break;

				case 'LOG_WARN':
					LOG_LEVEL = clogLevel.LOG_WARN;
					break;

				case 'LOG_INFO':
					LOG_LEVEL = clogLevel.LOG_INFO;

					break;
				case 'LOG_DEBUG':
					LOG_LEVEL = clogLevel.LOG_DEBUG;
					break;

				case 'LOG_TRACE':
					LOG_LEVEL = clogLevel.LOG_TRACE;
					break;

				default:
					throw TypeError('parameter error. must be: LOG_NONE, LOG_ERROR, LOG_WARN, LOG_INFO, LOG_DEBUG, LOG_TRACE');
			}
		}
	}]);
	return Logger;
}();

module.exports = Logger;
module.exports = function (prefix) {
	return new Logger(prefix);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/_webpack@4.41.6@webpack/buildin/global.js */ "./node_modules/_webpack@4.41.6@webpack/buildin/global.js")))

/***/ }),

/***/ "./lib/mslib/CommandQueue.js":
/*!***********************************!*\
  !*** ./lib/mslib/CommandQueue.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _promise = __webpack_require__(/*! babel-runtime/core-js/promise */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js");

var _promise2 = _interopRequireDefault(_promise);

var _assign = __webpack_require__(/*! babel-runtime/core-js/object/assign */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/assign.js");

var _assign2 = _interopRequireDefault(_assign);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

var _events = __webpack_require__(/*! events */ "./node_modules/_events@3.1.0@events/events.js");

var _Logger = __webpack_require__(/*! ./Logger */ "./lib/mslib/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

var _errors = __webpack_require__(/*! ./errors */ "./lib/mslib/errors.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = new _Logger2.default('CommandQueue');

var CommandQueue = function (_EventEmitter) {
	(0, _inherits3.default)(CommandQueue, _EventEmitter);

	function CommandQueue() {
		(0, _classCallCheck3.default)(this, CommandQueue);

		var _this = (0, _possibleConstructorReturn3.default)(this, (CommandQueue.__proto__ || (0, _getPrototypeOf2.default)(CommandQueue)).call(this));

		_this.setMaxListeners(Infinity);

		// Closed flag.
		// @type {Boolean}
		_this._closed = false;

		// Busy running a command.
		// @type {Boolean}
		_this._busy = false;

		// Queue for pending commands. Each command is an Object with method,
		// resolve, reject, and other members (depending the case).
		// @type {Array<Object>}
		_this._queue = [];
		return _this;
	}

	(0, _createClass3.default)(CommandQueue, [{
		key: 'close',
		value: function close() {
			this._closed = true;
		}
	}, {
		key: 'push',
		value: function push(method, data) {
			var _this2 = this;

			var command = (0, _assign2.default)({ method: method }, data);

			logger.debug('push() [method:%s]', method);

			return new _promise2.default(function (resolve, reject) {
				var queue = _this2._queue;

				command.resolve = resolve;
				command.reject = reject;

				// Append command to the queue.
				queue.push(command);
				_this2._handlePendingCommands();
			});
		}
	}, {
		key: '_handlePendingCommands',
		value: function _handlePendingCommands() {
			var _this3 = this;

			if (this._busy) return;

			var queue = this._queue;

			// Take the first command.
			var command = queue[0];

			if (!command) return;

			this._busy = true;

			// Execute it.
			this._handleCommand(command).then(function () {
				_this3._busy = false;

				// Remove the first command (the completed one) from the queue.
				queue.shift();

				// And continue.
				_this3._handlePendingCommands();
			});
		}
	}, {
		key: '_handleCommand',
		value: function _handleCommand(command) {
			var _this4 = this;

			logger.debug('_handleCommand() [method:%s]', command.method);

			if (this._closed) {
				command.reject(new _errors.InvalidStateError('closed'));

				return _promise2.default.resolve();
			}

			var promiseHolder = { promise: null };

			this.emit('exec', command, promiseHolder);

			return _promise2.default.resolve().then(function () {
				return promiseHolder.promise;
			}).then(function (result) {
				logger.debug('_handleCommand() | command succeeded [method:%s]', command.method);

				if (_this4._closed) {
					command.reject(new _errors.InvalidStateError('closed'));

					return;
				}

				// Resolve the command with the given result (if any).
				command.resolve(result);
			}).catch(function (error) {
				logger.error('_handleCommand() | command failed [method:%s]: %o', command.method, error);

				// Reject the command with the error.
				command.reject(error);
			});
		}
	}]);
	return CommandQueue;
}(_events.EventEmitter);

exports.default = CommandQueue;

/***/ }),

/***/ "./lib/mslib/Consumer.js":
/*!*******************************!*\
  !*** ./lib/mslib/Consumer.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof2 = __webpack_require__(/*! babel-runtime/helpers/typeof */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/typeof.js");

var _typeof3 = _interopRequireDefault(_typeof2);

var _promise = __webpack_require__(/*! babel-runtime/core-js/promise */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js");

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

var _set = __webpack_require__(/*! babel-runtime/core-js/set */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/set.js");

var _set2 = _interopRequireDefault(_set);

var _Logger = __webpack_require__(/*! ./Logger */ "./lib/mslib/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

var _EnhancedEventEmitter2 = __webpack_require__(/*! ./EnhancedEventEmitter */ "./lib/mslib/EnhancedEventEmitter.js");

var _EnhancedEventEmitter3 = _interopRequireDefault(_EnhancedEventEmitter2);

var _errors = __webpack_require__(/*! ./errors */ "./lib/mslib/errors.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PROFILES = new _set2.default(['default', 'low', 'medium', 'high']);
var DEFAULT_STATS_INTERVAL = 1000;

var logger = new _Logger2.default('Consumer');

var Consumer = function (_EnhancedEventEmitter) {
	(0, _inherits3.default)(Consumer, _EnhancedEventEmitter);

	/**
  * @private
  *
  * @emits {originator: String, [appData]: Any} pause
  * @emits {originator: String, [appData]: Any} resume
  * @emits {profile: String} effectiveprofilechange
  * @emits {stats: Object} stats
  * @emits handled
  * @emits unhandled
  * @emits {originator: String} close
  *
  * @emits @close
  */
	function Consumer(id, kind, rtpParameters, peer, appData) {
		(0, _classCallCheck3.default)(this, Consumer);

		// Id.
		// @type {Number}
		var _this = (0, _possibleConstructorReturn3.default)(this, (Consumer.__proto__ || (0, _getPrototypeOf2.default)(Consumer)).call(this, logger));

		_this._id = id;

		// Closed flag.
		// @type {Boolean}
		_this._closed = false;

		// Media kind.
		// @type {String}
		_this._kind = kind;

		// RTP parameters.
		// @type {RTCRtpParameters}
		_this._rtpParameters = rtpParameters;

		// Associated Peer.
		// @type {Peer}
		_this._peer = peer;

		// App custom data.
		// @type {Any}
		_this._appData = appData;

		// Whether we can receive this Consumer (based on our RTP capabilities).
		// @type {Boolean}
		_this._supported = false;

		// Associated Transport.
		// @type {Transport}
		_this._transport = null;

		// Remote track.
		// @type {MediaStreamTrack}
		_this._track = null;

		// Locally paused flag.
		// @type {Boolean}
		_this._locallyPaused = false;

		// Remotely paused flag.
		// @type {Boolean}
		_this._remotelyPaused = false;

		// Periodic stats flag.
		// @type {Boolean}
		_this._statsEnabled = false;

		// Periodic stats gathering interval (milliseconds).
		// @type {Number}
		_this._statsInterval = DEFAULT_STATS_INTERVAL;

		// Preferred profile.
		// @type {String}
		_this._preferredProfile = 'default';

		// Effective profile.
		// @type {String}
		_this._effectiveProfile = null;
		return _this;
	}

	/**
  * Consumer id.
  *
  * @return {Number}
  */


	(0, _createClass3.default)(Consumer, [{
		key: 'close',


		/**
   * Closes the Consumer.
   * This is called when the local Room is closed.
   *
   * @private
   */
		value: function close() {
			logger.debug('close()');

			if (this._closed) return;

			this._closed = true;

			if (this._statsEnabled) {
				this._statsEnabled = false;

				if (this.transport) this.transport.disableConsumerStats(this);
			}

			this.emit('@close');
			this.safeEmit('close', 'local');

			this._destroy();
		}

		/**
   * My remote Consumer was closed.
   * Invoked via remote notification.
   *
   * @private
   */

	}, {
		key: 'remoteClose',
		value: function remoteClose() {
			logger.debug('remoteClose()');

			if (this._closed) return;

			this._closed = true;

			if (this._transport) this._transport.removeConsumer(this);

			this._destroy();

			this.emit('@close');
			this.safeEmit('close', 'remote');
		}
	}, {
		key: '_destroy',
		value: function _destroy() {
			this._transport = null;

			try {
				this._track.stop();
			} catch (error) {}

			this._track = null;
		}

		/**
   * Receives RTP.
   *
   * @param {transport} Transport instance.
   *
   * @return {Promise} Resolves with a remote MediaStreamTrack.
   */

	}, {
		key: 'receive',
		value: function receive(transport) {
			var _this2 = this;

			logger.debug('receive() [transport:%o]', transport);

			if (this._closed) return _promise2.default.reject(new _errors.InvalidStateError('Consumer closed'));else if (!this._supported) return _promise2.default.reject(new Error('unsupported codecs'));else if (this._transport) return _promise2.default.reject(new Error('already handled by a Transport'));else if ((typeof transport === 'undefined' ? 'undefined' : (0, _typeof3.default)(transport)) !== 'object') return _promise2.default.reject(new TypeError('invalid Transport'));

			this._transport = transport;

			return transport.addConsumer(this).then(function (track) {
				_this2._track = track;

				// If we were paused, disable the track.
				if (_this2.paused) track.enabled = false;

				transport.once('@close', function () {
					if (_this2._closed || _this2._transport !== transport) return;

					_this2._transport = null;

					try {
						_this2._track.stop();
					} catch (error) {}

					_this2._track = null;

					_this2.safeEmit('unhandled');
				});

				_this2.safeEmit('handled');

				if (_this2._statsEnabled) transport.enableConsumerStats(_this2, _this2._statsInterval);

				return track;
			}).catch(function (error) {
				_this2._transport = null;

				throw error;
			});
		}

		/**
   * Pauses receiving media.
   *
   * @param {Any} [appData] - App custom data.
   *
   * @return {Boolean} true if paused.
   */

	}, {
		key: 'pause',
		value: function pause(appData) {
			logger.debug('pause()');

			if (this._closed) {
				// logger.warn('pause() | Consumer closed');

				return false;
			} else if (this._locallyPaused) {
				return true;
			}

			this._locallyPaused = true;

			if (this._track) this._track.enabled = false;

			if (this._transport) this._transport.pauseConsumer(this, appData);

			this.safeEmit('pause', 'local', appData);

			// Return true if really paused.
			return this.paused;
		}

		/**
   * My remote Consumer was paused.
   * Invoked via remote notification.
   *
   * @private
   *
   * @param {Any} [appData] - App custom data.
   */

	}, {
		key: 'remotePause',
		value: function remotePause(appData) {
			logger.debug('remotePause()');

			if (this._closed || this._remotelyPaused) return;

			this._remotelyPaused = true;

			if (this._track) this._track.enabled = false;

			this.safeEmit('pause', 'remote', appData);
		}

		/**
   * Resumes receiving media.
   *
   * @param {Any} [appData] - App custom data.
   *
   * @return {Boolean} true if not paused.
   */

	}, {
		key: 'resume',
		value: function resume(appData) {
			logger.debug('resume()');

			if (this._closed) {
				// logger.warn('resume() | Consumer closed');

				return false;
			} else if (!this._locallyPaused) {
				return true;
			}

			this._locallyPaused = false;

			if (this._track && !this._remotelyPaused) this._track.enabled = true;

			if (this._transport) this._transport.resumeConsumer(this, appData);

			this.safeEmit('resume', 'local', appData);

			// Return true if not paused.
			return !this.paused;
		}

		/**
   * My remote Consumer was resumed.
   * Invoked via remote notification.
   *
   * @private
   *
   * @param {Any} [appData] - App custom data.
   */

	}, {
		key: 'remoteResume',
		value: function remoteResume(appData) {
			logger.debug('remoteResume()');

			if (this._closed || !this._remotelyPaused) return;

			this._remotelyPaused = false;

			if (this._track && !this._locallyPaused) this._track.enabled = true;

			this.safeEmit('resume', 'remote', appData);
		}

		/**
   * Set preferred receiving profile.
   *
   * @param {String} profile
   */

	}, {
		key: 'setPreferredProfile',
		value: function setPreferredProfile(profile) {
			logger.debug('setPreferredProfile() [profile:%s]', profile);

			if (this._closed) {
				logger.warn('setPreferredProfile() | Consumer closed');

				return;
			} else if (profile === this._preferredProfile) {
				return;
			} else if (!PROFILES.has(profile)) {
				logger.error('setPreferredProfile() | invalid profile "%s"', profile);

				return;
			}

			this._preferredProfile = profile;

			if (this._transport) this._transport.setConsumerPreferredProfile(this, this._preferredProfile);
		}

		/**
   * Preferred receiving profile was set on my remote Consumer.
   *
   * @param {String} profile
   */

	}, {
		key: 'remoteSetPreferredProfile',
		value: function remoteSetPreferredProfile(profile) {
			logger.debug('remoteSetPreferredProfile() [profile:%s]', profile);

			if (this._closed || profile === this._preferredProfile) return;

			this._preferredProfile = profile;
		}

		/**
   * Effective receiving profile changed on my remote Consumer.
   *
   * @param {String} profile
   */

	}, {
		key: 'remoteEffectiveProfileChanged',
		value: function remoteEffectiveProfileChanged(profile) {
			logger.debug('remoteEffectiveProfileChanged() [profile:%s]', profile);

			if (this._closed || profile === this._effectiveProfile) return;

			this._effectiveProfile = profile;

			this.safeEmit('effectiveprofilechange', this._effectiveProfile);
		}

		/**
   * Enables periodic stats retrieval.
   */

	}, {
		key: 'enableStats',
		value: function enableStats() {
			var interval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_STATS_INTERVAL;

			logger.debug('enableStats() [interval:%s]', interval);

			if (this._closed) {
				// logger.warn('enableStats() | Consumer closed');

				return;
			}

			if (this._statsEnabled) return;

			if (typeof interval !== 'number' || interval < 1000) this._statsInterval = DEFAULT_STATS_INTERVAL;else this._statsInterval = interval;

			this._statsEnabled = true;

			if (this._transport) this._transport.enableConsumerStats(this, this._statsInterval);
		}

		/**
   * Disables periodic stats retrieval.
   */

	}, {
		key: 'disableStats',
		value: function disableStats() {
			// logger.debug('disableStats()');

			if (this._closed) {
				// logger.error('disableStats() | Consumer closed');

				return;
			}

			if (!this._statsEnabled) return;

			this._statsEnabled = false;

			if (this._transport) this._transport.disableConsumerStats(this);
		}

		/**
   * Mark this Consumer as suitable for reception or not.
   *
   * @private
   *
   * @param {Boolean} flag
   */

	}, {
		key: 'setSupported',
		value: function setSupported(flag) {
			this._supported = flag;
		}

		/**
   * Receive remote stats.
   *
   * @private
   *
   * @param {Object} stats
   */

	}, {
		key: 'remoteStats',
		value: function remoteStats(stats) {
			this.safeEmit('stats', stats);
		}

		/**
   * Get consumer stats.
   *
   * @private
   *
   * @param {Object} selector
   */

	}, {
		key: 'getStats',
		value: function getStats(selector) {
			return this.transport.getStats(selector);
		}

		/**
   * Enable internal statistics.
   * @param {number} interval 
   */

	}, {
		key: 'enableInternalStats',
		value: function enableInternalStats(interval) {
			var _this3 = this;

			var in_interval = interval > 0 && interval !== undefined ? interval : DEFAULT_STATS_INTERVAL;
			// logger.debug('enableInternalStats() [interval:%s]', in_interval);

			if (this._closed) {
				// logger.error('enableInternalStats() | Producer closed');
				return;
			}

			if (this._internalStatsEnabled) return;
			if (typeof in_interval !== 'number' || in_interval < 1000) this._interanlStatsInterval = DEFAULT_STATS_INTERVAL;else this._interanlStatsInterval = in_interval;

			this._internalStatsEnabled = true;
			if (this._transport) {
				this._internalTimer = setInterval(function () {
					return _this3.getStats().then(function (s) {
						_this3.emit('internalStats', s);
					});
				}, in_interval);
			}
		}

		/**
   * Disable internal statistics.
   */

	}, {
		key: 'disableInternalStats',
		value: function disableInternalStats() {
			if (this._internalStatsEnabled) {
				clearInterval(this._internalTimer);
			}

			this._internalTimer = null;
			this._internalStatsEnabled = false;
		}
	}, {
		key: 'id',
		get: function get() {
			return this._id;
		}

		/**
   * Whether the Consumer is closed.
   *
   * @return {Boolean}
   */

	}, {
		key: 'closed',
		get: function get() {
			return this._closed;
		}

		/**
   * Media kind.
   *
   * @return {String}
   */

	}, {
		key: 'kind',
		get: function get() {
			return this._kind;
		}

		/**
   * RTP parameters.
   *
   * @return {RTCRtpParameters}
   */

	}, {
		key: 'rtpParameters',
		get: function get() {
			return this._rtpParameters;
		}

		/**
   * Associated Peer.
   *
   * @return {Peer}
   */

	}, {
		key: 'peer',
		get: function get() {
			return this._peer;
		}

		/**
   * App custom data.
   *
   * @return {Any}
   */

	}, {
		key: 'appData',
		get: function get() {
			return this._appData;
		}

		/**
   * Whether we can receive this Consumer (based on our RTP capabilities).
   *
   * @return {Boolean}
   */

	}, {
		key: 'supported',
		get: function get() {
			return this._supported;
		}

		/**
   * Associated Transport.
   *
   * @return {Transport}
   */

	}, {
		key: 'transport',
		get: function get() {
			return this._transport;
		}

		/**
   * The associated track (if any yet).
   *
   * @return {MediaStreamTrack|null}
   */

	}, {
		key: 'track',
		get: function get() {
			return this._track;
		}

		/**
   * Whether the Consumer is locally paused.
   *
   * @return {Boolean}
   */

	}, {
		key: 'locallyPaused',
		get: function get() {
			return this._locallyPaused;
		}

		/**
   * Whether the Consumer is remotely paused.
   *
   * @return {Boolean}
   */

	}, {
		key: 'remotelyPaused',
		get: function get() {
			return this._remotelyPaused;
		}

		/**
   * Whether the Consumer is paused.
   *
   * @return {Boolean}
   */

	}, {
		key: 'paused',
		get: function get() {
			return this._locallyPaused || this._remotelyPaused;
		}

		/**
   * The preferred profile.
   *
   * @type {String}
   */

	}, {
		key: 'preferredProfile',
		get: function get() {
			return this._preferredProfile;
		}

		/**
   * The effective profile.
   *
   * @type {String}
   */

	}, {
		key: 'effectiveProfile',
		get: function get() {
			return this._effectiveProfile;
		}
	}]);
	return Consumer;
}(_EnhancedEventEmitter3.default);

exports.default = Consumer;

/***/ }),

/***/ "./lib/mslib/Device.js":
/*!*****************************!*\
  !*** ./lib/mslib/Device.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _bowser = __webpack_require__(/*! bowser */ "./node_modules/_bowser@1.9.4@bowser/src/bowser.js");

var _bowser2 = _interopRequireDefault(_bowser);

var _Logger = __webpack_require__(/*! ./Logger */ "./lib/mslib/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

var _Chrome = __webpack_require__(/*! ./handlers/Chrome70 */ "./lib/mslib/handlers/Chrome70.js");

var _Chrome2 = _interopRequireDefault(_Chrome);

var _Chrome3 = __webpack_require__(/*! ./handlers/Chrome69 */ "./lib/mslib/handlers/Chrome69.js");

var _Chrome4 = _interopRequireDefault(_Chrome3);

var _Chrome5 = __webpack_require__(/*! ./handlers/Chrome67 */ "./lib/mslib/handlers/Chrome67.js");

var _Chrome6 = _interopRequireDefault(_Chrome5);

var _Chrome7 = __webpack_require__(/*! ./handlers/Chrome55 */ "./lib/mslib/handlers/Chrome55.js");

var _Chrome8 = _interopRequireDefault(_Chrome7);

var _Safari = __webpack_require__(/*! ./handlers/Safari13 */ "./lib/mslib/handlers/Safari13.js");

var _Safari2 = _interopRequireDefault(_Safari);

var _Safari3 = __webpack_require__(/*! ./handlers/Safari12 */ "./lib/mslib/handlers/Safari12.js");

var _Safari4 = _interopRequireDefault(_Safari3);

var _Safari5 = __webpack_require__(/*! ./handlers/Safari11 */ "./lib/mslib/handlers/Safari11.js");

var _Safari6 = _interopRequireDefault(_Safari5);

var _Firefox = __webpack_require__(/*! ./handlers/Firefox65 */ "./lib/mslib/handlers/Firefox65.js");

var _Firefox2 = _interopRequireDefault(_Firefox);

var _Firefox3 = __webpack_require__(/*! ./handlers/Firefox59 */ "./lib/mslib/handlers/Firefox59.js");

var _Firefox4 = _interopRequireDefault(_Firefox3);

var _Firefox5 = __webpack_require__(/*! ./handlers/Firefox50 */ "./lib/mslib/handlers/Firefox50.js");

var _Firefox6 = _interopRequireDefault(_Firefox5);

var _Edge = __webpack_require__(/*! ./handlers/Edge11 */ "./lib/mslib/handlers/Edge11.js");

var _Edge2 = _interopRequireDefault(_Edge);

var _ReactNative = __webpack_require__(/*! ./handlers/ReactNative */ "./lib/mslib/handlers/ReactNative.js");

var _ReactNative2 = _interopRequireDefault(_ReactNative);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = new _Logger2.default('Device');

/**
 * Class with static members representing the underlying device or browser.
 */

var Device = function () {
	function Device() {
		(0, _classCallCheck3.default)(this, Device);
	}

	(0, _createClass3.default)(Device, null, [{
		key: 'setHandler',

		/**
   * Provides a custom RTC handler class and avoid auto-detection. Useful
   * for making mediasoup-client work with custom devices.
   *
   * NOTE: This function must be called upon library load.
   *
   * @param {Class} handler - A handler class.
   * @param {Object} [metadata] - Handler metadata.
   * @param {String} [metadata.flag] - Handler flag.
   * @param {String} [metadata.name] - Handler name.
   * @param {String} [metadata.version] - Handler version.
   * @param {Object} [metadata.bowser] - Handler bowser Object.
   */
		value: function setHandler(handler) {
			var metadata = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

			Device._detected = true;

			Device._handlerClass = handler;

			// Optional fields.
			Device._flag = metadata.flag;
			Device._name = metadata.name;
			Device._version = metadata.version;
			Device._bowser = metadata.bowser || {};
		}

		/**
   * Get the device flag.
   *
   * @return {String}
   */

	}, {
		key: 'getFlag',
		value: function getFlag() {
			if (!Device._detected) Device._detect();

			return Device._flag;
		}

		/**
   * Get the device name.
   *
   * @return {String}
   */

	}, {
		key: 'getName',
		value: function getName() {
			if (!Device._detected) Device._detect();

			return Device._name;
		}

		/**
   * Get the device version.
   *
   * @return {String}
   */

	}, {
		key: 'getVersion',
		value: function getVersion() {
			if (!Device._detected) Device._detect();

			return Device._version;
		}

		/**
   * Get the bowser module Object.
   *
   * @return {Object}
   */

	}, {
		key: 'getBowser',
		value: function getBowser() {
			if (!Device._detected) Device._detect();

			return Device._bowser;
		}

		/**
   * Whether this device is supported.
   *
   * @return {Boolean}
   */

	}, {
		key: 'isSupported',
		value: function isSupported() {
			if (!Device._detected) Device._detect();

			return Boolean(Device._handlerClass);
		}

		/**
   * Returns a suitable WebRTC handler class.
   *
   * @type {Class}
   */

	}, {
		key: '_detect',


		/**
   * Detects the current device/browser.
   *
   * @private
   */
		value: function _detect() {
			Device._detected = true;

			// If this is React-Native manually fill data.
			if (global.navigator && global.navigator.product === 'ReactNative') {
				Device._flag = 'react-native';
				Device._name = 'ReactNative';
				Device._version = undefined; // NOTE: No idea how to know it.
				Device._bowser = {};
				Device._handlerClass = _ReactNative2.default;
			}
			// If this is a browser use bowser module detection.
			else if (global.navigator && typeof global.navigator.userAgent === 'string') {
					var ua = global.navigator.userAgent;
					var browser = _bowser2.default.detect(ua);

					Device._flag = undefined;
					Device._name = browser.name || undefined;
					Device._version = browser.version || undefined;
					Device._bowser = browser;
					Device._handlerClass = null;

					// Chrome, Chromium (desktop and mobile).
					if (_bowser2.default.check({ chrome: '70', chromium: '70' }, true, ua)) {
						Device._flag = 'chrome';
						Device._handlerClass = _Chrome2.default;
					} else if (_bowser2.default.check({ chrome: '69', chromium: '69' }, true, ua)) {
						Device._flag = 'chrome';
						Device._handlerClass = _Chrome4.default;
					} else if (_bowser2.default.check({ chrome: '67', chromium: '67' }, true, ua)) {
						Device._flag = 'chrome';
						Device._handlerClass = _Chrome6.default;
					} else if (_bowser2.default.check({ chrome: '55', chromium: '55' }, true, ua)) {
						Device._flag = 'chrome';
						Device._handlerClass = _Chrome8.default;
					}
					// Special case for old Chrome >= 49 if webrtc-adapter is present.
					else if (_bowser2.default.check({ chrome: '49', chromium: '49' }, true, ua) && global.adapter) {
							Device._flag = 'chrome';
							Device._handlerClass = _Chrome8.default;
						}
						// Firefox (desktop and mobile).
						else if (_bowser2.default.check({ firefox: '65' }, true, ua)) {
								Device._flag = 'firefox';
								Device._handlerClass = _Firefox2.default;
							}
							// Firefox (desktop and mobile).
							else if (_bowser2.default.check({ firefox: '59' }, true, ua)) {
									Device._flag = 'firefox';
									Device._handlerClass = _Firefox4.default;
								} else if (_bowser2.default.check({ firefox: '50' }, true, ua)) {
									Device._flag = 'firefox';
									Device._handlerClass = _Firefox6.default;
								}
								// Safari (desktop and mobile).
								else if (_bowser2.default.check({ safari: '13' }, true, ua)) {
										Device._flag = 'safari';
										Device._handlerClass = _Safari2.default;
									} else if (_bowser2.default.check({ safari: '12.1' }, true, ua)) {
										Device._flag = 'safari';
										Device._handlerClass = _Safari4.default;
									} else if (_bowser2.default.check({ safari: '11' }, true, ua)) {
										Device._flag = 'safari';
										Device._handlerClass = _Safari6.default;
									}
									// Edge (desktop).
									else if (_bowser2.default.check({ msedge: '11' }, true, ua)) {
											Device._flag = 'msedge';
											Device._handlerClass = _Edge2.default;
										}
										// Opera (desktop and mobile).
										else if (_bowser2.default.check({ opera: '57' }, true, ua)) {
												Device._flag = 'opera';
												Device._handlerClass = _Chrome2.default;
											} else if (_bowser2.default.check({ opera: '44' }, true, ua)) {
												Device._flag = 'opera';
												Device._handlerClass = _Chrome8.default;
											}
											// Best effort for Chromium based browsers.
											else if (browser.chromium || browser.blink || browser.webkit) {
													logger.debug('best effort Chrome based browser detection [name:"%s"]', browser.name);

													Device._flag = 'chrome';

													var match = ua.match(/(?:(?:Chrome|Chromium))[ /](\w+)/i);

													if (match) {
														var version = Number(match[1]);

														if (version >= 70) Device._handlerClass = _Chrome2.default;else if (version >= 69) Device._handlerClass = _Chrome4.default;else if (version >= 67) Device._handlerClass = _Chrome6.default;else Device._handlerClass = _Chrome8.default;
													} else {
														Device._handlerClass = _Chrome2.default;
													}
												}

					if (Device.isSupported()) {
						logger.debug('browser supported [flag:%s, name:"%s", version:%s, handler:%s]', Device._flag, Device._name, Device._version, Device._handlerClass.tag);
					} else {
						logger.warn('browser not supported [name:%s, version:%s]', Device._name, Device._version);
					}
				}
				// Otherwise fail.
				else {
						logger.warn('device not supported');
					}
		}
	}, {
		key: 'Handler',
		get: function get() {
			if (!Device._detected) Device._detect();

			return Device._handlerClass;
		}
	}]);
	return Device;
}();

// Initialized flag.
// @type {Boolean}


exports.default = Device;
Device._detected = false;

// Device flag.
// @type {String}
Device._flag = undefined;

// Device name.
// @type {String}
Device._name = undefined;

// Device version.
// @type {String}
Device._version = undefined;

// bowser module Object.
// @type {Object}
Device._bowser = undefined;

// WebRTC hander for this device.
// @type {Class}
Device._handlerClass = null;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/_webpack@4.41.6@webpack/buildin/global.js */ "./node_modules/_webpack@4.41.6@webpack/buildin/global.js")))

/***/ }),

/***/ "./lib/mslib/EnhancedEventEmitter.js":
/*!*******************************************!*\
  !*** ./lib/mslib/EnhancedEventEmitter.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _promise = __webpack_require__(/*! babel-runtime/core-js/promise */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js");

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

var _events = __webpack_require__(/*! events */ "./node_modules/_events@3.1.0@events/events.js");

var _Logger = __webpack_require__(/*! ./Logger */ "./lib/mslib/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EnhancedEventEmitter = function (_EventEmitter) {
	(0, _inherits3.default)(EnhancedEventEmitter, _EventEmitter);

	function EnhancedEventEmitter(logger) {
		(0, _classCallCheck3.default)(this, EnhancedEventEmitter);

		var _this = (0, _possibleConstructorReturn3.default)(this, (EnhancedEventEmitter.__proto__ || (0, _getPrototypeOf2.default)(EnhancedEventEmitter)).call(this));

		_this.setMaxListeners(Infinity);

		_this._logger = logger || new _Logger2.default('EnhancedEventEmitter');
		return _this;
	}

	(0, _createClass3.default)(EnhancedEventEmitter, [{
		key: 'safeEmit',
		value: function safeEmit(event) {
			try {
				for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
					args[_key - 1] = arguments[_key];
				}

				this.emit.apply(this, [event].concat(args));
			} catch (error) {
				this._logger.error('safeEmit() | event listener threw an error [event:%s]:%o', event, error);
			}
		}
	}, {
		key: 'safeEmitAsPromise',
		value: function safeEmitAsPromise(event) {
			var _this2 = this;

			for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
				args[_key2 - 1] = arguments[_key2];
			}

			return new _promise2.default(function (resolve, reject) {
				var callback = function callback(result) {
					resolve(result);
				};

				var errback = function errback(error) {
					_this2._logger.error('safeEmitAsPromise() | errback called [event:%s]:%o', event, error);

					reject(error);
				};

				_this2.safeEmit.apply(_this2, [event].concat(args, [callback, errback]));
			});
		}
	}]);
	return EnhancedEventEmitter;
}(_events.EventEmitter);

exports.default = EnhancedEventEmitter;

/***/ }),

/***/ "./lib/mslib/Logger.js":
/*!*****************************!*\
  !*** ./lib/mslib/Logger.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _debug = __webpack_require__(/*! debug */ "./node_modules/_debug@4.1.1@debug/src/browser.js");

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var APP_NAME = 'mediasoup-client';

var Logger = function () {
	function Logger(prefix) {
		(0, _classCallCheck3.default)(this, Logger);

		if (prefix) {
			this._debug = (0, _debug2.default)(APP_NAME + ':' + prefix);
			this._warn = (0, _debug2.default)(APP_NAME + ':WARN:' + prefix);
			this._error = (0, _debug2.default)(APP_NAME + ':ERROR:' + prefix);
		} else {
			this._debug = (0, _debug2.default)(APP_NAME);
			this._warn = (0, _debug2.default)(APP_NAME + ':WARN');
			this._error = (0, _debug2.default)(APP_NAME + ':ERROR');
		}

		/* eslint-disable no-console */
		this._debug.log = console.info.bind(console);
		this._warn.log = console.warn.bind(console);
		this._error.log = console.error.bind(console);
		/* eslint-enable no-console */
	}

	(0, _createClass3.default)(Logger, [{
		key: 'debug',
		get: function get() {
			return this._debug;
		}
	}, {
		key: 'warn',
		get: function get() {
			return this._warn;
		}
	}, {
		key: 'error',
		get: function get() {
			return this._error;
		}
	}]);
	return Logger;
}();

exports.default = Logger;

/***/ }),

/***/ "./lib/mslib/Peer.js":
/*!***************************!*\
  !*** ./lib/mslib/Peer.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _from = __webpack_require__(/*! babel-runtime/core-js/array/from */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/array/from.js");

var _from2 = _interopRequireDefault(_from);

var _getIterator2 = __webpack_require__(/*! babel-runtime/core-js/get-iterator */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/get-iterator.js");

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _map = __webpack_require__(/*! babel-runtime/core-js/map */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/map.js");

var _map2 = _interopRequireDefault(_map);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

var _Logger = __webpack_require__(/*! ./Logger */ "./lib/mslib/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

var _EnhancedEventEmitter2 = __webpack_require__(/*! ./EnhancedEventEmitter */ "./lib/mslib/EnhancedEventEmitter.js");

var _EnhancedEventEmitter3 = _interopRequireDefault(_EnhancedEventEmitter2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = new _Logger2.default('Peer');

var Peer = function (_EnhancedEventEmitter) {
	(0, _inherits3.default)(Peer, _EnhancedEventEmitter);

	/**
  * @private
  *
  * @emits {consumer: Consumer} newconsumer
  * @emits {originator: String, [appData]: Any} close
  *
  * @emits @close
  */
	function Peer(name, appData) {
		(0, _classCallCheck3.default)(this, Peer);

		// Name.
		// @type {String}
		var _this = (0, _possibleConstructorReturn3.default)(this, (Peer.__proto__ || (0, _getPrototypeOf2.default)(Peer)).call(this, logger));

		_this._name = name;

		// Closed flag.
		// @type {Boolean}
		_this._closed = false;

		// App custom data.
		// @type {Any}
		_this._appData = appData;

		// Map of Consumers indexed by id.
		// @type {map<Number, Consumer>}
		_this._consumers = new _map2.default();
		return _this;
	}

	/**
  * Peer name.
  *
  * @return {String}
  */


	(0, _createClass3.default)(Peer, [{
		key: 'close',


		/**
   * Closes the Peer.
   * This is called when the local Room is closed.
   *
   * @private
   */
		value: function close() {
			logger.debug('close()');

			if (this._closed) return;

			this._closed = true;

			this.emit('@close');
			this.safeEmit('close', 'local');

			// Close all the Consumers.
			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = (0, _getIterator3.default)(this._consumers.values()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var consumer = _step.value;

					consumer.close();
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}
		}

		/**
   * The remote Peer or Room was closed.
   * Invoked via remote notification.
   *
   * @private
   *
   * @param {Any} [appData] - App custom data.
   */

	}, {
		key: 'remoteClose',
		value: function remoteClose(appData) {
			logger.debug('remoteClose()');

			if (this._closed) return;

			this._closed = true;

			this.emit('@close');
			this.safeEmit('close', 'remote', appData);

			// Close all the Consumers.
			var _iteratorNormalCompletion2 = true;
			var _didIteratorError2 = false;
			var _iteratorError2 = undefined;

			try {
				for (var _iterator2 = (0, _getIterator3.default)(this._consumers.values()), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
					var consumer = _step2.value;

					consumer.remoteClose();
				}
			} catch (err) {
				_didIteratorError2 = true;
				_iteratorError2 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion2 && _iterator2.return) {
						_iterator2.return();
					}
				} finally {
					if (_didIteratorError2) {
						throw _iteratorError2;
					}
				}
			}
		}

		/**
   * Get the Consumer with the given id.
   *
   * @param {Number} id
   *
   * @return {Consumer}
   */

	}, {
		key: 'getConsumerById',
		value: function getConsumerById(id) {
			return this._consumers.get(id);
		}

		/**
   * Add an associated Consumer.
   *
   * @private
   *
   * @param {Consumer} consumer
   */

	}, {
		key: 'addConsumer',
		value: function addConsumer(consumer) {
			var _this2 = this;

			if (this._consumers.has(consumer.id)) throw new Error('Consumer already exists [id:' + consumer.id + ']');

			// Store it.
			this._consumers.set(consumer.id, consumer);

			// Handle it.
			consumer.on('@close', function () {
				_this2._consumers.delete(consumer.id);
			});

			// Emit event.
			this.safeEmit('newconsumer', consumer);
		}
	}, {
		key: 'name',
		get: function get() {
			return this._name;
		}

		/**
   * Whether the Peer is closed.
   *
   * @return {Boolean}
   */

	}, {
		key: 'closed',
		get: function get() {
			return this._closed;
		}

		/**
   * App custom data.
   *
   * @return {Any}
   */

	}, {
		key: 'appData',
		get: function get() {
			return this._appData;
		}

		/**
   * The list of Consumers.
   *
   * @return {Array<Consumer>}
   */

	}, {
		key: 'consumers',
		get: function get() {
			return (0, _from2.default)(this._consumers.values());
		}
	}]);
	return Peer;
}(_EnhancedEventEmitter3.default);

exports.default = Peer;

/***/ }),

/***/ "./lib/mslib/Producer.js":
/*!*******************************!*\
  !*** ./lib/mslib/Producer.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _promise = __webpack_require__(/*! babel-runtime/core-js/promise */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js");

var _promise2 = _interopRequireDefault(_promise);

var _assign = __webpack_require__(/*! babel-runtime/core-js/object/assign */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/assign.js");

var _assign2 = _interopRequireDefault(_assign);

var _typeof2 = __webpack_require__(/*! babel-runtime/helpers/typeof */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/typeof.js");

var _typeof3 = _interopRequireDefault(_typeof2);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

var _Logger = __webpack_require__(/*! ./Logger */ "./lib/mslib/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

var _EnhancedEventEmitter2 = __webpack_require__(/*! ./EnhancedEventEmitter */ "./lib/mslib/EnhancedEventEmitter.js");

var _EnhancedEventEmitter3 = _interopRequireDefault(_EnhancedEventEmitter2);

var _errors = __webpack_require__(/*! ./errors */ "./lib/mslib/errors.js");

var _utils = __webpack_require__(/*! ./utils */ "./lib/mslib/utils.js");

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_STATS_INTERVAL = 1000;
var SIMULCAST_DEFAULT = {
	low: 100000,
	medium: 300000,
	high: 1500000
};

var logger = new _Logger2.default('Producer');

var Producer = function (_EnhancedEventEmitter) {
	(0, _inherits3.default)(Producer, _EnhancedEventEmitter);

	/**
  * @private
  *
  * @emits {originator: String, [appData]: Any} pause
  * @emits {originator: String, [appData]: Any} resume
  * @emits {stats: Object} stats
  * @emits handled
  * @emits unhandled
  * @emits trackended
  * @emits {originator: String, [appData]: Any} close
  *
  * @emits {originator: String, [appData]: Any} @close
  */
	function Producer(track, options, appData) {
		(0, _classCallCheck3.default)(this, Producer);

		// Id.
		// @type {Number}
		var _this = (0, _possibleConstructorReturn3.default)(this, (Producer.__proto__ || (0, _getPrototypeOf2.default)(Producer)).call(this, logger));

		_this._id = utils.randomNumber();

		// Closed flag.
		// @type {Boolean}
		_this._closed = false;

		// Original track.
		// @type {MediaStreamTrack}
		_this._originalTrack = track;

		// Track cloned from the original one (if supported).
		// @type {MediaStreamTrack}
		try {
			_this._track = track.clone();
		} catch (error) {
			_this._track = track;
		}

		// App custom data.
		// @type {Any}
		_this._appData = appData;

		// Simulcast.
		// @type {Object|false}
		_this._simulcast = false;

		if ((0, _typeof3.default)(options.simulcast) === 'object') _this._simulcast = (0, _assign2.default)({}, SIMULCAST_DEFAULT, options.simulcast);else if (options.simulcast === true) _this._simulcast = (0, _assign2.default)({}, SIMULCAST_DEFAULT);

		_this._audioProfile = null;
		if ((0, _typeof3.default)(options.audioProfile) == 'object') _this._audioProfile = options.audioProfile;

		// @type {codecOptions}
		// {
		//   videoGoogleStartBitrate: Number,
		//   videoGoogleMaxBitrate: Number,
		//   videoGoogleMinBitrate: Number
		// }
		_this._videoBitrateOptions = null;
		if ((0, _typeof3.default)(options.codecOptions) === 'object') _this._videoBitrateOptions = options.codecOptions;

		// Associated Transport.
		// @type {Transport}
		_this._transport = null;

		// RTP parameters.
		// @type {RTCRtpParameters}
		_this._rtpParameters = null;

		// Locally paused flag.
		// @type {Boolean}
		_this._locallyPaused = !_this._track.enabled;

		// Remotely paused flag.
		// @type {Boolean}
		_this._remotelyPaused = false;

		// Periodic stats flag.
		// @type {Boolean}
		_this._statsEnabled = false;

		// Periodic stats gathering interval (milliseconds).
		// @type {Number}
		_this._statsInterval = DEFAULT_STATS_INTERVAL;

		// Handle the effective track.
		_this._handleTrack();
		return _this;
	}

	/**
  * Producer id.
  *
  * @return {Number}
  */


	(0, _createClass3.default)(Producer, [{
		key: 'close',


		/**
   * Closes the Producer.
   *
   * @param {Any} [appData] - App custom data.
   */
		value: function close(appData) {
			logger.debug('close()');

			if (this._closed) return;

			this._closed = true;

			if (this._statsEnabled) {
				this._statsEnabled = false;

				if (this.transport) {
					this.transport.disableProducerStats(this);
				}
			}

			if (this._transport) this._transport.removeProducer(this, 'local', appData);

			this._destroy();

			this.emit('@close', 'local', appData);
			this.safeEmit('close', 'local', appData);
		}

		/**
   * My remote Producer was closed.
   * Invoked via remote notification.
   *
   * @private
   *
   * @param {Any} [appData] - App custom data.
   */

	}, {
		key: 'remoteClose',
		value: function remoteClose(appData) {
			logger.debug('remoteClose()');

			if (this._closed) return;

			this._closed = true;

			if (this._transport) this._transport.removeProducer(this, 'remote', appData);

			this._destroy();

			this.emit('@close', 'remote', appData);
			this.safeEmit('close', 'remote', appData);
		}
	}, {
		key: '_destroy',
		value: function _destroy() {
			this._transport = false;
			this._rtpParameters = null;

			try {
				this._track.stop();
			} catch (error) {}
		}

		/**
   * Sends RTP.
   *
   * @param {transport} Transport instance.
   *
   * @return {Promise}
   */

	}, {
		key: 'send',
		value: function send(transport) {
			var _this2 = this;

			logger.debug('send() [transport:%o]', transport);

			if (this._closed) return _promise2.default.reject(new _errors.InvalidStateError('Producer closed'));else if (this._transport) return _promise2.default.reject(new Error('already handled by a Transport'));else if ((typeof transport === 'undefined' ? 'undefined' : (0, _typeof3.default)(transport)) !== 'object') return _promise2.default.reject(new TypeError('invalid Transport'));

			if (this._originalTrack.kind === 'audio') {
				transport._audioSent = true;
			} else if (this._originalTrack.kind === 'video') {
				transport._videoSent = true;
			}

			this._transport = transport;

			return transport.addProducer(this).then(function () {
				transport.once('@close', function () {
					if (_this2._closed || _this2._transport !== transport) return;

					_this2._transport.removeProducer(_this2, 'local');

					_this2._transport = null;
					_this2._rtpParameters = null;

					_this2.safeEmit('unhandled');
				});

				_this2.safeEmit('handled');

				if (_this2._statsEnabled) transport.enableProducerStats(_this2, _this2._statsInterval);
			}).catch(function (error) {
				_this2._transport = null;

				throw error;
			});
		}

		/**
   * Pauses sending media.
   *
   * @param {Any} [appData] - App custom data.
   *
   * @return {Boolean} true if paused.
   */

	}, {
		key: 'pause',
		value: function pause(appData) {
			logger.debug('pause()');

			if (this._closed) {
				// logger.error('pause() | Producer closed');

				return false;
			} else if (this._locallyPaused) {
				return true;
			}

			this._locallyPaused = true;
			this._track.enabled = false;

			if (this._transport) this._transport.pauseProducer(this, appData);

			this.safeEmit('pause', 'local', appData);

			// Return true if really paused.
			return this.paused;
		}

		/**
   * My remote Producer was paused.
   * Invoked via remote notification.
   *
   * @private
   *
   * @param {Any} [appData] - App custom data.
   */

	}, {
		key: 'remotePause',
		value: function remotePause(appData) {
			logger.debug('remotePause()');

			if (this._closed || this._remotelyPaused) return;

			this._remotelyPaused = true;
			this._track.enabled = false;

			this.safeEmit('pause', 'remote', appData);
		}

		/**
   * Resumes sending media.
   *
   * @param {Any} [appData] - App custom data.
   *
   * @return {Boolean} true if not paused.
   */

	}, {
		key: 'resume',
		value: function resume(appData) {
			logger.debug('resume()');

			if (this._closed) {
				// logger.error('resume() | Producer closed');

				return false;
			} else if (!this._locallyPaused) {
				return true;
			}

			this._locallyPaused = false;

			if (!this._remotelyPaused) this._track.enabled = true;

			if (this._transport) this._transport.resumeProducer(this, appData);

			this.safeEmit('resume', 'local', appData);

			// Return true if not paused.
			return !this.paused;
		}

		/**
   * My remote Producer was resumed.
   * Invoked via remote notification.
   *
   * @private
   *
   * @param {Any} [appData] - App custom data.
   */

	}, {
		key: 'remoteResume',
		value: function remoteResume(appData) {
			logger.debug('remoteResume()');

			if (this._closed || !this._remotelyPaused) return;

			this._remotelyPaused = false;

			if (!this._locallyPaused) this._track.enabled = true;

			this.safeEmit('resume', 'remote', appData);
		}

		/**
   * Replaces the current track with a new one.
   *
   * @param {MediaStreamTrack} track - New track.
   *
   * @return {Promise} Resolves with the new track itself.
   */

	}, {
		key: 'replaceTrack',
		value: function replaceTrack(track) {
			var _this3 = this;

			logger.debug('replaceTrack() [track:%o]', track);

			if (this._closed) return _promise2.default.reject(new _errors.InvalidStateError('Producer closed'));else if (!track) return _promise2.default.reject(new TypeError('no track given'));else if (track.readyState === 'ended') return _promise2.default.reject(new Error('track.readyState is "ended"'));

			var clonedTrack = void 0;

			try {
				clonedTrack = track.clone();
			} catch (error) {
				clonedTrack = track;
			}

			return _promise2.default.resolve().then(function () {
				// If this Producer is handled by a Transport, we need to tell it about
				// the new track.
				if (_this3._transport) return _this3._transport.replaceProducerTrack(_this3, clonedTrack);
			}).then(function () {
				// Stop the previous track.
				try {
					_this3._track.onended = null;_this3._track.stop();
				} catch (error) {}

				// If this Producer was locally paused/resumed and the state of the new
				// track does not match, fix it.
				if (!_this3.paused) clonedTrack.enabled = true;else clonedTrack.enabled = false;

				// Set the new tracks.
				_this3._originalTrack = track;
				_this3._track = clonedTrack;

				// Handle the effective track.
				_this3._handleTrack();

				// Return the new track.
				return _this3._track;
			});
		}
	}, {
		key: 'updateTrack',
		value: function updateTrack(track, codecOptions) {
			this.setCodecOption(codecOptions);
			this._transport.updateTrack(this, track);
		}
	}, {
		key: 'setCodecOption',
		value: function setCodecOption(codecOptions) {
			this._videoBitrateOptions = {
				videoGoogleStartBitrate: codecOptions.idealBandwidth,
				videoGoogleMaxBitrate: codecOptions.maxBandwidth,
				videoGoogleMinBitrate: codecOptions.minBandwidth
			};
		}

		// 

	}, {
		key: 'setRtpParameters',


		/**
   * Set/update RTP parameters.
   *
   * @private
   *
   * @param {RTCRtpParameters} rtpParameters
   */
		value: function setRtpParameters(rtpParameters) {
			this._rtpParameters = rtpParameters;
		}

		/**
   * Enables periodic stats retrieval.
   */

	}, {
		key: 'enableStats',
		value: function enableStats() {
			var interval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_STATS_INTERVAL;

			logger.debug('enableStats() [interval:%s]', interval);

			if (this._closed) {
				// logger.error('enableStats() | Producer closed');

				return;
			}

			if (this._statsEnabled) return;

			if (typeof interval !== 'number' || interval < 1000) this._statsInterval = DEFAULT_STATS_INTERVAL;else this._statsInterval = interval;

			this._statsEnabled = true;

			if (this._transport) this._transport.enableProducerStats(this, this._statsInterval);
		}

		/**
   * Disables periodic stats retrieval.
   */

	}, {
		key: 'disableStats',
		value: function disableStats() {
			// logger.debug('disableStats()');

			if (this._closed) {
				// logger.error('disableStats() | Producer closed');

				return;
			}

			if (!this._statsEnabled) return;

			this._statsEnabled = false;

			if (this._transport) this._transport.disableProducerStats(this);
		}

		/**
   * Receive remote stats.
   *
   * @private
   *
   * @param {Object} stats
   */

	}, {
		key: 'enableInternalStats',
		value: function enableInternalStats() {
			var _this4 = this;

			var interval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_STATS_INTERVAL;
			logger.debug('enableInternalStats() [interval:%s]', interval);

			if (this._closed) {
				// logger.error('enableInternalStats() | Producer closed');
				return;
			}

			if (this._internalStatsEnabled) return;
			if (typeof interval !== 'number' || interval < 1000) this._interanlStatsInterval = DEFAULT_STATS_INTERVAL;else this._statsInterval = interval;
			this._internalStatsEnabled = true;
			if (this._transport) {
				this._internalTimer = setInterval(function () {
					return _this4.getStats().then(function (s) {
						_this4.emit('internalStats', s);
					});
				}, interval);
			}
		}
	}, {
		key: 'disableInternalStats',
		value: function disableInternalStats() {
			if (this._internalStatsEnabled) {
				clearInterval(this._internalTimer);
			}

			this._internalTimer = null;
			this._internalStatsEnabled = false;
		}
	}, {
		key: 'remoteStats',
		value: function remoteStats(stats) {
			this.safeEmit('stats', stats);
		}

		/**
   * Get producer stats.
   *
   * @private
   *
   * @param {Object} stats
   */

	}, {
		key: 'getStats',
		value: function getStats() {
			return this.transport.getStats(this.track);
		}
		/**
   * @private
   */

	}, {
		key: '_handleTrack',
		value: function _handleTrack() {
			var _this5 = this;

			// If the cloned track is closed (for example if the desktop sharing is closed
			// via chrome UI) notify the app and let it decide wheter to close the Producer
			// or not.
			this._track.onended = function () {
				if (_this5._closed) return;

				logger.warn('track "ended" event');

				_this5.safeEmit('trackended');
			};
		}
	}, {
		key: 'id',
		get: function get() {
			return this._id;
		}

		/**
   * Whether the Producer is closed.
   *
   * @return {Boolean}
   */

	}, {
		key: 'closed',
		get: function get() {
			return this._closed;
		}

		/**
   * Media kind.
   *
   * @return {String}
   */

	}, {
		key: 'kind',
		get: function get() {
			return this._track.kind;
		}

		/**
   * The associated track.
   *
   * @return {MediaStreamTrack}
   */

	}, {
		key: 'track',
		get: function get() {
			return this._track;
		}

		/**
   * The associated original track.
   *
   * @return {MediaStreamTrack}
   */

	}, {
		key: 'originalTrack',
		get: function get() {
			return this._originalTrack;
		}

		/**
   * Simulcast settings.
   *
   * @return {Object|false}
   */

	}, {
		key: 'simulcast',
		get: function get() {
			return this._simulcast;
		}

		/**
   * App custom data.
   *
   * @return {Any}
   */

	}, {
		key: 'appData',
		get: function get() {
			return this._appData;
		}

		/**
   * Associated Transport.
   *
   * @return {Transport}
   */

	}, {
		key: 'transport',
		get: function get() {
			return this._transport;
		}

		/**
   * RTP parameters.
   *
   * @return {RTCRtpParameters}
   */

	}, {
		key: 'rtpParameters',
		get: function get() {
			return this._rtpParameters;
		}

		/**
   * Whether the Producer is locally paused.
   *
   * @return {Boolean}
   */

	}, {
		key: 'locallyPaused',
		get: function get() {
			return this._locallyPaused;
		}

		/**
   * Whether the Producer is remotely paused.
   *
   * @return {Boolean}
   */

	}, {
		key: 'remotelyPaused',
		get: function get() {
			return this._remotelyPaused;
		}

		/**
   * Whether the Producer is paused.
   *
   * @return {Boolean}
   */

	}, {
		key: 'paused',
		get: function get() {
			return this._locallyPaused || this._remotelyPaused;
		}
	}, {
		key: 'videoBitrateOptions',
		get: function get() {
			return this._videoBitrateOptions;
		}

		// 

	}, {
		key: 'audioProfile',
		get: function get() {
			return this._audioProfile;
		}
	}]);
	return Producer;
}(_EnhancedEventEmitter3.default);

exports.default = Producer;

/***/ }),

/***/ "./lib/mslib/Room.js":
/*!***************************!*\
  !*** ./lib/mslib/Room.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _from = __webpack_require__(/*! babel-runtime/core-js/array/from */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/array/from.js");

var _from2 = _interopRequireDefault(_from);

var _assign = __webpack_require__(/*! babel-runtime/core-js/object/assign */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/assign.js");

var _assign2 = _interopRequireDefault(_assign);

var _typeof2 = __webpack_require__(/*! babel-runtime/helpers/typeof */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/typeof.js");

var _typeof3 = _interopRequireDefault(_typeof2);

var _getIterator2 = __webpack_require__(/*! babel-runtime/core-js/get-iterator */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/get-iterator.js");

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _promise = __webpack_require__(/*! babel-runtime/core-js/promise */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js");

var _promise2 = _interopRequireDefault(_promise);

var _map = __webpack_require__(/*! babel-runtime/core-js/map */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/map.js");

var _map2 = _interopRequireDefault(_map);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

var _Logger = __webpack_require__(/*! ./Logger */ "./lib/mslib/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

var _EnhancedEventEmitter2 = __webpack_require__(/*! ./EnhancedEventEmitter */ "./lib/mslib/EnhancedEventEmitter.js");

var _EnhancedEventEmitter3 = _interopRequireDefault(_EnhancedEventEmitter2);

var _errors = __webpack_require__(/*! ./errors */ "./lib/mslib/errors.js");

var _ortc = __webpack_require__(/*! ./ortc */ "./lib/mslib/ortc.js");

var ortc = _interopRequireWildcard(_ortc);

var _Device = __webpack_require__(/*! ./Device */ "./lib/mslib/Device.js");

var _Device2 = _interopRequireDefault(_Device);

var _Transport = __webpack_require__(/*! ./Transport */ "./lib/mslib/Transport.js");

var _Transport2 = _interopRequireDefault(_Transport);

var _Producer = __webpack_require__(/*! ./Producer */ "./lib/mslib/Producer.js");

var _Producer2 = _interopRequireDefault(_Producer);

var _Peer = __webpack_require__(/*! ./Peer */ "./lib/mslib/Peer.js");

var _Peer2 = _interopRequireDefault(_Peer);

var _Consumer = __webpack_require__(/*! ./Consumer */ "./lib/mslib/Consumer.js");

var _Consumer2 = _interopRequireDefault(_Consumer);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = new _Logger2.default('Room');

var RoomState = {
	new: 'new',
	joining: 'joining',
	joined: 'joined',
	closed: 'closed'
};

/**
 * An instance of Room represents a remote multi conference and a local
 * peer that joins it.
 */

var Room = function (_EnhancedEventEmitter) {
	(0, _inherits3.default)(Room, _EnhancedEventEmitter);

	/**
  * Room class.
  *
  * @param {Object} [options]
  * @param {Object} [options.roomSettings] Remote room settings, including its RTP
  * capabilities, mandatory codecs, etc. If given, no 'queryRoom' request is sent
  * to the server to discover them.
  * @param {Number} [options.requestTimeout=10000] - Timeout for sent requests
  * (in milliseconds). Defaults to 10000 (10 seconds).
  * @param {Object} [options.transportOptions] - Options for Transport created in mediasoup.
  * @param {Array<RTCIceServer>} [options.turnServers] - Array of TURN servers.
  * @param {RTCIceTransportPolicy} [options.iceTransportPolicy] - ICE transport policy.
  * @param {Boolean} [options.spy] - Whether this is a spy peer.
  *
  * @throws {Error} if device is not supported.
  *
  * @emits {request: Object, callback: Function, errback: Function} request
  * @emits {notification: Object} notify
  * @emits {peer: Peer} newpeer
  * @emits {originator: String, [appData]: Any} close
  */
	function Room(options) {
		(0, _classCallCheck3.default)(this, Room);

		var _this = (0, _possibleConstructorReturn3.default)(this, (Room.__proto__ || (0, _getPrototypeOf2.default)(Room)).call(this, logger));

		logger.debug('constructor() [options:%o]', options);

		if (!_Device2.default.isSupported()) throw new Error('current browser/device not supported');

		options = options || {};

		// Computed settings.
		// @type {Object}
		_this._settings = {
			roomSettings: options.roomSettings,
			requestTimeout: options.requestTimeout || 30000,
			transportOptions: options.transportOptions || {},
			turnServers: options.turnServers || [],
			iceTransportPolicy: options.iceTransportPolicy || 'all',
			spy: Boolean(options.spy)
		};

		// Room state.
		// @type {Boolean}
		_this._state = RoomState.new;

		// My mediasoup Peer name.
		// @type {String}
		_this._peerName = null;

		// Map of Transports indexed by id.
		// @type {map<Number, Transport>}
		_this._transports = new _map2.default();

		// Map of Producers indexed by id.
		// @type {map<Number, Producer>}
		_this._producers = new _map2.default();

		// Map of Peers indexed by name.
		// @type {map<String, Peer>}
		_this._peers = new _map2.default();

		// Extended RTP capabilities.
		// @type {Object}
		_this._extendedRtpCapabilities = null;

		// Whether we can send audio/video based on computed extended RTP
		// capabilities.
		// @type {Object}
		_this._canSendByKind = {
			audio: false,
			video: false
		};
		return _this;
	}

	/**
  * Whether the Room is joined.
  *
  * @return {Boolean}
  */


	(0, _createClass3.default)(Room, [{
		key: 'getTransportById',


		/**
   * Get the Transport with the given id.
   *
   * @param {Number} id
   *
   * @return {Transport}
   */
		value: function getTransportById(id) {
			return this._transports.get(id);
		}

		/**
   * Get the Producer with the given id.
   *
   * @param {Number} id
   *
   * @return {Producer}
   */

	}, {
		key: 'getProducerById',
		value: function getProducerById(id) {
			return this._producers.get(id);
		}

		/**
   * Get the Peer with the given name.
   *
   * @param {String} name
   *
   * @return {Peer}
   */

	}, {
		key: 'getPeerByName',
		value: function getPeerByName(name) {
			return this._peers.get(name);
		}

		/**
   * Start the procedures to join a remote room.
   * @param {String} peerName - My mediasoup Peer name.
   * @param {Any} [appData] - App custom data.
   * @return {Promise}
   */

	}, {
		key: 'join',
		value: function join(peerName, appData) {
			var _this2 = this;

			logger.debug('join() [peerName:"%s"]', peerName);

			if (typeof peerName !== 'string') return _promise2.default.reject(new TypeError('invalid peerName'));

			if (this._state !== RoomState.new && this._state !== RoomState.closed) {
				return _promise2.default.reject(new _errors.InvalidStateError('invalid state "' + this._state + '"'));
			}

			this._peerName = peerName;
			this._state = RoomState.joining;

			var roomSettings = void 0;

			return _promise2.default.resolve().then(function () {
				// If Room settings are provided don't query them.
				if (_this2._settings.roomSettings) {
					roomSettings = _this2._settings.roomSettings;

					return;
				} else {
					return _this2._sendRequest('queryRoom', { target: 'room' }).then(function (response) {
						roomSettings = response;

						logger.debug('join() | got Room settings:%o', roomSettings);
					});
				}
			}).then(function () {
				return _Device2.default.Handler.getNativeRtpCapabilities();
			}).then(function (nativeRtpCapabilities) {
				logger.debug('join() | native RTP capabilities:%o', nativeRtpCapabilities);

				// Get extended RTP capabilities.
				_this2._extendedRtpCapabilities = ortc.getExtendedRtpCapabilities(nativeRtpCapabilities, roomSettings.rtpCapabilities);

				logger.debug('join() | extended RTP capabilities:%o', _this2._extendedRtpCapabilities);

				// Check unsupported codecs.
				var unsupportedRoomCodecs = ortc.getUnsupportedCodecs(roomSettings.rtpCapabilities, roomSettings.mandatoryCodecPayloadTypes, _this2._extendedRtpCapabilities);

				if (unsupportedRoomCodecs.length > 0) {
					logger.error('%s mandatory room codecs not supported:%o', unsupportedRoomCodecs.length, unsupportedRoomCodecs);

					throw new _errors.UnsupportedError('mandatory room codecs not supported', unsupportedRoomCodecs);
				}

				// Check whether we can send audio/video.
				_this2._canSendByKind.audio = ortc.canSend('audio', _this2._extendedRtpCapabilities);
				_this2._canSendByKind.video = ortc.canSend('video', _this2._extendedRtpCapabilities);

				// Generate our effective RTP capabilities for receiving media.
				var effectiveLocalRtpCapabilities = ortc.getRtpCapabilities(_this2._extendedRtpCapabilities);

				logger.debug('join() | effective local RTP capabilities for receiving:%o', effectiveLocalRtpCapabilities);

				var data = {
					target: 'room',
					peerName: _this2._peerName,
					rtpCapabilities: effectiveLocalRtpCapabilities,
					spy: _this2._settings.spy,
					appData: appData
				};

				return _this2._sendRequest('join', data).then(function (response) {
					return response.peers;
				});
			}).then(function (peers) {
				// Handle Peers already existing in the room.
				var _iteratorNormalCompletion = true;
				var _didIteratorError = false;
				var _iteratorError = undefined;

				try {
					for (var _iterator = (0, _getIterator3.default)(peers || []), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
						var peerData = _step.value;

						try {
							_this2._handlePeerData(peerData);
						} catch (error) {
							logger.error('join() | error handling Peer:%o', error);
						}
					}
				} catch (err) {
					_didIteratorError = true;
					_iteratorError = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion && _iterator.return) {
							_iterator.return();
						}
					} finally {
						if (_didIteratorError) {
							throw _iteratorError;
						}
					}
				}

				_this2._state = RoomState.joined;

				logger.debug('join() | joined the Room');

				// Return the list of already existing Peers.
				return _this2.peers;
			}).catch(function (error) {
				_this2._state = RoomState.new;

				throw error;
			});
		}

		/**
   * Leave the Room.
   *
   * @param {Any} [appData] - App custom data.
   */

	}, {
		key: 'leave',
		value: function leave(appData) {
			logger.debug('leave()');

			if (this.closed) return;

			// Send a notification.
			this._sendNotification('leave', { appData: appData });

			// Set closed state after sending the notification (otherwise the
			// notification won't be sent).
			this._state = RoomState.closed;

			this.safeEmit('close', 'local', appData);

			// Close all the Transports.
			var _iteratorNormalCompletion2 = true;
			var _didIteratorError2 = false;
			var _iteratorError2 = undefined;

			try {
				for (var _iterator2 = (0, _getIterator3.default)(this._transports.values()), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
					var transport = _step2.value;

					transport.close();
				}

				// Close all the Producers.
			} catch (err) {
				_didIteratorError2 = true;
				_iteratorError2 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion2 && _iterator2.return) {
						_iterator2.return();
					}
				} finally {
					if (_didIteratorError2) {
						throw _iteratorError2;
					}
				}
			}

			var _iteratorNormalCompletion3 = true;
			var _didIteratorError3 = false;
			var _iteratorError3 = undefined;

			try {
				for (var _iterator3 = (0, _getIterator3.default)(this._producers.values()), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
					var producer = _step3.value;

					producer.close();
				}

				// Close all the Peers.
			} catch (err) {
				_didIteratorError3 = true;
				_iteratorError3 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion3 && _iterator3.return) {
						_iterator3.return();
					}
				} finally {
					if (_didIteratorError3) {
						throw _iteratorError3;
					}
				}
			}

			var _iteratorNormalCompletion4 = true;
			var _didIteratorError4 = false;
			var _iteratorError4 = undefined;

			try {
				for (var _iterator4 = (0, _getIterator3.default)(this._peers.values()), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
					var peer = _step4.value;

					peer.close();
				}
			} catch (err) {
				_didIteratorError4 = true;
				_iteratorError4 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion4 && _iterator4.return) {
						_iterator4.return();
					}
				} finally {
					if (_didIteratorError4) {
						throw _iteratorError4;
					}
				}
			}
		}

		/**
   * The remote Room was closed or our remote Peer has been closed.
   * Invoked via remote notification or via API.
   *
   * @param {Any} [appData] - App custom data.
   */

	}, {
		key: 'remoteClose',
		value: function remoteClose(appData) {
			logger.debug('remoteClose()');

			if (this.closed) return;

			this._state = RoomState.closed;

			this.safeEmit('close', 'remote', appData);

			// Close all the Transports.
			var _iteratorNormalCompletion5 = true;
			var _didIteratorError5 = false;
			var _iteratorError5 = undefined;

			try {
				for (var _iterator5 = (0, _getIterator3.default)(this._transports.values()), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
					var transport = _step5.value;

					transport.remoteClose(null, { destroy: true });
				}

				// Close all the Producers.
			} catch (err) {
				_didIteratorError5 = true;
				_iteratorError5 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion5 && _iterator5.return) {
						_iterator5.return();
					}
				} finally {
					if (_didIteratorError5) {
						throw _iteratorError5;
					}
				}
			}

			var _iteratorNormalCompletion6 = true;
			var _didIteratorError6 = false;
			var _iteratorError6 = undefined;

			try {
				for (var _iterator6 = (0, _getIterator3.default)(this._producers.values()), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
					var producer = _step6.value;

					producer.remoteClose();
				}

				// Close all the Peers.
			} catch (err) {
				_didIteratorError6 = true;
				_iteratorError6 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion6 && _iterator6.return) {
						_iterator6.return();
					}
				} finally {
					if (_didIteratorError6) {
						throw _iteratorError6;
					}
				}
			}

			var _iteratorNormalCompletion7 = true;
			var _didIteratorError7 = false;
			var _iteratorError7 = undefined;

			try {
				for (var _iterator7 = (0, _getIterator3.default)(this._peers.values()), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
					var peer = _step7.value;

					peer.remoteClose();
				}
			} catch (err) {
				_didIteratorError7 = true;
				_iteratorError7 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion7 && _iterator7.return) {
						_iterator7.return();
					}
				} finally {
					if (_didIteratorError7) {
						throw _iteratorError7;
					}
				}
			}
		}

		/**
   * Whether we can send audio/video.
   *
   * @param {String} kind - 'audio' or 'video'.
   *
   * @return {Boolean}
   */

	}, {
		key: 'canSend',
		value: function canSend(kind) {
			if (kind !== 'audio' && kind !== 'video') throw new TypeError('invalid kind "' + kind + '"');

			if (!this.joined || this._settings.spy) return false;

			return this._canSendByKind[kind];
		}

		/**
   * Creates a Transport.
   *
   * @param {String} direction - Must be 'send' or 'recv'.
   * @param {Any} [appData] - App custom data.
   *
   * @return {Transport}
   *
   * @throws {InvalidStateError} if not joined.
   * @throws {TypeError} if wrong arguments.
   */

	}, {
		key: 'createTransport',
		value: function createTransport(direction, appData) {
			var _this3 = this;

			logger.debug('createTransport() [direction:%s]', direction);

			if (!this.joined) throw new _errors.InvalidStateError('invalid state "' + this._state + '"');else if (direction !== 'send' && direction !== 'recv') throw new TypeError('invalid direction "' + direction + '"');else if (direction === 'send' && this._settings.spy) throw new TypeError('a spy peer cannot send media to the room');

			// Create a new Transport.
			var transport = new _Transport2.default(direction, this._extendedRtpCapabilities, this._settings, appData);

			// Store it.
			this._transports.set(transport.id, transport);

			transport.on('@request', function (method, data, callback, errback) {
				_this3._sendRequest(method, data).then(callback).catch(errback);
			});

			transport.on('@notify', function (method, data) {
				_this3._sendNotification(method, data);
			});

			transport.on('@close', function () {
				_this3._transports.delete(transport.id);
			});

			return transport;
		}

		/**
   * Creates a Producer.
   *
   * @param {MediaStreamTrack} track
   * @param {Object} [options]
   * @param {Object} [options.simulcast]
   * @param {Any} [appData] - App custom data.
   *
   * @return {Producer}
   *
   * @throws {InvalidStateError} if not joined.
   * @throws {TypeError} if wrong arguments.
   * @throws {Error} if cannot send the given kindor we are a spy peer.
   */

	}, {
		key: 'createProducer',
		value: function createProducer(track, options, appData) {
			var _this4 = this;

			logger.debug('createProducer() [track:%o, options:%o]', track, options);

			if (!this.joined) throw new _errors.InvalidStateError('invalid state "' + this._state + '"');else if (this._settings.spy) throw new Error('a spy peer cannot send media to the room');else if (!track) throw new TypeError('no track given');else if (!this._canSendByKind[track.kind]) throw new Error('cannot send ' + track.kind);else if (track.readyState === 'ended') throw new Error('track.readyState is "ended"');

			options = options || {};

			// Create a new Producer.
			var producer = new _Producer2.default(track, options, appData);

			// Store it.
			this._producers.set(producer.id, producer);

			producer.on('@close', function () {
				_this4._producers.delete(producer.id);
			});

			return producer;
		}

		/**
   * Produce a ICE restart in all the Transports.
   */

	}, {
		key: 'restartIce',
		value: function restartIce(callback, errback) {
			if (!this.joined) {
				logger.warn('restartIce() | invalid state "' + this._state + '"');

				return;
			}

			var _iteratorNormalCompletion8 = true;
			var _didIteratorError8 = false;
			var _iteratorError8 = undefined;

			try {
				for (var _iterator8 = (0, _getIterator3.default)(this._transports.values()), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
					var transport = _step8.value;

					transport.restartIce(callback, errback);
				}
			} catch (err) {
				_didIteratorError8 = true;
				_iteratorError8 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion8 && _iterator8.return) {
						_iterator8.return();
					}
				} finally {
					if (_didIteratorError8) {
						throw _iteratorError8;
					}
				}
			}
		}

		/**
   * Provide the local Room with a notification generated by mediasoup server.
   *
   * @param {Object} notification
   */

	}, {
		key: 'receiveNotification',
		value: function receiveNotification(notification) {
			var _this5 = this;

			if (this.closed) return _promise2.default.reject(new _errors.InvalidStateError('Room closed'));else if ((typeof notification === 'undefined' ? 'undefined' : (0, _typeof3.default)(notification)) !== 'object') return _promise2.default.reject(new TypeError('wrong notification Object'));else if (notification.notification !== true) return _promise2.default.reject(new TypeError('not a notification'));else if (typeof notification.method !== 'string') return _promise2.default.reject(new TypeError('wrong/missing notification method'));

			var method = notification.method;


			if (method !== 'producerStats' && method !== 'consumerStats') {
				logger.debug('receiveNotification() [method:%s, notification:%o]', method, notification);
			}

			return _promise2.default.resolve().then(function () {
				switch (method) {
					case 'closed':
						{
							var appData = notification.appData;


							_this5.remoteClose(appData);

							break;
						}

					case 'transportClosed':
						{
							var id = notification.id,
							    _appData = notification.appData;

							var transport = _this5._transports.get(id);

							if (!transport) throw new Error('Transport not found [id:"' + id + '"]');

							transport.remoteClose(_appData, { destroy: false });

							break;
						}

					case 'transportStats':
						{
							var _id = notification.id,
							    stats = notification.stats;

							var _transport = _this5._transports.get(_id);

							if (!_transport) throw new Error('Transport not found [id:' + _id + ']');

							_transport.remoteStats(stats);

							break;
						}

					case 'newPeer':
						{
							var name = notification.name;


							if (_this5._peers.has(name)) throw new Error('Peer already exists [name:"' + name + '"]');

							var peerData = notification;

							_this5._handlePeerData(peerData);

							break;
						}

					case 'peerClosed':
						{
							var peerName = notification.name;
							var _appData2 = notification.appData;

							var peer = _this5._peers.get(peerName);

							if (!peer) throw new Error('no Peer found [name:"' + peerName + '"]');

							peer.remoteClose(_appData2);

							break;
						}

					case 'producerPaused':
						{
							var _id2 = notification.id,
							    _appData3 = notification.appData;

							var producer = _this5._producers.get(_id2);

							if (!producer) throw new Error('Producer not found [id:' + _id2 + ']');

							producer.remotePause(_appData3);

							break;
						}

					case 'producerResumed':
						{
							var _id3 = notification.id,
							    _appData4 = notification.appData;

							var _producer = _this5._producers.get(_id3);

							if (!_producer) throw new Error('Producer not found [id:' + _id3 + ']');

							_producer.remoteResume(_appData4);

							break;
						}

					case 'producerClosed':
						{
							var _id4 = notification.id,
							    _appData5 = notification.appData;

							var _producer2 = _this5._producers.get(_id4);

							if (!_producer2) throw new Error('Producer not found [id:' + _id4 + ']');

							_producer2.remoteClose(_appData5);

							break;
						}

					case 'producerStats':
						{
							var _id5 = notification.id,
							    _stats = notification.stats;

							var _producer3 = _this5._producers.get(_id5);

							if (!_producer3) throw new Error('Producer not found [id:' + _id5 + ']');

							_producer3.remoteStats(_stats);

							break;
						}

					case 'newConsumer':
						{
							var _peerName = notification.peerName;

							var _peer = _this5._peers.get(_peerName);

							if (!_peer) throw new Error('no Peer found [name:"' + _peerName + '"]');

							var consumerData = notification;

							_this5._handleConsumerData(consumerData, _peer);

							break;
						}

					case 'consumerClosed':
						{
							var _id6 = notification.id,
							    _peerName2 = notification.peerName,
							    _appData6 = notification.appData;

							var _peer2 = _this5._peers.get(_peerName2);

							if (!_peer2) throw new Error('no Peer found [name:"' + _peerName2 + '"]');

							var consumer = _peer2.getConsumerById(_id6);

							if (!consumer) throw new Error('Consumer not found [id:' + _id6 + ']');

							consumer.remoteClose(_appData6);

							break;
						}

					case 'consumerPaused':
						{
							var _id7 = notification.id,
							    _peerName3 = notification.peerName,
							    _appData7 = notification.appData;

							var _peer3 = _this5._peers.get(_peerName3);

							if (!_peer3) throw new Error('no Peer found [name:"' + _peerName3 + '"]');

							var _consumer = _peer3.getConsumerById(_id7);

							if (!_consumer) throw new Error('Consumer not found [id:' + _id7 + ']');

							_consumer.remotePause(_appData7);

							break;
						}

					case 'consumerResumed':
						{
							var _id8 = notification.id,
							    _peerName4 = notification.peerName,
							    _appData8 = notification.appData;

							var _peer4 = _this5._peers.get(_peerName4);

							if (!_peer4) throw new Error('no Peer found [name:"' + _peerName4 + '"]');

							var _consumer2 = _peer4.getConsumerById(_id8);

							if (!_consumer2) throw new Error('Consumer not found [id:' + _id8 + ']');

							_consumer2.remoteResume(_appData8);

							break;
						}

					case 'consumerPreferredProfileSet':
						{
							var _id9 = notification.id,
							    _peerName5 = notification.peerName,
							    profile = notification.profile;

							var _peer5 = _this5._peers.get(_peerName5);

							if (!_peer5) throw new Error('no Peer found [name:"' + _peerName5 + '"]');

							var _consumer3 = _peer5.getConsumerById(_id9);

							if (!_consumer3) throw new Error('Consumer not found [id:' + _id9 + ']');

							_consumer3.remoteSetPreferredProfile(profile);

							break;
						}

					case 'consumerEffectiveProfileChanged':
						{
							var _id10 = notification.id,
							    _peerName6 = notification.peerName,
							    _profile = notification.profile;

							var _peer6 = _this5._peers.get(_peerName6);

							if (!_peer6) throw new Error('no Peer found [name:"' + _peerName6 + '"]');

							var _consumer4 = _peer6.getConsumerById(_id10);

							if (!_consumer4) throw new Error('Consumer not found [id:' + _id10 + ']');

							_consumer4.remoteEffectiveProfileChanged(_profile);

							break;
						}

					case 'consumerStats':
						{
							var _id11 = notification.id,
							    _peerName7 = notification.peerName,
							    _stats2 = notification.stats;

							var _peer7 = _this5._peers.get(_peerName7);

							if (!_peer7) throw new Error('no Peer found [name:"' + _peerName7 + '"]');

							var _consumer5 = _peer7.getConsumerById(_id11);

							if (!_consumer5) throw new Error('Consumer not found [id:' + _id11 + ']');

							_consumer5.remoteStats(_stats2);

							break;
						}

					default:
						throw new Error('unknown notification method "' + method + '"');
				}
			}).catch(function (error) {
				logger.error('receiveNotification() failed [notification:%o]: %s', notification, error);
			});
		}
	}, {
		key: '_sendRequest',
		value: function _sendRequest(method, data) {
			var _this6 = this;

			var request = (0, _assign2.default)({ method: method, target: 'peer' }, data);

			// Should never happen.
			// Ignore if closed.
			if (this.closed) {
				logger.error('_sendRequest() | Room closed [method:%s, request:%o]', method, request);

				return _promise2.default.reject(new _errors.InvalidStateError('Room closed'));
			}

			logger.debug('_sendRequest() [method:%s, request:%o]', method, request);

			return new _promise2.default(function (resolve, reject) {
				var done = false;

				var timer = setTimeout(function () {
					logger.error('request failed [method:%s]: timeout', method);

					done = true;
					reject(new _errors.TimeoutError('timeout'));
				}, _this6._settings.requestTimeout);

				var callback = function callback(response) {
					if (done) return;

					done = true;
					clearTimeout(timer);

					if (_this6.closed) {
						logger.error('request failed [method:%s]: Room closed', method);

						reject(new Error('Room closed'));

						return;
					}

					logger.debug('request succeeded [method:%s, response:%o]', method, response);

					resolve(response);
				};

				var errback = function errback(error) {
					if (done) return;

					done = true;
					clearTimeout(timer);

					if (_this6.closed) {
						logger.error('request failed [method:%s]: Room closed', method);

						reject(new Error('Room closed'));

						return;
					}

					// Make sure message is an Error.
					if (!(error instanceof Error)) error = new Error(String(error));

					logger.error('request failed [method:%s]:%o', method, error);

					reject(error);
				};

				_this6.safeEmit('request', request, callback, errback);
			});
		}
	}, {
		key: '_sendNotification',
		value: function _sendNotification(method, data) {
			// Ignore if closed.
			if (this.closed) return;

			var notification = (0, _assign2.default)({ method: method, target: 'peer', notification: true }, data);

			logger.debug('_sendNotification() [method:%s, notification:%o]', method, notification);

			this.safeEmit('notify', notification);
		}
	}, {
		key: '_handlePeerData',
		value: function _handlePeerData(peerData) {
			var _this7 = this;

			var name = peerData.name,
			    consumers = peerData.consumers,
			    appData = peerData.appData;

			var peer = new _Peer2.default(name, appData);

			// Store it.
			this._peers.set(peer.name, peer);

			peer.on('@close', function () {
				_this7._peers.delete(peer.name);
			});

			// Add consumers.
			var _iteratorNormalCompletion9 = true;
			var _didIteratorError9 = false;
			var _iteratorError9 = undefined;

			try {
				for (var _iterator9 = (0, _getIterator3.default)(consumers), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
					var consumerData = _step9.value;

					try {
						this._handleConsumerData(consumerData, peer);
					} catch (error) {
						logger.error('error handling existing Consumer in Peer:%o', error);
					}
				}

				// If already joined emit event.
			} catch (err) {
				_didIteratorError9 = true;
				_iteratorError9 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion9 && _iterator9.return) {
						_iterator9.return();
					}
				} finally {
					if (_didIteratorError9) {
						throw _iteratorError9;
					}
				}
			}

			if (this.joined) this.safeEmit('newpeer', peer);
		}
	}, {
		key: '_handleConsumerData',
		value: function _handleConsumerData(producerData, peer) {
			var id = producerData.id,
			    kind = producerData.kind,
			    rtpParameters = producerData.rtpParameters,
			    paused = producerData.paused,
			    appData = producerData.appData;

			var consumer = new _Consumer2.default(id, kind, rtpParameters, peer, appData);
			var supported = ortc.canReceive(consumer.rtpParameters, this._extendedRtpCapabilities);

			if (supported) consumer.setSupported(true);

			if (paused) consumer.remotePause();

			peer.addConsumer(consumer);
		}
	}, {
		key: 'joined',
		get: function get() {
			return this._state === RoomState.joined;
		}

		/**
   * Whether the Room is closed.
   *
   * @return {Boolean}
   */

	}, {
		key: 'closed',
		get: function get() {
			return this._state === RoomState.closed;
		}

		/**
   * My mediasoup Peer name.
   *
   * @return {String}
   */

	}, {
		key: 'peerName',
		get: function get() {
			return this._peerName;
		}

		/**
   * The list of Transports.
   *
   * @return {Array<Transport>}
   */

	}, {
		key: 'transports',
		get: function get() {
			return (0, _from2.default)(this._transports.values());
		}

		/**
   * The list of Producers.
   *
   * @return {Array<Producer>}
   */

	}, {
		key: 'producers',
		get: function get() {
			return (0, _from2.default)(this._producers.values());
		}

		/**
   * The list of Peers.
   *
   * @return {Array<Peer>}
   */

	}, {
		key: 'peers',
		get: function get() {
			return (0, _from2.default)(this._peers.values());
		}
	}]);
	return Room;
}(_EnhancedEventEmitter3.default);

exports.default = Room;

/***/ }),

/***/ "./lib/mslib/Transport.js":
/*!********************************!*\
  !*** ./lib/mslib/Transport.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _promise = __webpack_require__(/*! babel-runtime/core-js/promise */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js");

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

var _Logger = __webpack_require__(/*! ./Logger */ "./lib/mslib/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

var _EnhancedEventEmitter2 = __webpack_require__(/*! ./EnhancedEventEmitter */ "./lib/mslib/EnhancedEventEmitter.js");

var _EnhancedEventEmitter3 = _interopRequireDefault(_EnhancedEventEmitter2);

var _errors = __webpack_require__(/*! ./errors */ "./lib/mslib/errors.js");

var _utils = __webpack_require__(/*! ./utils */ "./lib/mslib/utils.js");

var utils = _interopRequireWildcard(_utils);

var _Device = __webpack_require__(/*! ./Device */ "./lib/mslib/Device.js");

var _Device2 = _interopRequireDefault(_Device);

var _CommandQueue = __webpack_require__(/*! ./CommandQueue */ "./lib/mslib/CommandQueue.js");

var _CommandQueue2 = _interopRequireDefault(_CommandQueue);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_STATS_INTERVAL = 1000;

var logger = new _Logger2.default('Transport');

var Transport = function (_EnhancedEventEmitter) {
	(0, _inherits3.default)(Transport, _EnhancedEventEmitter);

	/**
  * @private
  *
  * @emits {state: String} connectionstatechange
  * @emits {stats: Object} stats
  * @emits {originator: String, [appData]: Any} close
  *
  * @emits {method: String, [data]: Object, callback: Function, errback: Function} @request
  * @emits {method: String, [data]: Object} @notify
  * @emits @close
  */
	function Transport(direction, extendedRtpCapabilities, settings, appData) {
		(0, _classCallCheck3.default)(this, Transport);

		var _this = (0, _possibleConstructorReturn3.default)(this, (Transport.__proto__ || (0, _getPrototypeOf2.default)(Transport)).call(this, logger));

		logger.debug('constructor() [direction:%s, extendedRtpCapabilities:%o]', direction, extendedRtpCapabilities);

		// Id.
		// @type {Number}
		_this._id = utils.randomNumber();

		// Closed flag.
		// @type {Boolean}
		_this._closed = false;

		// Direction.
		// @type {String}
		_this._direction = direction;

		// Room settings.
		// @type {Object}
		_this._settings = settings;

		// App custom data.
		// @type {Any}
		_this._appData = appData;

		// Periodic stats flag.
		// @type {Boolean}
		_this._statsEnabled = false;

		// Commands handler.
		// @type {CommandQueue}
		_this._commandQueue = new _CommandQueue2.default();

		// Device specific handler.
		_this._handler = new _Device2.default.Handler(direction, extendedRtpCapabilities, settings);

		// Transport state. Values can be:
		// 'new'/'connecting'/'connected'/'failed'/'disconnected'/'closed'
		// @type {String}
		_this._connectionState = 'new';

		// Distinct audio and video kind for sending meidaStream(consists of audio and video) convenience.
		// @type {Boolean}
		_this._audioSent = false; // is sent of this transport by audio track.

		// @type {Boolean}
		_this._videoSent = false; // is sent of this transport by video track.

		_this._commandQueue.on('exec', _this._execCommand.bind(_this));

		_this._handleHandler();
		return _this;
	}

	/**
  * Transport id.
  *
  * @return {Number}
  */


	(0, _createClass3.default)(Transport, [{
		key: 'close',


		/**
   * Close the Transport.
   *
   * @param {Any} [appData] - App custom data.
   */
		value: function close(appData) {
			logger.debug('close()');

			if (this._closed) return;

			this._closed = true;

			this._audioSent = false;
			this._videoSent = false;

			if (this._statsEnabled) {
				this._statsEnabled = false;
				this.disableStats();
			}

			this.safeEmit('@notify', 'closeTransport', { id: this._id, appData: appData });

			this.emit('@close');
			this.safeEmit('close', 'local', appData);

			this._destroy();
		}

		/**
   * My remote Transport was closed.
   * Invoked via remote notification.
   *
   * @private
   *
   * @param {Any} [appData] - App custom data.
   * @param {Object} destroy - Whether the local transport must be destroyed.
   */

	}, {
		key: 'remoteClose',
		value: function remoteClose(appData, _ref) {
			var destroy = _ref.destroy;

			logger.debug('remoteClose() [destroy:%s]', destroy);

			if (this._closed) return;

			if (!destroy) {
				this._handler.remoteClosed();

				return;
			}

			this._closed = true;
			this._audioSent = false;
			this._videoSent = false;

			this.emit('@close');
			this.safeEmit('close', 'remote', appData);

			this._destroy();
		}
	}, {
		key: '_destroy',
		value: function _destroy() {
			// Close the CommandQueue.
			this._commandQueue.close();

			// Close the handler.
			this._handler.close();
		}
	}, {
		key: 'restartIce',
		value: function restartIce(callback, errback) {
			var _this2 = this;

			logger.debug('restartIce()');

			if (this._closed) return;else if (this._connectionState === 'new') return;

			_promise2.default.resolve().then(function () {
				var data = {
					id: _this2._id
				};

				return _this2.safeEmitAsPromise('@request', 'restartTransport', data);
			}).then(function (response) {
				var remoteIceParameters = response.iceParameters;

				// Enqueue command.
				return _this2._commandQueue.push('restartIce', { remoteIceParameters: remoteIceParameters });
			}).catch(function (error) {
				if (errback) {
					errback(error);
				}

				logger.error('restartIce() | failed: %o', error);
			});
		}
	}, {
		key: 'enableStats',
		value: function enableStats() {
			var interval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_STATS_INTERVAL;

			logger.debug('enableStats() [interval:%s]', interval);

			if (typeof interval !== 'number' || interval < 1000) interval = DEFAULT_STATS_INTERVAL;

			this._statsEnabled = true;

			var data = {
				id: this._id,
				interval: interval
			};

			this.safeEmit('@notify', 'enableTransportStats', data);
		}
	}, {
		key: 'disableStats',
		value: function disableStats() {
			logger.debug('disableStats()');

			this._statsEnabled = false;

			var data = {
				id: this._id
			};

			this.safeEmit('@notify', 'disableTransportStats', data);
		}
	}, {
		key: '_handleHandler',
		value: function _handleHandler() {
			var _this3 = this;

			var handler = this._handler;

			handler.on('@connectionstatechange', function (state) {
				if (_this3._connectionState === state) return;

				logger.debug('Transport connection state changed to %s', state);

				_this3._connectionState = state;

				if (!_this3._closed) _this3.safeEmit('connectionstatechange', state);
			});

			handler.on('@needcreatetransport', function (transportLocalParameters, callback, errback) {
				var data = {
					id: _this3._id,
					direction: _this3._direction,
					options: _this3._settings.transportOptions,
					appData: _this3._appData
				};

				if (transportLocalParameters) {
					if (transportLocalParameters.dtlsParameters) data.dtlsParameters = transportLocalParameters.dtlsParameters;else if (transportLocalParameters.plainRtpParameters) data.plainRtpParameters = transportLocalParameters.plainRtpParameters;
				}

				_this3.safeEmit('@request', 'createTransport', data, callback, errback);
			});

			handler.on('@needupdatetransport', function (transportLocalParameters) {
				var data = {
					id: _this3._id
				};

				if (transportLocalParameters) {
					if (transportLocalParameters.dtlsParameters) data.dtlsParameters = transportLocalParameters.dtlsParameters;else if (transportLocalParameters.plainRtpParameters) data.plainRtpParameters = transportLocalParameters.plainRtpParameters;
				}

				_this3.safeEmit('@notify', 'updateTransport', data);
			});

			handler.on('@needupdateproducer', function (producer, rtpParameters) {
				var data = {
					id: producer.id,
					rtpParameters: rtpParameters
				};

				// Update Producer RTP parameters.
				producer.setRtpParameters(rtpParameters);

				// Notify the server.
				_this3.safeEmit('@notify', 'updateProducer', data);
			});
		}

		/**
   * Send the given Producer over this Transport.
   *
   * @private
   *
   * @param {Producer} producer
   *
   * @return {Promise}
   */

	}, {
		key: 'addProducer',
		value: function addProducer(producer) {
			logger.debug('addProducer() [producer:%o]', producer);

			if (this._closed) return _promise2.default.reject(new _errors.InvalidStateError('Transport closed'));else if (this._direction !== 'send') return _promise2.default.reject(new Error('not a sending Transport'));

			// Enqueue command.
			return this._commandQueue.push('addProducer', { producer: producer });
		}

		/**
   * @private
   */

	}, {
		key: 'removeProducer',
		value: function removeProducer(producer, originator, appData) {
			logger.debug('removeProducer() [producer:%o]', producer);

			// Enqueue command.
			if (!this._closed) {
				this._commandQueue.push('removeProducer', { producer: producer }).catch(function () {});
			}

			if (originator === 'local') this.safeEmit('@notify', 'closeProducer', { id: producer.id, appData: appData });
		}

		/**
   * @private
   */

	}, {
		key: 'pauseProducer',
		value: function pauseProducer(producer, appData) {
			logger.debug('pauseProducer() [producer:%o]', producer);

			var data = {
				id: producer.id,
				appData: appData
			};

			this.safeEmit('@notify', 'pauseProducer', data);
		}

		/**
   * @private
   */

	}, {
		key: 'resumeProducer',
		value: function resumeProducer(producer, appData) {
			logger.debug('resumeProducer() [producer:%o]', producer);

			var data = {
				id: producer.id,
				appData: appData
			};

			this.safeEmit('@notify', 'resumeProducer', data);
		}

		/**
   * @private
   *
   * @return {Promise}
   */

	}, {
		key: 'replaceProducerTrack',
		value: function replaceProducerTrack(producer, track) {
			logger.debug('replaceProducerTrack() [producer:%o]', producer);

			return this._commandQueue.push('replaceProducerTrack', { producer: producer, track: track });
		}

		/**
   * @private
   */

	}, {
		key: 'enableProducerStats',
		value: function enableProducerStats(producer, interval) {
			logger.debug('enableProducerStats() [producer:%o]', producer);

			var data = {
				id: producer.id,
				interval: interval
			};

			this.safeEmit('@notify', 'enableProducerStats', data);
		}

		/**
   * @private
   */

	}, {
		key: 'disableProducerStats',
		value: function disableProducerStats(producer) {
			logger.debug('disableProducerStats() [producer:%o]', producer);

			var data = {
				id: producer.id
			};

			this.safeEmit('@notify', 'disableProducerStats', data);
		}

		/**
   * Receive the given Consumer over this Transport.
   *
   * @private
   *
   * @param {Consumer} consumer
   *
   * @return {Promise} Resolves to a remote MediaStreamTrack.
   */

	}, {
		key: 'addConsumer',
		value: function addConsumer(consumer) {
			logger.debug('addConsumer() [consumer:%o]', consumer);

			if (this._closed) return _promise2.default.reject(new _errors.InvalidStateError('Transport closed'));else if (this._direction !== 'recv') return _promise2.default.reject(new Error('not a receiving Transport'));

			// Enqueue command.
			return this._commandQueue.push('addConsumer', { consumer: consumer });
		}

		/**
   * @private
   */

	}, {
		key: 'removeConsumer',
		value: function removeConsumer(consumer) {
			logger.debug('removeConsumer() [consumer:%o]', consumer);

			// Enqueue command.
			this._commandQueue.push('removeConsumer', { consumer: consumer }).catch(function () {});
		}

		/**
   * @private
   */

	}, {
		key: 'pauseConsumer',
		value: function pauseConsumer(consumer, appData) {
			logger.debug('pauseConsumer() [consumer:%o]', consumer);

			var data = {
				id: consumer.id,
				appData: appData
			};

			this.safeEmit('@notify', 'pauseConsumer', data);
		}

		/**
   * @private
   */

	}, {
		key: 'resumeConsumer',
		value: function resumeConsumer(consumer, appData) {
			logger.debug('resumeConsumer() [consumer:%o]', consumer);

			var data = {
				id: consumer.id,
				appData: appData
			};

			this.safeEmit('@notify', 'resumeConsumer', data);
		}

		/**
   * @private
   */

	}, {
		key: 'setConsumerPreferredProfile',
		value: function setConsumerPreferredProfile(consumer, profile) {
			logger.debug('setConsumerPreferredProfile() [consumer:%o]', consumer);

			var data = {
				id: consumer.id,
				profile: profile
			};

			this.safeEmit('@notify', 'setConsumerPreferredProfile', data);
		}

		/**
   * @private
   */

	}, {
		key: 'enableConsumerStats',
		value: function enableConsumerStats(consumer, interval) {
			logger.debug('enableConsumerStats() [consumer:%o]', consumer);

			var data = {
				id: consumer.id,
				interval: interval
			};

			this.safeEmit('@notify', 'enableConsumerStats', data);
		}

		/**
   * @private
   */

	}, {
		key: 'disableConsumerStats',
		value: function disableConsumerStats(consumer) {
			logger.debug('disableConsumerStats() [consumer:%o]', consumer);

			var data = {
				id: consumer.id
			};

			this.safeEmit('@notify', 'disableConsumerStats', data);
		}

		/**
   * Receive remote stats.
   *
   * @private
   *
   * @param {Object} stats
   */

	}, {
		key: 'remoteStats',
		value: function remoteStats(stats) {
			this.safeEmit('stats', stats);
		}

		/**
   * Get handler stats.
   *
   * @public
   *
   * @param {Object} selector
   */

	}, {
		key: 'getStats',
		value: function getStats(selector) {
			return this._handler.getPCStats(selector);
		}
	}, {
		key: 'removeTrack',
		value: function removeTrack(track) {
			return this._handler.removeTrack(track);
		}
	}, {
		key: 'audioSent',
		value: function audioSent() {
			return this._audioSent;
		}
	}, {
		key: 'videoSent',
		value: function videoSent() {
			return this._videoSent;
		}
	}, {
		key: 'updateTrack',
		value: function updateTrack(producer, track) {
			return this._handler.updateTrack(producer, track);
		}
	}, {
		key: '_execCommand',
		value: function _execCommand(command, promiseHolder) {
			var promise = void 0;

			try {
				switch (command.method) {
					case 'addProducer':
						{
							var producer = command.producer;


							promise = this._execAddProducer(producer);
							break;
						}

					case 'removeProducer':
						{
							var _producer = command.producer;


							promise = this._execRemoveProducer(_producer);
							break;
						}

					case 'replaceProducerTrack':
						{
							var _producer2 = command.producer,
							    track = command.track;


							promise = this._execReplaceProducerTrack(_producer2, track);
							break;
						}

					case 'addConsumer':
						{
							var consumer = command.consumer;


							promise = this._execAddConsumer(consumer);
							break;
						}

					case 'removeConsumer':
						{
							var _consumer = command.consumer;


							promise = this._execRemoveConsumer(_consumer);
							break;
						}

					case 'restartIce':
						{
							var remoteIceParameters = command.remoteIceParameters;


							promise = this._execRestartIce(remoteIceParameters);
							break;
						}

					default:
						{
							promise = _promise2.default.reject(new Error('unknown command method "' + command.method + '"'));
						}
				}
			} catch (error) {
				promise = _promise2.default.reject(error);
			}

			// Fill the given Promise holder.
			promiseHolder.promise = promise;
		}
	}, {
		key: '_execAddProducer',
		value: function _execAddProducer(producer) {
			var _this4 = this;

			logger.debug('_execAddProducer()');

			var producerRtpParameters = void 0;

			// Call the handler.
			return _promise2.default.resolve().then(function () {
				return _this4._handler.addProducer(producer);
			}).then(function (rtpParameters) {
				producerRtpParameters = rtpParameters;

				var data = {
					id: producer.id,
					kind: producer.kind,
					transportId: _this4._id,
					rtpParameters: rtpParameters,
					paused: producer.locallyPaused,
					appData: producer.appData
				};

				return _this4.safeEmitAsPromise('@request', 'createProducer', data);
			}).then(function () {
				producer.setRtpParameters(producerRtpParameters);
			});
		}
	}, {
		key: '_execRemoveProducer',
		value: function _execRemoveProducer(producer) {
			logger.debug('_execRemoveProducer()');

			// Call the handler.
			return this._handler.removeProducer(producer);
		}
	}, {
		key: '_execReplaceProducerTrack',
		value: function _execReplaceProducerTrack(producer, track) {
			logger.debug('_execReplaceProducerTrack()');

			// Call the handler.
			return this._handler.replaceProducerTrack(producer, track);
		}
	}, {
		key: '_execAddConsumer',
		value: function _execAddConsumer(consumer) {
			var _this5 = this;

			logger.debug('_execAddConsumer()');

			var consumerTrack = void 0;

			// Call the handler.
			return _promise2.default.resolve().then(function () {
				return _this5._handler.addConsumer(consumer);
			}).then(function (track) {
				consumerTrack = track;

				var data = {
					id: consumer.id,
					transportId: _this5.id,
					paused: consumer.locallyPaused,
					preferredProfile: consumer.preferredProfile
				};

				return _this5.safeEmitAsPromise('@request', 'enableConsumer', data);
			}).then(function (response) {
				var paused = response.paused,
				    preferredProfile = response.preferredProfile,
				    effectiveProfile = response.effectiveProfile;


				if (paused) consumer.remotePause();

				if (preferredProfile) consumer.remoteSetPreferredProfile(preferredProfile);

				if (effectiveProfile) consumer.remoteEffectiveProfileChanged(effectiveProfile);

				return consumerTrack;
			});
		}
	}, {
		key: '_execRemoveConsumer',
		value: function _execRemoveConsumer(consumer) {
			logger.debug('_execRemoveConsumer()');

			// Call the handler.
			return this._handler.removeConsumer(consumer);
		}
	}, {
		key: '_execRestartIce',
		value: function _execRestartIce(remoteIceParameters) {
			logger.debug('_execRestartIce()');

			// Call the handler.
			return this._handler.restartIce(remoteIceParameters);
		}
	}, {
		key: 'id',
		get: function get() {
			return this._id;
		}

		/**
   * Whether the Transport is closed.
   *
   * @return {Boolean}
   */

	}, {
		key: 'closed',
		get: function get() {
			return this._closed;
		}

		/**
   * Transport direction.
   *
   * @return {String}
   */

	}, {
		key: 'direction',
		get: function get() {
			return this._direction;
		}

		/**
   * App custom data.
   *
   * @return {Any}
   */

	}, {
		key: 'appData',
		get: function get() {
			return this._appData;
		}

		/**
   * Connection state.
   *
   * @return {String}
   */

	}, {
		key: 'connectionState',
		get: function get() {
			return this._connectionState;
		}

		/**
   * Device handler.
   *
   * @return {Handler}
   */

	}, {
		key: 'handler',
		get: function get() {
			return this._handler;
		}
	}]);
	return Transport;
}(_EnhancedEventEmitter3.default);

exports.default = Transport;

/***/ }),

/***/ "./lib/mslib/errors.js":
/*!*****************************!*\
  !*** ./lib/mslib/errors.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.UnsupportedError = exports.TimeoutError = exports.InvalidStateError = undefined;

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Error produced when calling a method in an invalid state.
 */
var InvalidStateError = exports.InvalidStateError = function (_Error) {
	(0, _inherits3.default)(InvalidStateError, _Error);

	function InvalidStateError(message) {
		(0, _classCallCheck3.default)(this, InvalidStateError);

		var _this = (0, _possibleConstructorReturn3.default)(this, (InvalidStateError.__proto__ || (0, _getPrototypeOf2.default)(InvalidStateError)).call(this, message));

		_this.name = 'InvalidStateError';

		if (Error.hasOwnProperty('captureStackTrace')) // Just in V8.
			Error.captureStackTrace(_this, InvalidStateError);else _this.stack = new Error(message).stack;
		return _this;
	}

	return InvalidStateError;
}(Error);

/**
 * Error produced when a Promise is rejected due to a timeout.
 */


var TimeoutError = exports.TimeoutError = function (_Error2) {
	(0, _inherits3.default)(TimeoutError, _Error2);

	function TimeoutError(message) {
		(0, _classCallCheck3.default)(this, TimeoutError);

		var _this2 = (0, _possibleConstructorReturn3.default)(this, (TimeoutError.__proto__ || (0, _getPrototypeOf2.default)(TimeoutError)).call(this, message));

		_this2.name = 'TimeoutError';

		if (Error.hasOwnProperty('captureStackTrace')) // Just in V8.
			Error.captureStackTrace(_this2, TimeoutError);else _this2.stack = new Error(message).stack;
		return _this2;
	}

	return TimeoutError;
}(Error);

/**
 * Error indicating not support for something.
 */


var UnsupportedError = exports.UnsupportedError = function (_Error3) {
	(0, _inherits3.default)(UnsupportedError, _Error3);

	function UnsupportedError(message, data) {
		(0, _classCallCheck3.default)(this, UnsupportedError);

		var _this3 = (0, _possibleConstructorReturn3.default)(this, (UnsupportedError.__proto__ || (0, _getPrototypeOf2.default)(UnsupportedError)).call(this, message));

		_this3.name = 'UnsupportedError';

		if (Error.hasOwnProperty('captureStackTrace')) // Just in V8.
			Error.captureStackTrace(_this3, UnsupportedError);else _this3.stack = new Error(message).stack;

		_this3.data = data;
		return _this3;
	}

	return UnsupportedError;
}(Error);

/***/ }),

/***/ "./lib/mslib/handlers/Chrome55.js":
/*!****************************************!*\
  !*** ./lib/mslib/handlers/Chrome55.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _from = __webpack_require__(/*! babel-runtime/core-js/array/from */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/array/from.js");

var _from2 = _interopRequireDefault(_from);

var _map = __webpack_require__(/*! babel-runtime/core-js/map */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/map.js");

var _map2 = _interopRequireDefault(_map);

var _set = __webpack_require__(/*! babel-runtime/core-js/set */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/set.js");

var _set2 = _interopRequireDefault(_set);

var _promise = __webpack_require__(/*! babel-runtime/core-js/promise */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js");

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

var _sdpform = __webpack_require__(/*! ../../sdpform */ "./lib/sdpform/index.js");

var _sdpform2 = _interopRequireDefault(_sdpform);

var _Logger = __webpack_require__(/*! ../Logger */ "./lib/mslib/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

var _EnhancedEventEmitter2 = __webpack_require__(/*! ../EnhancedEventEmitter */ "./lib/mslib/EnhancedEventEmitter.js");

var _EnhancedEventEmitter3 = _interopRequireDefault(_EnhancedEventEmitter2);

var _utils = __webpack_require__(/*! ../utils */ "./lib/mslib/utils.js");

var utils = _interopRequireWildcard(_utils);

var _ortc = __webpack_require__(/*! ../ortc */ "./lib/mslib/ortc.js");

var ortc = _interopRequireWildcard(_ortc);

var _commonUtils = __webpack_require__(/*! ./sdp/commonUtils */ "./lib/mslib/handlers/sdp/commonUtils.js");

var sdpCommonUtils = _interopRequireWildcard(_commonUtils);

var _planBUtils = __webpack_require__(/*! ./sdp/planBUtils */ "./lib/mslib/handlers/sdp/planBUtils.js");

var sdpPlanBUtils = _interopRequireWildcard(_planBUtils);

var _RemotePlanBSdp = __webpack_require__(/*! ./sdp/RemotePlanBSdp */ "./lib/mslib/handlers/sdp/RemotePlanBSdp.js");

var _RemotePlanBSdp2 = _interopRequireDefault(_RemotePlanBSdp);

var _bandwidthHandler = __webpack_require__(/*! ./sdp/bandwidthHandler */ "./lib/mslib/handlers/sdp/bandwidthHandler.js");

var _bandwidthHandler2 = _interopRequireDefault(_bandwidthHandler);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = new _Logger2.default('Chrome55');

var Handler = function (_EnhancedEventEmitter) {
	(0, _inherits3.default)(Handler, _EnhancedEventEmitter);

	function Handler(direction, rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, Handler);

		// RTCPeerConnection instance.
		// @type {RTCPeerConnection}
		var _this = (0, _possibleConstructorReturn3.default)(this, (Handler.__proto__ || (0, _getPrototypeOf2.default)(Handler)).call(this, logger));

		_this._pc = new RTCPeerConnection({
			iceServers: settings.turnServers || [],
			iceTransportPolicy: settings.iceTransportPolicy,
			bundlePolicy: 'max-bundle',
			rtcpMuxPolicy: 'require'
		});

		// Generic sending RTP parameters for audio and video.
		// @type {Object}
		_this._rtpParametersByKind = rtpParametersByKind;

		// Remote SDP handler.
		// @type {RemotePlanBSdp}
		_this._remoteSdp = new _RemotePlanBSdp2.default(direction, rtpParametersByKind);

		// Handle RTCPeerConnection connection status.
		_this._pc.addEventListener('iceconnectionstatechange', function () {
			switch (_this._pc.iceConnectionState) {
				case 'checking':
					_this.emit('@connectionstatechange', 'connecting');
					break;
				case 'connected':
				case 'completed':
					_this.emit('@connectionstatechange', 'connected');
					break;
				case 'failed':
					_this.emit('@connectionstatechange', 'failed');
					break;
				case 'disconnected':
					_this.emit('@connectionstatechange', 'disconnected');
					break;
				case 'closed':
					_this.emit('@connectionstatechange', 'closed');
					break;
			}
		});
		return _this;
	}

	(0, _createClass3.default)(Handler, [{
		key: 'close',
		value: function close() {
			logger.debug('close()');

			// Close RTCPeerConnection.
			try {
				this._pc.close();
			} catch (error) {}
		}
	}, {
		key: 'remoteClosed',
		value: function remoteClosed() {
			logger.debug('remoteClosed()');

			this._transportReady = false;

			if (this._transportUpdated) this._transportUpdated = false;
		}
	}]);
	return Handler;
}(_EnhancedEventEmitter3.default);

var SendHandler = function (_Handler) {
	(0, _inherits3.default)(SendHandler, _Handler);

	function SendHandler(rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, SendHandler);

		// Got transport local and remote parameters.
		// @type {Boolean}
		var _this2 = (0, _possibleConstructorReturn3.default)(this, (SendHandler.__proto__ || (0, _getPrototypeOf2.default)(SendHandler)).call(this, 'send', rtpParametersByKind, settings));

		_this2._transportReady = false;

		// Local stream.
		// @type {MediaStream}
		_this2._stream = new MediaStream();
		return _this2;
	}

	(0, _createClass3.default)(SendHandler, [{
		key: 'addProducer',
		value: function addProducer(producer) {
			var _this3 = this;

			var track = producer.track;


			logger.debug('addProducer() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			if (this._stream.getTrackById(track.id)) return _promise2.default.reject(new Error('track already added'));

			var localSdpObj = void 0;

			return _promise2.default.resolve().then(function () {
				// Add the track to the local stream.
				_this3._stream.addTrack(track);

				// Add the stream to the PeerConnection.
				_this3._pc.addStream(_this3._stream);

				return _this3._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				// If simulcast is set, mangle the offer.
				if (producer.simulcast) {
					logger.debug('addProducer() | enabling simulcast');

					var sdpObject = _sdpform2.default.parse(offer.sdp);

					sdpPlanBUtils.addSimulcastForTrack(sdpObject, track);

					var offerSdp = _sdpform2.default.write(sdpObject);

					offer = { type: 'offer', sdp: offerSdp };
				}

				logger.debug('addProducer() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this3._pc.setLocalDescription(offer);
			}).then(function () {
				if (!_this3._transportReady) return _this3._setupTransport();
			}).then(function () {
				localSdpObj = _sdpform2.default.parse(_this3._pc.localDescription.sdp);

				var remoteSdp = _this3._remoteSdp.createAnswerSdp(localSdpObj);

				// for video bitrate - jove
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('addProducer() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this3._pc.setRemoteDescription(answer);
			}).then(function () {
				var rtpParameters = utils.clone(_this3._rtpParametersByKind[producer.kind]);

				// Fill the RTP parameters for this track.
				sdpPlanBUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track);

				return rtpParameters;
			}).catch(function (error) {
				// Panic here. Try to undo things.

				_this3._stream.removeTrack(track);
				_this3._pc.addStream(_this3._stream);

				throw error;
			});
		}
	}, {
		key: 'removeProducer',
		value: function removeProducer(producer) {
			var _this4 = this;

			var track = producer.track;


			logger.debug('removeProducer() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			return _promise2.default.resolve().then(function () {
				// Remove the track from the local stream.
				_this4._stream.removeTrack(track);

				// Add the stream to the PeerConnection.
				_this4._pc.addStream(_this4._stream);

				return _this4._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				logger.debug('removeProducer() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this4._pc.setLocalDescription(offer);
			}).catch(function (error) {
				// NOTE: If there are no sending tracks, setLocalDescription() will fail with
				// "Failed to create channels". If so, ignore it.
				if (_this4._stream.getTracks().length === 0) {
					logger.warn('removeProducer() | ignoring expected error due no sending tracks: %s', error.toString());

					return;
				}

				throw error;
			}).then(function () {
				if (_this4._pc.signalingState === 'stable') return;

				var localSdpObj = _sdpform2.default.parse(_this4._pc.localDescription.sdp);
				var remoteSdp = _this4._remoteSdp.createAnswerSdp(localSdpObj);

				// for video bitrate - jove
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('removeProducer() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this4._pc.setRemoteDescription(answer);
			});
		}
	}, {
		key: 'replaceProducerTrack',
		value: function replaceProducerTrack(producer, track) {
			var _this5 = this;

			logger.debug('replaceProducerTrack() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			var oldTrack = producer.track;
			var localSdpObj = void 0;

			return _promise2.default.resolve().then(function () {
				// Remove the old track from the local stream.
				_this5._stream.removeTrack(oldTrack);

				// Add the new track to the local stream.
				_this5._stream.addTrack(track);

				// Add the stream to the PeerConnection.
				_this5._pc.addStream(_this5._stream);

				return _this5._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				// If simulcast is set, mangle the offer.
				if (producer.simulcast) {
					logger.debug('addProducer() | enabling simulcast');

					var sdpObject = _sdpform2.default.parse(offer.sdp);

					sdpPlanBUtils.addSimulcastForTrack(sdpObject, track);

					var offerSdp = _sdpform2.default.write(sdpObject);

					offer = { type: 'offer', sdp: offerSdp };
				}

				logger.debug('replaceProducerTrack() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this5._pc.setLocalDescription(offer);
			}).then(function () {
				localSdpObj = _sdpform2.default.parse(_this5._pc.localDescription.sdp);

				var remoteSdp = _this5._remoteSdp.createAnswerSdp(localSdpObj);

				// for video bitrate - jove
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('replaceProducerTrack() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this5._pc.setRemoteDescription(answer);
			}).then(function () {
				var rtpParameters = utils.clone(_this5._rtpParametersByKind[producer.kind]);

				// Fill the RTP parameters for the new track.
				sdpPlanBUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track);

				// We need to provide new RTP parameters.
				_this5.safeEmit('@needupdateproducer', producer, rtpParameters);
			}).catch(function (error) {
				// Panic here. Try to undo things.

				_this5._stream.removeTrack(track);
				_this5._stream.addTrack(oldTrack);
				_this5._pc.addStream(_this5._stream);

				throw error;
			});
		}
	}, {
		key: 'restartIce',
		value: function restartIce(remoteIceParameters) {
			var _this6 = this;

			logger.debug('restartIce()');

			// Provide the remote SDP handler with new remote ICE parameters.
			this._remoteSdp.updateTransportRemoteIceParameters(remoteIceParameters);

			return _promise2.default.resolve().then(function () {
				return _this6._pc.createOffer({ iceRestart: true });
			}).then(function (offer) {
				logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this6._pc.setLocalDescription(offer);
			}).then(function () {
				var localSdpObj = _sdpform2.default.parse(_this6._pc.localDescription.sdp);
				var remoteSdp = _this6._remoteSdp.createAnswerSdp(localSdpObj);
				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this6._pc.setRemoteDescription(answer);
			});
		}
	}, {
		key: '_setupTransport',
		value: function _setupTransport() {
			var _this7 = this;

			logger.debug('_setupTransport()');

			return _promise2.default.resolve().then(function () {
				// Get our local DTLS parameters.
				var transportLocalParameters = {};
				var sdp = _this7._pc.localDescription.sdp;
				var sdpObj = _sdpform2.default.parse(sdp);
				var dtlsParameters = sdpCommonUtils.extractDtlsParameters(sdpObj);

				// Let's decide that we'll be DTLS server (because we can).
				dtlsParameters.role = 'server';

				transportLocalParameters.dtlsParameters = dtlsParameters;

				// Provide the remote SDP handler with transport local parameters.
				_this7._remoteSdp.setTransportLocalParameters(transportLocalParameters);

				// We need transport remote parameters.
				return _this7.safeEmitAsPromise('@needcreatetransport', transportLocalParameters);
			}).then(function (transportRemoteParameters) {
				// Provide the remote SDP handler with transport remote parameters.
				_this7._remoteSdp.setTransportRemoteParameters(transportRemoteParameters);

				_this7._transportReady = true;
			});
		}
	}, {
		key: 'getPCStats',
		value: function getPCStats(selector) {
			// logger.debug('getPCStats of revc', selector);
			return this._pc.getStats(selector).then(function (stats) {
				return stats;
			}).catch(function (e) {
				throw e;
			});
		}
	}, {
		key: 'updateTrack',
		value: function updateTrack(producer, track) {
			var _this8 = this;

			logger.debug('update Track() [trackId:%s]', track.id);
			var localSdpObj; // Add the track id to the Set.
			var transceiver;

			return _promise2.default.resolve().then(function () {
				// Let's check if there is transceiver for same kind.
				// One production consists video or (and) audio track(s).
				transceiver = _this8._pc.getTransceivers().find(function (t) {
					return t.receiver.track.kind === track.kind;
				});
			}).then(function () {
				return _this8._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				// If simulcast is set, mangle the offer.
				// var offerSdp;
				if (producer.simulcast) {
					logger.debug('updateTrack() | enabling simulcast');

					var sdpObject = _sdpform2.default.parse(offer.sdp);

					sdpPlanBUtils.addSimulcastForTrack(sdpObject, track);
					/*
     sdpPlanBUtils.addPlanBSimulcast(sdpObject, track, {
         mid: transceiver.mid
     });
     */
					var offerSdp = _sdpform2.default.write(sdpObject);

					offer = {
						type: 'offer',
						sdp: offerSdp
					};
				}

				logger.debug('updateTrack() | calling pc.setLocalDescription() [offer:%o]', offer);
				return _this8._pc.setLocalDescription(offer);
			}).then(function () {
				localSdpObj = _sdpform2.default.parse(_this8._pc.localDescription.sdp);

				var remoteSdp = _this8._remoteSdp.createAnswerSdp(localSdpObj);
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = {
					type: 'answer',
					sdp: remoteSdp
				};
				logger.debug('updateTrack() | calling pc.setRemoteDescription() [answer:%o]', answer);
				return _this8._pc.setRemoteDescription(answer);
			}).then(function () {
				var rtpParameters = utils.clone(_this8._rtpParametersByKind[producer.kind]);
				sdpPlanBUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track);
				/*
    sdpPlanBUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track, {
        mid: transceiver.mid,
        planBSimulcast: true
    });
    */
				return rtpParameters;
			}).catch(function (error) {
				// Panic here. Try to undo things.
				// failed at here and nothing to do.
				throw error;
			});
		}
	}]);
	return SendHandler;
}(Handler);

var RecvHandler = function (_Handler2) {
	(0, _inherits3.default)(RecvHandler, _Handler2);

	function RecvHandler(rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, RecvHandler);

		// Got transport remote parameters.
		// @type {Boolean}
		var _this9 = (0, _possibleConstructorReturn3.default)(this, (RecvHandler.__proto__ || (0, _getPrototypeOf2.default)(RecvHandler)).call(this, 'recv', rtpParametersByKind, settings));

		_this9._transportCreated = false;

		// Got transport local parameters.
		// @type {Boolean}
		_this9._transportUpdated = false;

		// Seen media kinds.
		// @type {Set<String>}
		_this9._kinds = new _set2.default();

		// Map of Consumers information indexed by consumer.id.
		// - kind {String}
		// - trackId {String}
		// - ssrc {Number}
		// - rtxSsrc {Number}
		// - cname {String}
		// @type {Map<Number, Object>}
		_this9._consumerInfos = new _map2.default();
		return _this9;
	}

	(0, _createClass3.default)(RecvHandler, [{
		key: 'addConsumer',
		value: function addConsumer(consumer) {
			var _this10 = this;

			logger.debug('addConsumer() [id:%s, kind:%s]', consumer.id, consumer.kind);

			if (this._consumerInfos.has(consumer.id)) return _promise2.default.reject(new Error('Consumer already added'));

			var encoding = consumer.rtpParameters.encodings[0];
			var cname = consumer.rtpParameters.rtcp.cname;
			var consumerInfo = {
				kind: consumer.kind,
				streamId: 'recv-stream-' + consumer.id,
				trackId: 'consumer-' + consumer.kind + '-' + consumer.id,
				ssrc: encoding.ssrc,
				cname: cname
			};

			if (encoding.rtx && encoding.rtx.ssrc) consumerInfo.rtxSsrc = encoding.rtx.ssrc;

			this._consumerInfos.set(consumer.id, consumerInfo);
			this._kinds.add(consumer.kind);

			return _promise2.default.resolve().then(function () {
				if (!_this10._transportCreated) return _this10._setupTransport();
			}).then(function () {
				var remoteSdp = _this10._remoteSdp.createOfferSdp((0, _from2.default)(_this10._kinds), (0, _from2.default)(_this10._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('addConsumer() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this10._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this10._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('addConsumer() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this10._pc.setLocalDescription(answer);
			}).then(function () {
				if (!_this10._transportUpdated) return _this10._updateTransport();
			}).then(function () {
				var stream = _this10._pc.getRemoteStreams().find(function (s) {
					return s.id === consumerInfo.streamId;
				});
				var track = stream.getTrackById(consumerInfo.trackId);

				if (!track) throw new Error('remote track not found');

				return track;
			});
		}
	}, {
		key: 'removeConsumer',
		value: function removeConsumer(consumer) {
			var _this11 = this;

			logger.debug('removeConsumer() [id:%s, kind:%s]', consumer.id, consumer.kind);

			if (!this._consumerInfos.has(consumer.id)) return _promise2.default.reject(new Error('Consumer not found'));

			this._consumerInfos.delete(consumer.id);

			return _promise2.default.resolve().then(function () {
				var remoteSdp = _this11._remoteSdp.createOfferSdp((0, _from2.default)(_this11._kinds), (0, _from2.default)(_this11._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('removeConsumer() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this11._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this11._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('removeConsumer() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this11._pc.setLocalDescription(answer);
			});
		}
	}, {
		key: 'restartIce',
		value: function restartIce(remoteIceParameters) {
			var _this12 = this;

			logger.debug('restartIce()');

			// Provide the remote SDP handler with new remote ICE parameters.
			this._remoteSdp.updateTransportRemoteIceParameters(remoteIceParameters);

			return _promise2.default.resolve().then(function () {
				var remoteSdp = _this12._remoteSdp.createOfferSdp((0, _from2.default)(_this12._kinds), (0, _from2.default)(_this12._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this12._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this12._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this12._pc.setLocalDescription(answer);
			});
		}
	}, {
		key: '_setupTransport',
		value: function _setupTransport() {
			var _this13 = this;

			logger.debug('_setupTransport()');

			return _promise2.default.resolve().then(function () {
				// We need transport remote parameters.
				return _this13.safeEmitAsPromise('@needcreatetransport', null);
			}).then(function (transportRemoteParameters) {
				// Provide the remote SDP handler with transport remote parameters.
				_this13._remoteSdp.setTransportRemoteParameters(transportRemoteParameters);

				_this13._transportCreated = true;
			});
		}
	}, {
		key: '_updateTransport',
		value: function _updateTransport() {
			logger.debug('_updateTransport()');

			// Get our local DTLS parameters.
			var sdp = this._pc.localDescription.sdp;
			var sdpObj = _sdpform2.default.parse(sdp);
			var dtlsParameters = sdpCommonUtils.extractDtlsParameters(sdpObj);
			var transportLocalParameters = { dtlsParameters: dtlsParameters };

			// We need to provide transport local parameters.
			this.safeEmit('@needupdatetransport', transportLocalParameters);

			this._transportUpdated = true;
		}
	}, {
		key: 'getPCStats',
		value: function getPCStats(selector) {
			// logger.debug('getPCStats of revc', selector);
			return this._pc.getStats(selector).then(function (stats) {
				return stats;
			}).catch(function (e) {
				throw e;
			});
		}
	}]);
	return RecvHandler;
}(Handler);

var Chrome55 = function () {
	(0, _createClass3.default)(Chrome55, null, [{
		key: 'getNativeRtpCapabilities',
		value: function getNativeRtpCapabilities() {
			logger.debug('getNativeRtpCapabilities()');

			var pc = new RTCPeerConnection({
				iceServers: [],
				iceTransportPolicy: 'all',
				bundlePolicy: 'max-bundle',
				rtcpMuxPolicy: 'require'
			});

			return pc.createOffer({
				offerToReceiveAudio: true,
				offerToReceiveVideo: true
			}).then(function (offer) {
				try {
					pc.close();
				} catch (error) {}

				var sdpObj = _sdpform2.default.parse(offer.sdp);
				var nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities(sdpObj);

				return nativeRtpCapabilities;
			}).catch(function (error) {
				try {
					pc.close();
				} catch (error2) {}

				throw error;
			});
		}
	}, {
		key: 'tag',
		get: function get() {
			return 'Chrome55';
		}
	}]);

	function Chrome55(direction, extendedRtpCapabilities, settings) {
		(0, _classCallCheck3.default)(this, Chrome55);

		logger.debug('constructor() [direction:%s, extendedRtpCapabilities:%o]', direction, extendedRtpCapabilities);

		var rtpParametersByKind = void 0;

		switch (direction) {
			case 'send':
				{
					rtpParametersByKind = {
						audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
						video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
					};

					return new SendHandler(rtpParametersByKind, settings);
				}
			case 'recv':
				{
					rtpParametersByKind = {
						audio: ortc.getReceivingFullRtpParameters('audio', extendedRtpCapabilities),
						video: ortc.getReceivingFullRtpParameters('video', extendedRtpCapabilities)
					};

					return new RecvHandler(rtpParametersByKind, settings);
				}
		}
	}

	return Chrome55;
}();

exports.default = Chrome55;

/***/ }),

/***/ "./lib/mslib/handlers/Chrome67.js":
/*!****************************************!*\
  !*** ./lib/mslib/handlers/Chrome67.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _from = __webpack_require__(/*! babel-runtime/core-js/array/from */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/array/from.js");

var _from2 = _interopRequireDefault(_from);

var _map = __webpack_require__(/*! babel-runtime/core-js/map */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/map.js");

var _map2 = _interopRequireDefault(_map);

var _set = __webpack_require__(/*! babel-runtime/core-js/set */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/set.js");

var _set2 = _interopRequireDefault(_set);

var _promise = __webpack_require__(/*! babel-runtime/core-js/promise */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js");

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

var _sdpform = __webpack_require__(/*! ../../sdpform */ "./lib/sdpform/index.js");

var _sdpform2 = _interopRequireDefault(_sdpform);

var _Logger = __webpack_require__(/*! ../Logger */ "./lib/mslib/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

var _EnhancedEventEmitter2 = __webpack_require__(/*! ../EnhancedEventEmitter */ "./lib/mslib/EnhancedEventEmitter.js");

var _EnhancedEventEmitter3 = _interopRequireDefault(_EnhancedEventEmitter2);

var _utils = __webpack_require__(/*! ../utils */ "./lib/mslib/utils.js");

var utils = _interopRequireWildcard(_utils);

var _ortc = __webpack_require__(/*! ../ortc */ "./lib/mslib/ortc.js");

var ortc = _interopRequireWildcard(_ortc);

var _commonUtils = __webpack_require__(/*! ./sdp/commonUtils */ "./lib/mslib/handlers/sdp/commonUtils.js");

var sdpCommonUtils = _interopRequireWildcard(_commonUtils);

var _planBUtils = __webpack_require__(/*! ./sdp/planBUtils */ "./lib/mslib/handlers/sdp/planBUtils.js");

var sdpPlanBUtils = _interopRequireWildcard(_planBUtils);

var _RemotePlanBSdp = __webpack_require__(/*! ./sdp/RemotePlanBSdp */ "./lib/mslib/handlers/sdp/RemotePlanBSdp.js");

var _RemotePlanBSdp2 = _interopRequireDefault(_RemotePlanBSdp);

var _bandwidthHandler = __webpack_require__(/*! ./sdp/bandwidthHandler */ "./lib/mslib/handlers/sdp/bandwidthHandler.js");

var _bandwidthHandler2 = _interopRequireDefault(_bandwidthHandler);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = new _Logger2.default('Chrome67');

var Handler = function (_EnhancedEventEmitter) {
	(0, _inherits3.default)(Handler, _EnhancedEventEmitter);

	function Handler(direction, rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, Handler);

		// RTCPeerConnection instance.
		// @type {RTCPeerConnection}
		var _this = (0, _possibleConstructorReturn3.default)(this, (Handler.__proto__ || (0, _getPrototypeOf2.default)(Handler)).call(this, logger));

		_this._pc = new RTCPeerConnection({
			iceServers: settings.turnServers || [],
			iceTransportPolicy: settings.iceTransportPolicy,
			bundlePolicy: 'max-bundle',
			rtcpMuxPolicy: 'require',
			sdpSemantics: 'plan-b'
		});

		// Generic sending RTP parameters for audio and video.
		// @type {Object}
		_this._rtpParametersByKind = rtpParametersByKind;

		// Remote SDP handler.
		// @type {RemotePlanBSdp}
		_this._remoteSdp = new _RemotePlanBSdp2.default(direction, rtpParametersByKind);

		// Handle RTCPeerConnection connection status.
		_this._pc.addEventListener('iceconnectionstatechange', function () {
			switch (_this._pc.iceConnectionState) {
				case 'checking':
					_this.emit('@connectionstatechange', 'connecting');
					break;
				case 'connected':
				case 'completed':
					_this.emit('@connectionstatechange', 'connected');
					break;
				case 'failed':
					_this.emit('@connectionstatechange', 'failed');
					break;
				case 'disconnected':
					_this.emit('@connectionstatechange', 'disconnected');
					break;
				case 'closed':
					_this.emit('@connectionstatechange', 'closed');
					break;
			}
		});
		return _this;
	}

	(0, _createClass3.default)(Handler, [{
		key: 'close',
		value: function close() {
			logger.debug('close()');

			// Close RTCPeerConnection.
			try {
				this._pc.close();
			} catch (error) {}
		}
	}, {
		key: 'remoteClosed',
		value: function remoteClosed() {
			logger.debug('remoteClosed()');

			this._transportReady = false;

			if (this._transportUpdated) this._transportUpdated = false;
		}
	}]);
	return Handler;
}(_EnhancedEventEmitter3.default);

var SendHandler = function (_Handler) {
	(0, _inherits3.default)(SendHandler, _Handler);

	function SendHandler(rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, SendHandler);

		// Got transport local and remote parameters.
		// @type {Boolean}
		var _this2 = (0, _possibleConstructorReturn3.default)(this, (SendHandler.__proto__ || (0, _getPrototypeOf2.default)(SendHandler)).call(this, 'send', rtpParametersByKind, settings));

		_this2._transportReady = false;

		// Local stream.
		// @type {MediaStream}
		_this2._stream = new MediaStream();
		return _this2;
	}

	(0, _createClass3.default)(SendHandler, [{
		key: 'addProducer',
		value: function addProducer(producer) {
			var _this3 = this;

			var track = producer.track;


			logger.debug('addProducer() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			if (this._stream.getTrackById(track.id)) return _promise2.default.reject(new Error('track already added'));

			var localSdpObj = void 0;

			return _promise2.default.resolve().then(function () {
				// Add the track to the local stream.
				_this3._stream.addTrack(track);

				// Add the stream to the PeerConnection.
				_this3._pc.addStream(_this3._stream);

				return _this3._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				// If simulcast is set, mangle the offer.
				if (producer.simulcast) {
					logger.debug('addProducer() | enabling simulcast');

					var sdpObject = _sdpform2.default.parse(offer.sdp);

					sdpPlanBUtils.addSimulcastForTrack(sdpObject, track);

					var offerSdp = _sdpform2.default.write(sdpObject);

					offer = { type: 'offer', sdp: offerSdp };
				}

				logger.debug('addProducer() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this3._pc.setLocalDescription(offer);
			}).then(function () {
				if (!_this3._transportReady) return _this3._setupTransport();
			}).then(function () {
				localSdpObj = _sdpform2.default.parse(_this3._pc.localDescription.sdp);

				var remoteSdp = _this3._remoteSdp.createAnswerSdp(localSdpObj);

				// for video bitrate - jove
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('addProducer() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this3._pc.setRemoteDescription(answer);
			}).then(function () {
				var rtpParameters = utils.clone(_this3._rtpParametersByKind[producer.kind]);

				// Fill the RTP parameters for this track.
				sdpPlanBUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track);

				return rtpParameters;
			}).catch(function (error) {
				// Panic here. Try to undo things.

				_this3._stream.removeTrack(track);
				_this3._pc.addStream(_this3._stream);

				throw error;
			});
		}
	}, {
		key: 'removeProducer',
		value: function removeProducer(producer) {
			var _this4 = this;

			var track = producer.track;


			logger.debug('removeProducer() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			return _promise2.default.resolve().then(function () {
				// Remove the track from the local stream.
				_this4._stream.removeTrack(track);

				// Add the stream to the PeerConnection.
				_this4._pc.addStream(_this4._stream);

				return _this4._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				logger.debug('removeProducer() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this4._pc.setLocalDescription(offer);
			}).catch(function (error) {
				// NOTE: If there are no sending tracks, setLocalDescription() will fail with
				// "Failed to create channels". If so, ignore it.
				if (_this4._stream.getTracks().length === 0) {
					logger.warn('removeProducer() | ignoring expected error due no sending tracks: %s', error.toString());

					return;
				}

				throw error;
			}).then(function () {
				if (_this4._pc.signalingState === 'stable') return;

				var localSdpObj = _sdpform2.default.parse(_this4._pc.localDescription.sdp);
				var remoteSdp = _this4._remoteSdp.createAnswerSdp(localSdpObj);

				// for video bitrate - jove
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('removeProducer() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this4._pc.setRemoteDescription(answer);
			});
		}
	}, {
		key: 'replaceProducerTrack',
		value: function replaceProducerTrack(producer, track) {
			var _this5 = this;

			logger.debug('replaceProducerTrack() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			var oldTrack = producer.track;

			return _promise2.default.resolve().then(function () {
				// Get the associated RTCRtpSender.
				var rtpSender = _this5._pc.getSenders().find(function (s) {
					return s.track === oldTrack;
				});

				if (!rtpSender) throw new Error('local track not found');

				return rtpSender.replaceTrack(track);
			}).then(function () {
				// Remove the old track from the local stream.
				_this5._stream.removeTrack(oldTrack);

				// Add the new track to the local stream.
				_this5._stream.addTrack(track);
			});
		}
	}, {
		key: 'restartIce',
		value: function restartIce(remoteIceParameters) {
			var _this6 = this;

			logger.debug('restartIce()');

			// Provide the remote SDP handler with new remote ICE parameters.
			this._remoteSdp.updateTransportRemoteIceParameters(remoteIceParameters);

			return _promise2.default.resolve().then(function () {
				return _this6._pc.createOffer({ iceRestart: true });
			}).then(function (offer) {
				logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this6._pc.setLocalDescription(offer);
			}).then(function () {
				var localSdpObj = _sdpform2.default.parse(_this6._pc.localDescription.sdp);
				var remoteSdp = _this6._remoteSdp.createAnswerSdp(localSdpObj);
				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this6._pc.setRemoteDescription(answer);
			});
		}
	}, {
		key: '_setupTransport',
		value: function _setupTransport() {
			var _this7 = this;

			logger.debug('_setupTransport()');

			return _promise2.default.resolve().then(function () {
				// Get our local DTLS parameters.
				var transportLocalParameters = {};
				var sdp = _this7._pc.localDescription.sdp;
				var sdpObj = _sdpform2.default.parse(sdp);
				var dtlsParameters = sdpCommonUtils.extractDtlsParameters(sdpObj);

				// Let's decide that we'll be DTLS server (because we can).
				dtlsParameters.role = 'server';

				transportLocalParameters.dtlsParameters = dtlsParameters;

				// Provide the remote SDP handler with transport local parameters.
				_this7._remoteSdp.setTransportLocalParameters(transportLocalParameters);

				// We need transport remote parameters.
				return _this7.safeEmitAsPromise('@needcreatetransport', transportLocalParameters);
			}).then(function (transportRemoteParameters) {
				// Provide the remote SDP handler with transport remote parameters.
				_this7._remoteSdp.setTransportRemoteParameters(transportRemoteParameters);

				_this7._transportReady = true;
			});
		}
	}, {
		key: 'getPCStats',
		value: function getPCStats(selector) {
			// logger.debug('getPCStats of revc', selector);
			return this._pc.getStats(selector).then(function (stats) {
				return stats;
			}).catch(function (e) {
				throw e;
			});
		}
	}, {
		key: 'updateTrack',
		value: function updateTrack(producer, track) {
			var _this8 = this;

			logger.debug('update Track() [trackId:%s]', track.id);
			var localSdpObj; // Add the track id to the Set.
			var transceiver;

			return _promise2.default.resolve().then(function () {
				// Let's check if there is transceiver for same kind.
				// One production consists video or (and) audio track(s).
				transceiver = _this8._pc.getTransceivers().find(function (t) {
					return t.receiver.track.kind === track.kind;
				});
			}).then(function () {
				return _this8._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				// If simulcast is set, mangle the offer.
				// var offerSdp;
				if (producer.simulcast) {
					logger.debug('updateTrack() | enabling simulcast');

					var sdpObject = _sdpform2.default.parse(offer.sdp);

					sdpPlanBUtils.addSimulcastForTrack(sdpObject, track);
					/*
     sdpPlanBUtils.addPlanBSimulcast(sdpObject, track, {
         mid: transceiver.mid
     });
     */
					var offerSdp = _sdpform2.default.write(sdpObject);

					offer = {
						type: 'offer',
						sdp: offerSdp
					};
				}

				logger.debug('updateTrack() | calling pc.setLocalDescription() [offer:%o]', offer);
				return _this8._pc.setLocalDescription(offer);
			}).then(function () {
				localSdpObj = _sdpform2.default.parse(_this8._pc.localDescription.sdp);

				var remoteSdp = _this8._remoteSdp.createAnswerSdp(localSdpObj);
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = {
					type: 'answer',
					sdp: remoteSdp
				};
				logger.debug('updateTrack() | calling pc.setRemoteDescription() [answer:%o]', answer);
				return _this8._pc.setRemoteDescription(answer);
			}).then(function () {
				var rtpParameters = utils.clone(_this8._rtpParametersByKind[producer.kind]);

				sdpPlanBUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track);

				/*
    sdpPlanBUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track, {
        mid: transceiver.mid,
        planBSimulcast: true
    });
    */
				return rtpParameters;
			}).catch(function (error) {
				// Panic here. Try to undo things.
				// failed at here and nothing to do.
				throw error;
			});
		}
	}]);
	return SendHandler;
}(Handler);

var RecvHandler = function (_Handler2) {
	(0, _inherits3.default)(RecvHandler, _Handler2);

	function RecvHandler(rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, RecvHandler);

		// Got transport remote parameters.
		// @type {Boolean}
		var _this9 = (0, _possibleConstructorReturn3.default)(this, (RecvHandler.__proto__ || (0, _getPrototypeOf2.default)(RecvHandler)).call(this, 'recv', rtpParametersByKind, settings));

		_this9._transportCreated = false;

		// Got transport local parameters.
		// @type {Boolean}
		_this9._transportUpdated = false;

		// Seen media kinds.
		// @type {Set<String>}
		_this9._kinds = new _set2.default();

		// Map of Consumers information indexed by consumer.id.
		// - kind {String}
		// - trackId {String}
		// - ssrc {Number}
		// - rtxSsrc {Number}
		// - cname {String}
		// @type {Map<Number, Object>}
		_this9._consumerInfos = new _map2.default();
		return _this9;
	}

	(0, _createClass3.default)(RecvHandler, [{
		key: 'addConsumer',
		value: function addConsumer(consumer) {
			var _this10 = this;

			logger.debug('addConsumer() [id:%s, kind:%s]', consumer.id, consumer.kind);

			if (this._consumerInfos.has(consumer.id)) return _promise2.default.reject(new Error('Consumer already added'));

			var encoding = consumer.rtpParameters.encodings[0];
			var cname = consumer.rtpParameters.rtcp.cname;
			var consumerInfo = {
				kind: consumer.kind,
				streamId: 'recv-stream-' + consumer.id,
				trackId: 'consumer-' + consumer.kind + '-' + consumer.id,
				ssrc: encoding.ssrc,
				cname: cname
			};

			if (encoding.rtx && encoding.rtx.ssrc) consumerInfo.rtxSsrc = encoding.rtx.ssrc;

			this._consumerInfos.set(consumer.id, consumerInfo);
			this._kinds.add(consumer.kind);

			return _promise2.default.resolve().then(function () {
				if (!_this10._transportCreated) return _this10._setupTransport();
			}).then(function () {
				var remoteSdp = _this10._remoteSdp.createOfferSdp((0, _from2.default)(_this10._kinds), (0, _from2.default)(_this10._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('addConsumer() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this10._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this10._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('addConsumer() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this10._pc.setLocalDescription(answer);
			}).then(function () {
				if (!_this10._transportUpdated) return _this10._updateTransport();
			}).then(function () {
				var stream = _this10._pc.getRemoteStreams().find(function (s) {
					return s.id === consumerInfo.streamId;
				});
				var track = stream.getTrackById(consumerInfo.trackId);

				if (!track) throw new Error('remote track not found');

				return track;
			});
		}
	}, {
		key: 'removeConsumer',
		value: function removeConsumer(consumer) {
			var _this11 = this;

			logger.debug('removeConsumer() [id:%s, kind:%s]', consumer.id, consumer.kind);

			if (!this._consumerInfos.has(consumer.id)) return _promise2.default.reject(new Error('Consumer not found'));

			this._consumerInfos.delete(consumer.id);

			return _promise2.default.resolve().then(function () {
				var remoteSdp = _this11._remoteSdp.createOfferSdp((0, _from2.default)(_this11._kinds), (0, _from2.default)(_this11._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('removeConsumer() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this11._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this11._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('removeConsumer() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this11._pc.setLocalDescription(answer);
			});
		}
	}, {
		key: 'restartIce',
		value: function restartIce(remoteIceParameters) {
			var _this12 = this;

			logger.debug('restartIce()');

			// Provide the remote SDP handler with new remote ICE parameters.
			this._remoteSdp.updateTransportRemoteIceParameters(remoteIceParameters);

			return _promise2.default.resolve().then(function () {
				var remoteSdp = _this12._remoteSdp.createOfferSdp((0, _from2.default)(_this12._kinds), (0, _from2.default)(_this12._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this12._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this12._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this12._pc.setLocalDescription(answer);
			});
		}
	}, {
		key: '_setupTransport',
		value: function _setupTransport() {
			var _this13 = this;

			logger.debug('_setupTransport()');

			return _promise2.default.resolve().then(function () {
				// We need transport remote parameters.
				return _this13.safeEmitAsPromise('@needcreatetransport', null);
			}).then(function (transportRemoteParameters) {
				// Provide the remote SDP handler with transport remote parameters.
				_this13._remoteSdp.setTransportRemoteParameters(transportRemoteParameters);

				_this13._transportCreated = true;
			});
		}
	}, {
		key: '_updateTransport',
		value: function _updateTransport() {
			logger.debug('_updateTransport()');

			// Get our local DTLS parameters.
			var sdp = this._pc.localDescription.sdp;
			var sdpObj = _sdpform2.default.parse(sdp);
			var dtlsParameters = sdpCommonUtils.extractDtlsParameters(sdpObj);
			var transportLocalParameters = { dtlsParameters: dtlsParameters };

			// We need to provide transport local parameters.
			this.safeEmit('@needupdatetransport', transportLocalParameters);

			this._transportUpdated = true;
		}
	}, {
		key: 'getPCStats',
		value: function getPCStats(selector) {
			// logger.debug('getPCStats of revc', selector);
			return this._pc.getStats(selector).then(function (stats) {
				return stats;
			}).catch(function (e) {
				throw e;
			});
		}
	}]);
	return RecvHandler;
}(Handler);

var Chrome67 = function () {
	(0, _createClass3.default)(Chrome67, null, [{
		key: 'getNativeRtpCapabilities',
		value: function getNativeRtpCapabilities() {
			logger.debug('getNativeRtpCapabilities()');

			var pc = new RTCPeerConnection({
				iceServers: [],
				iceTransportPolicy: 'all',
				bundlePolicy: 'max-bundle',
				rtcpMuxPolicy: 'require',
				sdpSemantics: 'plan-b'
			});

			return pc.createOffer({
				offerToReceiveAudio: true,
				offerToReceiveVideo: true
			}).then(function (offer) {
				try {
					pc.close();
				} catch (error) {}

				var sdpObj = _sdpform2.default.parse(offer.sdp);
				var nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities(sdpObj);

				return nativeRtpCapabilities;
			}).catch(function (error) {
				try {
					pc.close();
				} catch (error2) {}

				throw error;
			});
		}
	}, {
		key: 'tag',
		get: function get() {
			return 'Chrome67';
		}
	}]);

	function Chrome67(direction, extendedRtpCapabilities, settings) {
		(0, _classCallCheck3.default)(this, Chrome67);

		logger.debug('constructor() [direction:%s, extendedRtpCapabilities:%o]', direction, extendedRtpCapabilities);

		var rtpParametersByKind = void 0;

		switch (direction) {
			case 'send':
				{
					rtpParametersByKind = {
						audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
						video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
					};

					return new SendHandler(rtpParametersByKind, settings);
				}
			case 'recv':
				{
					rtpParametersByKind = {
						audio: ortc.getReceivingFullRtpParameters('audio', extendedRtpCapabilities),
						video: ortc.getReceivingFullRtpParameters('video', extendedRtpCapabilities)
					};

					return new RecvHandler(rtpParametersByKind, settings);
				}
		}
	}

	return Chrome67;
}();

exports.default = Chrome67;

/***/ }),

/***/ "./lib/mslib/handlers/Chrome69.js":
/*!****************************************!*\
  !*** ./lib/mslib/handlers/Chrome69.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _from = __webpack_require__(/*! babel-runtime/core-js/array/from */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/array/from.js");

var _from2 = _interopRequireDefault(_from);

var _map = __webpack_require__(/*! babel-runtime/core-js/map */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/map.js");

var _map2 = _interopRequireDefault(_map);

var _set = __webpack_require__(/*! babel-runtime/core-js/set */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/set.js");

var _set2 = _interopRequireDefault(_set);

var _promise = __webpack_require__(/*! babel-runtime/core-js/promise */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js");

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

var _sdpform = __webpack_require__(/*! ../../sdpform */ "./lib/sdpform/index.js");

var _sdpform2 = _interopRequireDefault(_sdpform);

var _Logger = __webpack_require__(/*! ../Logger */ "./lib/mslib/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

var _EnhancedEventEmitter2 = __webpack_require__(/*! ../EnhancedEventEmitter */ "./lib/mslib/EnhancedEventEmitter.js");

var _EnhancedEventEmitter3 = _interopRequireDefault(_EnhancedEventEmitter2);

var _utils = __webpack_require__(/*! ../utils */ "./lib/mslib/utils.js");

var utils = _interopRequireWildcard(_utils);

var _ortc = __webpack_require__(/*! ../ortc */ "./lib/mslib/ortc.js");

var ortc = _interopRequireWildcard(_ortc);

var _commonUtils = __webpack_require__(/*! ./sdp/commonUtils */ "./lib/mslib/handlers/sdp/commonUtils.js");

var sdpCommonUtils = _interopRequireWildcard(_commonUtils);

var _planBUtils = __webpack_require__(/*! ./sdp/planBUtils */ "./lib/mslib/handlers/sdp/planBUtils.js");

var sdpPlanBUtils = _interopRequireWildcard(_planBUtils);

var _RemotePlanBSdp = __webpack_require__(/*! ./sdp/RemotePlanBSdp */ "./lib/mslib/handlers/sdp/RemotePlanBSdp.js");

var _RemotePlanBSdp2 = _interopRequireDefault(_RemotePlanBSdp);

var _bandwidthHandler = __webpack_require__(/*! ./sdp/bandwidthHandler */ "./lib/mslib/handlers/sdp/bandwidthHandler.js");

var _bandwidthHandler2 = _interopRequireDefault(_bandwidthHandler);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = new _Logger2.default('Chrome69');

var Handler = function (_EnhancedEventEmitter) {
	(0, _inherits3.default)(Handler, _EnhancedEventEmitter);

	function Handler(direction, rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, Handler);

		// RTCPeerConnection instance.
		// @type {RTCPeerConnection}
		var _this = (0, _possibleConstructorReturn3.default)(this, (Handler.__proto__ || (0, _getPrototypeOf2.default)(Handler)).call(this, logger));

		_this._pc = new RTCPeerConnection({
			iceServers: settings.turnServers || [],
			iceTransportPolicy: settings.iceTransportPolicy,
			bundlePolicy: 'max-bundle',
			rtcpMuxPolicy: 'require',
			sdpSemantics: 'plan-b'
		});

		// Generic sending RTP parameters for audio and video.
		// @type {Object}
		_this._rtpParametersByKind = rtpParametersByKind;

		// Remote SDP handler.
		// @type {RemotePlanBSdp}
		_this._remoteSdp = new _RemotePlanBSdp2.default(direction, rtpParametersByKind);

		// Handle RTCPeerConnection connection status.
		_this._pc.addEventListener('iceconnectionstatechange', function () {
			switch (_this._pc.iceConnectionState) {
				case 'checking':
					_this.emit('@connectionstatechange', 'connecting');
					break;
				case 'connected':
				case 'completed':
					_this.emit('@connectionstatechange', 'connected');
					break;
				case 'failed':
					_this.emit('@connectionstatechange', 'failed');
					break;
				case 'disconnected':
					_this.emit('@connectionstatechange', 'disconnected');
					break;
				case 'closed':
					_this.emit('@connectionstatechange', 'closed');
					break;
			}
		});
		return _this;
	}

	(0, _createClass3.default)(Handler, [{
		key: 'close',
		value: function close() {
			logger.debug('close()');

			// Close RTCPeerConnection.
			try {
				this._pc.close();
			} catch (error) {}
		}
	}, {
		key: 'remoteClosed',
		value: function remoteClosed() {
			logger.debug('remoteClosed()');

			this._transportReady = false;

			if (this._transportUpdated) this._transportUpdated = false;
		}
	}]);
	return Handler;
}(_EnhancedEventEmitter3.default);

var SendHandler = function (_Handler) {
	(0, _inherits3.default)(SendHandler, _Handler);

	function SendHandler(rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, SendHandler);

		// Got transport local and remote parameters.
		// @type {Boolean}
		var _this2 = (0, _possibleConstructorReturn3.default)(this, (SendHandler.__proto__ || (0, _getPrototypeOf2.default)(SendHandler)).call(this, 'send', rtpParametersByKind, settings));

		_this2._transportReady = false;

		// Local stream.
		// @type {MediaStream}
		_this2._stream = new MediaStream();
		return _this2;
	}

	(0, _createClass3.default)(SendHandler, [{
		key: 'addProducer',
		value: function addProducer(producer) {
			var _this3 = this;

			var track = producer.track;


			logger.debug('addProducer() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			if (this._stream.getTrackById(track.id)) return _promise2.default.reject(new Error('track already added'));

			var rtpSender = void 0;
			var localSdpObj = void 0;

			return _promise2.default.resolve().then(function () {
				// Add the track to the local stream.
				_this3._stream.addTrack(track);

				// Add the stream to the PeerConnection.
				rtpSender = _this3._pc.addTrack(track, _this3._stream);

				return _this3._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				// If simulcast is set, mangle the offer.
				if (producer.simulcast) {
					logger.debug('addProducer() | enabling simulcast');

					var sdpObject = _sdpform2.default.parse(offer.sdp);

					sdpPlanBUtils.addSimulcastForTrack(sdpObject, track);

					var offerSdp = _sdpform2.default.write(sdpObject);

					offer = { type: 'offer', sdp: offerSdp };
				}

				logger.debug('addProducer() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this3._pc.setLocalDescription(offer);
			}).then(function () {
				if (!_this3._transportReady) return _this3._setupTransport();
			}).then(function () {
				localSdpObj = _sdpform2.default.parse(_this3._pc.localDescription.sdp);

				var remoteSdp = _this3._remoteSdp.createAnswerSdp(localSdpObj);

				// for video bitrate - jove
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('addProducer() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this3._pc.setRemoteDescription(answer);
			}).then(function () {
				var rtpParameters = utils.clone(_this3._rtpParametersByKind[producer.kind]);

				// Fill the RTP parameters for this track.
				sdpPlanBUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track);

				return rtpParameters;
			}).catch(function (error) {
				// Panic here. Try to undo things.

				try {
					_this3._pc.removeTrack(rtpSender);
				} catch (error2) {}

				_this3._stream.removeTrack(track);

				throw error;
			});
		}
	}, {
		key: 'removeProducer',
		value: function removeProducer(producer) {
			var _this4 = this;

			var track = producer.track;


			logger.debug('removeProducer() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			return _promise2.default.resolve().then(function () {
				// Get the associated RTCRtpSender.
				var rtpSender = _this4._pc.getSenders().find(function (s) {
					return s.track === track;
				});

				if (!rtpSender) throw new Error('RTCRtpSender not found');

				// Remove the associated RtpSender.
				_this4._pc.removeTrack(rtpSender);

				// Remove the track from the local stream.
				_this4._stream.removeTrack(track);

				return _this4._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				logger.debug('removeProducer() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this4._pc.setLocalDescription(offer);
			}).catch(function (error) {
				// NOTE: If there are no sending tracks, setLocalDescription() will fail with
				// "Failed to create channels". If so, ignore it.
				if (_this4._stream.getTracks().length === 0) {
					logger.warn('removeProducer() | ignoring expected error due no sending tracks: %s', error.toString());

					return;
				}

				throw error;
			}).then(function () {
				if (_this4._pc.signalingState === 'stable') return;

				var localSdpObj = _sdpform2.default.parse(_this4._pc.localDescription.sdp);
				var remoteSdp = _this4._remoteSdp.createAnswerSdp(localSdpObj);

				// for video bitrate - jove
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('removeProducer() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this4._pc.setRemoteDescription(answer);
			});
		}
	}, {
		key: 'replaceProducerTrack',
		value: function replaceProducerTrack(producer, track) {
			var _this5 = this;

			logger.debug('replaceProducerTrack() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			var oldTrack = producer.track;

			return _promise2.default.resolve().then(function () {
				// Get the associated RTCRtpSender.
				var rtpSender = _this5._pc.getSenders().find(function (s) {
					return s.track === oldTrack;
				});

				if (!rtpSender) throw new Error('local track not found');

				return rtpSender.replaceTrack(track);
			}).then(function () {
				// Remove the old track from the local stream.
				_this5._stream.removeTrack(oldTrack);

				// Add the new track to the local stream.
				_this5._stream.addTrack(track);
			});
		}
	}, {
		key: 'restartIce',
		value: function restartIce(remoteIceParameters) {
			var _this6 = this;

			logger.debug('restartIce()');

			// Provide the remote SDP handler with new remote ICE parameters.
			this._remoteSdp.updateTransportRemoteIceParameters(remoteIceParameters);

			return _promise2.default.resolve().then(function () {
				return _this6._pc.createOffer({ iceRestart: true });
			}).then(function (offer) {
				logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this6._pc.setLocalDescription(offer);
			}).then(function () {
				var localSdpObj = _sdpform2.default.parse(_this6._pc.localDescription.sdp);
				var remoteSdp = _this6._remoteSdp.createAnswerSdp(localSdpObj);
				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this6._pc.setRemoteDescription(answer);
			});
		}
	}, {
		key: '_setupTransport',
		value: function _setupTransport() {
			var _this7 = this;

			logger.debug('_setupTransport()');

			return _promise2.default.resolve().then(function () {
				// Get our local DTLS parameters.
				var transportLocalParameters = {};
				var sdp = _this7._pc.localDescription.sdp;
				var sdpObj = _sdpform2.default.parse(sdp);
				var dtlsParameters = sdpCommonUtils.extractDtlsParameters(sdpObj);

				// Let's decide that we'll be DTLS server (because we can).
				dtlsParameters.role = 'server';

				transportLocalParameters.dtlsParameters = dtlsParameters;

				// Provide the remote SDP handler with transport local parameters.
				_this7._remoteSdp.setTransportLocalParameters(transportLocalParameters);

				// We need transport remote parameters.
				return _this7.safeEmitAsPromise('@needcreatetransport', transportLocalParameters);
			}).then(function (transportRemoteParameters) {
				// Provide the remote SDP handler with transport remote parameters.
				_this7._remoteSdp.setTransportRemoteParameters(transportRemoteParameters);

				_this7._transportReady = true;
			});
		}
	}, {
		key: 'getPCStats',
		value: function getPCStats(selector) {
			// logger.debug('getPCStats of revc', selector);
			return this._pc.getStats(selector).then(function (stats) {
				return stats;
			}).catch(function (e) {
				throw e;
			});
		}
	}, {
		key: 'updateTrack',
		value: function updateTrack(producer, track) {
			var _this8 = this;

			logger.debug('update Track() [trackId:%s]', track.id);
			var localSdpObj; // Add the track id to the Set.
			var transceiver;

			return _promise2.default.resolve().then(function () {
				// Let's check if there is transceiver for same kind.
				// One production consists video or (and) audio track(s).
				transceiver = _this8._pc.getTransceivers().find(function (t) {
					return t.receiver.track.kind === track.kind;
				});
			}).then(function () {
				return _this8._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				// If simulcast is set, mangle the offer.
				// var offerSdp;
				if (producer.simulcast) {
					logger.debug('updateTrack() | enabling simulcast');

					var sdpObject = _sdpform2.default.parse(offer.sdp);

					sdpPlanBUtils.addSimulcastForTrack(sdpObject, track);
					/*
     sdpPlanBUtils.addPlanBSimulcast(sdpObject, track, {
         mid: transceiver.mid
     });
     */

					var offerSdp = _sdpform2.default.write(sdpObject);

					offer = {
						type: 'offer',
						sdp: offerSdp
					};
				}

				logger.debug('updateTrack() | calling pc.setLocalDescription() [offer:%o]', offer);
				return _this8._pc.setLocalDescription(offer);
			}).then(function () {
				localSdpObj = _sdpform2.default.parse(_this8._pc.localDescription.sdp);

				var remoteSdp = _this8._remoteSdp.createAnswerSdp(localSdpObj);
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = {
					type: 'answer',
					sdp: remoteSdp
				};
				logger.debug('updateTrack() | calling pc.setRemoteDescription() [answer:%o]', answer);
				return _this8._pc.setRemoteDescription(answer);
			}).then(function () {
				var rtpParameters = utils.clone(_this8._rtpParametersByKind[producer.kind]);
				sdpPlanBUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track);
				/*
    sdpPlanBUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track, {
        mid: transceiver.mid,
        planBSimulcast: true
    });
    */
				return rtpParameters;
			}).catch(function (error) {
				// Panic here. Try to undo things.
				// failed at here and nothing to do.
				throw error;
			});
		}
	}]);
	return SendHandler;
}(Handler);

var RecvHandler = function (_Handler2) {
	(0, _inherits3.default)(RecvHandler, _Handler2);

	function RecvHandler(rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, RecvHandler);

		// Got transport remote parameters.
		// @type {Boolean}
		var _this9 = (0, _possibleConstructorReturn3.default)(this, (RecvHandler.__proto__ || (0, _getPrototypeOf2.default)(RecvHandler)).call(this, 'recv', rtpParametersByKind, settings));

		_this9._transportCreated = false;

		// Got transport local parameters.
		// @type {Boolean}
		_this9._transportUpdated = false;

		// Seen media kinds.
		// @type {Set<String>}
		_this9._kinds = new _set2.default();

		// Map of Consumers information indexed by consumer.id.
		// - kind {String}
		// - trackId {String}
		// - ssrc {Number}
		// - rtxSsrc {Number}
		// - cname {String}
		// @type {Map<Number, Object>}
		_this9._consumerInfos = new _map2.default();
		return _this9;
	}

	(0, _createClass3.default)(RecvHandler, [{
		key: 'addConsumer',
		value: function addConsumer(consumer) {
			var _this10 = this;

			logger.debug('addConsumer() [id:%s, kind:%s]', consumer.id, consumer.kind);

			if (this._consumerInfos.has(consumer.id)) return _promise2.default.reject(new Error('Consumer already added'));

			var encoding = consumer.rtpParameters.encodings[0];
			var cname = consumer.rtpParameters.rtcp.cname;
			var consumerInfo = {
				kind: consumer.kind,
				streamId: 'recv-stream-' + consumer.id,
				trackId: 'consumer-' + consumer.kind + '-' + consumer.id,
				ssrc: encoding.ssrc,
				cname: cname
			};

			if (encoding.rtx && encoding.rtx.ssrc) consumerInfo.rtxSsrc = encoding.rtx.ssrc;

			this._consumerInfos.set(consumer.id, consumerInfo);
			this._kinds.add(consumer.kind);

			return _promise2.default.resolve().then(function () {
				if (!_this10._transportCreated) return _this10._setupTransport();
			}).then(function () {
				var remoteSdp = _this10._remoteSdp.createOfferSdp((0, _from2.default)(_this10._kinds), (0, _from2.default)(_this10._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('addConsumer() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this10._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this10._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('addConsumer() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this10._pc.setLocalDescription(answer);
			}).then(function () {
				if (!_this10._transportUpdated) return _this10._updateTransport();
			}).then(function () {
				var newRtpReceiver = _this10._pc.getReceivers().find(function (rtpReceiver) {
					var track = rtpReceiver.track;


					if (!track) return false;

					return track.id === consumerInfo.trackId;
				});

				if (!newRtpReceiver) throw new Error('remote track not found');

				return newRtpReceiver.track;
			});
		}
	}, {
		key: 'removeConsumer',
		value: function removeConsumer(consumer) {
			var _this11 = this;

			logger.debug('removeConsumer() [id:%s, kind:%s]', consumer.id, consumer.kind);

			if (!this._consumerInfos.has(consumer.id)) return _promise2.default.reject(new Error('Consumer not found'));

			this._consumerInfos.delete(consumer.id);

			return _promise2.default.resolve().then(function () {
				var remoteSdp = _this11._remoteSdp.createOfferSdp((0, _from2.default)(_this11._kinds), (0, _from2.default)(_this11._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('removeConsumer() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this11._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this11._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('removeConsumer() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this11._pc.setLocalDescription(answer);
			});
		}
	}, {
		key: 'restartIce',
		value: function restartIce(remoteIceParameters) {
			var _this12 = this;

			logger.debug('restartIce()');

			// Provide the remote SDP handler with new remote ICE parameters.
			this._remoteSdp.updateTransportRemoteIceParameters(remoteIceParameters);

			return _promise2.default.resolve().then(function () {
				var remoteSdp = _this12._remoteSdp.createOfferSdp((0, _from2.default)(_this12._kinds), (0, _from2.default)(_this12._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this12._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this12._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this12._pc.setLocalDescription(answer);
			});
		}
	}, {
		key: '_setupTransport',
		value: function _setupTransport() {
			var _this13 = this;

			logger.debug('_setupTransport()');

			return _promise2.default.resolve().then(function () {
				// We need transport remote parameters.
				return _this13.safeEmitAsPromise('@needcreatetransport', null);
			}).then(function (transportRemoteParameters) {
				// Provide the remote SDP handler with transport remote parameters.
				_this13._remoteSdp.setTransportRemoteParameters(transportRemoteParameters);

				_this13._transportCreated = true;
			});
		}
	}, {
		key: '_updateTransport',
		value: function _updateTransport() {
			logger.debug('_updateTransport()');

			// Get our local DTLS parameters.
			var sdp = this._pc.localDescription.sdp;
			var sdpObj = _sdpform2.default.parse(sdp);
			var dtlsParameters = sdpCommonUtils.extractDtlsParameters(sdpObj);
			var transportLocalParameters = { dtlsParameters: dtlsParameters };

			// We need to provide transport local parameters.
			this.safeEmit('@needupdatetransport', transportLocalParameters);

			this._transportUpdated = true;
		}
	}, {
		key: 'getPCStats',
		value: function getPCStats(selector) {
			// logger.debug('getPCStats of revc', selector);
			return this._pc.getStats(selector).then(function (stats) {
				return stats;
			}).catch(function (e) {
				throw e;
			});
		}
	}]);
	return RecvHandler;
}(Handler);

var Chrome69 = function () {
	(0, _createClass3.default)(Chrome69, null, [{
		key: 'getNativeRtpCapabilities',
		value: function getNativeRtpCapabilities() {
			logger.debug('getNativeRtpCapabilities()');

			var pc = new RTCPeerConnection({
				iceServers: [],
				iceTransportPolicy: 'all',
				bundlePolicy: 'max-bundle',
				rtcpMuxPolicy: 'require',
				sdpSemantics: 'plan-b'
			});

			return pc.createOffer({
				offerToReceiveAudio: true,
				offerToReceiveVideo: true
			}).then(function (offer) {
				try {
					pc.close();
				} catch (error) {}

				var sdpObj = _sdpform2.default.parse(offer.sdp);
				var nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities(sdpObj);

				return nativeRtpCapabilities;
			}).catch(function (error) {
				try {
					pc.close();
				} catch (error2) {}

				throw error;
			});
		}
	}, {
		key: 'tag',
		get: function get() {
			return 'Chrome69';
		}
	}]);

	function Chrome69(direction, extendedRtpCapabilities, settings) {
		(0, _classCallCheck3.default)(this, Chrome69);

		logger.debug('constructor() [direction:%s, extendedRtpCapabilities:%o]', direction, extendedRtpCapabilities);

		var rtpParametersByKind = void 0;

		switch (direction) {
			case 'send':
				{
					rtpParametersByKind = {
						audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
						video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
					};

					return new SendHandler(rtpParametersByKind, settings);
				}
			case 'recv':
				{
					rtpParametersByKind = {
						audio: ortc.getReceivingFullRtpParameters('audio', extendedRtpCapabilities),
						video: ortc.getReceivingFullRtpParameters('video', extendedRtpCapabilities)
					};

					return new RecvHandler(rtpParametersByKind, settings);
				}
		}
	}

	return Chrome69;
}();

exports.default = Chrome69;

/***/ }),

/***/ "./lib/mslib/handlers/Chrome70.js":
/*!****************************************!*\
  !*** ./lib/mslib/handlers/Chrome70.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _from = __webpack_require__(/*! babel-runtime/core-js/array/from */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/array/from.js");

var _from2 = _interopRequireDefault(_from);

var _map = __webpack_require__(/*! babel-runtime/core-js/map */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/map.js");

var _map2 = _interopRequireDefault(_map);

var _promise = __webpack_require__(/*! babel-runtime/core-js/promise */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js");

var _promise2 = _interopRequireDefault(_promise);

var _set = __webpack_require__(/*! babel-runtime/core-js/set */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/set.js");

var _set2 = _interopRequireDefault(_set);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

var _sdpform = __webpack_require__(/*! ../../sdpform */ "./lib/sdpform/index.js");

var _sdpform2 = _interopRequireDefault(_sdpform);

var _Logger = __webpack_require__(/*! ../Logger */ "./lib/mslib/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

var _EnhancedEventEmitter2 = __webpack_require__(/*! ../EnhancedEventEmitter */ "./lib/mslib/EnhancedEventEmitter.js");

var _EnhancedEventEmitter3 = _interopRequireDefault(_EnhancedEventEmitter2);

var _utils = __webpack_require__(/*! ../utils */ "./lib/mslib/utils.js");

var utils = _interopRequireWildcard(_utils);

var _ortc = __webpack_require__(/*! ../ortc */ "./lib/mslib/ortc.js");

var ortc = _interopRequireWildcard(_ortc);

var _commonUtils = __webpack_require__(/*! ./sdp/commonUtils */ "./lib/mslib/handlers/sdp/commonUtils.js");

var sdpCommonUtils = _interopRequireWildcard(_commonUtils);

var _unifiedPlanUtils = __webpack_require__(/*! ./sdp/unifiedPlanUtils */ "./lib/mslib/handlers/sdp/unifiedPlanUtils.js");

var sdpUnifiedPlanUtils = _interopRequireWildcard(_unifiedPlanUtils);

var _RemoteUnifiedPlanSdp = __webpack_require__(/*! ./sdp/RemoteUnifiedPlanSdp */ "./lib/mslib/handlers/sdp/RemoteUnifiedPlanSdp.js");

var _RemoteUnifiedPlanSdp2 = _interopRequireDefault(_RemoteUnifiedPlanSdp);

var _bandwidthHandler = __webpack_require__(/*! ./sdp/bandwidthHandler */ "./lib/mslib/handlers/sdp/bandwidthHandler.js");

var _bandwidthHandler2 = _interopRequireDefault(_bandwidthHandler);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = new _Logger2.default('Chrome70');

var Handler = function (_EnhancedEventEmitter) {
	(0, _inherits3.default)(Handler, _EnhancedEventEmitter);

	function Handler(direction, rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, Handler);

		// RTCPeerConnection instance.
		// @type {RTCPeerConnection}
		var _this = (0, _possibleConstructorReturn3.default)(this, (Handler.__proto__ || (0, _getPrototypeOf2.default)(Handler)).call(this, logger));

		_this._pc = new RTCPeerConnection({
			iceServers: settings.turnServers || [],
			iceTransportPolicy: settings.iceTransportPolicy,
			bundlePolicy: 'max-bundle',
			rtcpMuxPolicy: 'require',
			sdpSemantics: 'unified-plan'
		});

		// Generic sending RTP parameters for audio and video.
		// @type {Object}
		_this._rtpParametersByKind = rtpParametersByKind;

		// Remote SDP handler.
		// @type {RemoteUnifiedPlanSdp}
		_this._remoteSdp = new _RemoteUnifiedPlanSdp2.default(direction, rtpParametersByKind);

		// Handle RTCPeerConnection connection status.
		_this._pc.addEventListener('iceconnectionstatechange', function () {
			switch (_this._pc.iceConnectionState) {
				case 'checking':
					_this.emit('@connectionstatechange', 'connecting');
					break;
				case 'connected':
				case 'completed':
					_this.emit('@connectionstatechange', 'connected');
					break;
				case 'failed':
					_this.emit('@connectionstatechange', 'failed');
					break;
				case 'disconnected':
					_this.emit('@connectionstatechange', 'disconnected');
					break;
				case 'closed':
					_this.emit('@connectionstatechange', 'closed');
					break;
			}
		});
		return _this;
	}

	(0, _createClass3.default)(Handler, [{
		key: 'close',
		value: function close() {
			logger.debug('close()');

			// Close RTCPeerConnection.
			try {
				this._pc.close();
			} catch (error) {}
		}
	}, {
		key: 'remoteClosed',
		value: function remoteClosed() {
			logger.debug('remoteClosed()');

			this._transportReady = false;

			if (this._transportUpdated) this._transportUpdated = false;
		}
	}]);
	return Handler;
}(_EnhancedEventEmitter3.default);

var SendHandler = function (_Handler) {
	(0, _inherits3.default)(SendHandler, _Handler);

	function SendHandler(rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, SendHandler);

		// Got transport local and remote parameters.
		// @type {Boolean}
		var _this2 = (0, _possibleConstructorReturn3.default)(this, (SendHandler.__proto__ || (0, _getPrototypeOf2.default)(SendHandler)).call(this, 'send', rtpParametersByKind, settings));

		_this2._transportReady = false;

		// Ids of alive local tracks.
		// @type {Set<Number>}
		_this2._trackIds = new _set2.default();
		return _this2;
	}

	(0, _createClass3.default)(SendHandler, [{
		key: 'addProducer',
		value: function addProducer(producer) {
			var _this3 = this;

			var track = producer.track;


			logger.debug('addProducer() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			if (this._trackIds.has(track.id)) return _promise2.default.reject(new Error('track already added'));

			var transceiver = void 0;
			var localSdpObj = void 0;

			// Add the track id to the Set.
			this._trackIds.add(track.id);

			return _promise2.default.resolve().then(function () {
				// Let's check if there is any inactive transceiver for same kind and
				// reuse it if so.
				transceiver = _this3._pc.getTransceivers().find(function (t) {
					return t.receiver.track.kind === track.kind && t.direction === 'inactive';
				});

				if (transceiver) {
					logger.debug('addProducer() | reusing an inactive transceiver');

					transceiver.direction = 'sendonly';

					return transceiver.sender.replaceTrack(track);
				} else {
					transceiver = _this3._pc.addTransceiver(track, { direction: 'sendonly' });
				}
			}).then(function () {
				return _this3._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				// If simulcast is set, mangle the offer.
				if (producer.simulcast) {
					logger.debug('addProducer() | enabling simulcast');

					var sdpObject = _sdpform2.default.parse(offer.sdp);

					sdpUnifiedPlanUtils.addPlanBSimulcast(sdpObject, track, { mid: transceiver.mid });

					var offerSdp = _sdpform2.default.write(sdpObject);

					offer = { type: 'offer', sdp: offerSdp };
				}

				logger.debug('addProducer() | calling pc.setLocalDescription() offer: ' + offer.sdp);

				return _this3._pc.setLocalDescription(offer);
			}).then(function () {
				if (!_this3._transportReady) return _this3._setupTransport();
			}).then(function () {
				localSdpObj = _sdpform2.default.parse(_this3._pc.localDescription.sdp);

				logger.debug('addProducer() | this._pc.localDescription.sdp: ', localSdpObj);

				var remoteSdp = _this3._remoteSdp.createAnswerSdp(localSdpObj);

				// for video bitrate - jove
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				// 
				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('addProducer() | calling pc.setRemoteDescription() answer: ' + answer.sdp);

				return _this3._pc.setRemoteDescription(answer);
			}).then(function () {
				var rtpParameters = utils.clone(_this3._rtpParametersByKind[producer.kind]);

				sdpUnifiedPlanUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track, { mid: transceiver.mid, planBSimulcast: true });

				return rtpParameters;
			}).catch(function (error) {
				// Panic here. Try to undo things.

				try {
					transceiver.direction = 'inactive';
				} catch (error2) {}

				_this3._trackIds.delete(track.id);

				throw error;
			});
		}
	}, {
		key: 'removeProducer',
		value: function removeProducer(producer) {
			var _this4 = this;

			var track = producer.track;


			if (!this._trackIds.has(track.id)) return _promise2.default.reject(new Error('track not found'));

			logger.debug('removeProducer() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			return _promise2.default.resolve().then(function () {
				// Get the associated RTCRtpSender.
				var rtpSender = _this4._pc.getSenders().find(function (s) {
					return s.track === track;
				});

				if (!rtpSender) throw new Error('local track not found');

				_this4._pc.removeTrack(rtpSender);

				// Remove the track id from the Set.
				_this4._trackIds.delete(track.id);

				return _this4._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				logger.debug('removeProducer() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this4._pc.setLocalDescription(offer);
			}).then(function () {
				var localSdpObj = _sdpform2.default.parse(_this4._pc.localDescription.sdp);
				var remoteSdp = _this4._remoteSdp.createAnswerSdp(localSdpObj);

				// for video bitrate - jove
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('removeProducer() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this4._pc.setRemoteDescription(answer);
			});
		}
	}, {
		key: 'replaceProducerTrack',
		value: function replaceProducerTrack(producer, track) {
			var _this5 = this;

			logger.debug('replaceProducerTrack() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			var oldTrack = producer.track;

			return _promise2.default.resolve().then(function () {
				// Get the associated RTCRtpSender.
				var rtpSender = _this5._pc.getSenders().find(function (s) {
					return s.track === oldTrack;
				});

				if (!rtpSender) throw new Error('local track not found');

				return rtpSender.replaceTrack(track);
			}).then(function () {
				// Remove the old track id from the Set.
				_this5._trackIds.delete(oldTrack.id);

				// Add the new track id to the Set.
				_this5._trackIds.add(track.id);
			});
		}
	}, {
		key: 'restartIce',
		value: function restartIce(remoteIceParameters) {
			var _this6 = this;

			logger.debug('restartIce()');

			// Provide the remote SDP handler with new remote ICE parameters.
			this._remoteSdp.updateTransportRemoteIceParameters(remoteIceParameters);

			return _promise2.default.resolve().then(function () {
				return _this6._pc.createOffer({ iceRestart: true });
			}).then(function (offer) {
				logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this6._pc.setLocalDescription(offer);
			}).then(function () {
				var localSdpObj = _sdpform2.default.parse(_this6._pc.localDescription.sdp);
				var remoteSdp = _this6._remoteSdp.createAnswerSdp(localSdpObj);
				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this6._pc.setRemoteDescription(answer);
			});
		}
	}, {
		key: '_setupTransport',
		value: function _setupTransport() {
			var _this7 = this;

			logger.debug('_setupTransport()');

			return _promise2.default.resolve().then(function () {
				// Get our local DTLS parameters.
				var transportLocalParameters = {};
				var sdp = _this7._pc.localDescription.sdp;
				var sdpObj = _sdpform2.default.parse(sdp);
				var dtlsParameters = sdpCommonUtils.extractDtlsParameters(sdpObj);

				// Let's decide that we'll be DTLS server (because we can).
				dtlsParameters.role = 'server';

				transportLocalParameters.dtlsParameters = dtlsParameters;

				// Provide the remote SDP handler with transport local parameters.
				_this7._remoteSdp.setTransportLocalParameters(transportLocalParameters);

				// We need transport remote parameters.
				return _this7.safeEmitAsPromise('@needcreatetransport', transportLocalParameters);
			}).then(function (transportRemoteParameters) {
				// Provide the remote SDP handler with transport remote parameters.
				_this7._remoteSdp.setTransportRemoteParameters(transportRemoteParameters);

				_this7._transportReady = true;
			});
		}
	}, {
		key: 'getPCStats',
		value: function getPCStats(selector) {
			// logger.debug('getPCStats of send', selector);
			return this._pc.getStats(selector).then(function (stats) {
				return stats;
			}).catch(function (e) {
				throw e;
			});
		}
	}, {
		key: 'updateTrack',
		value: function updateTrack(producer, track) {
			var _this8 = this;

			logger.debug('update Track() [trackId:%s]', track.id);
			var localSdpObj; // Add the track id to the Set.
			var transceiver;

			return _promise2.default.resolve().then(function () {
				// Let's check if there is transceiver for same kind.
				// One production consists video or (and) audio track(s).
				transceiver = _this8._pc.getTransceivers().find(function (t) {
					return t.receiver.track.kind === track.kind;
				});
			}).then(function () {
				return _this8._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				// If simulcast is set, mangle the offer.
				// var offerSdp;
				if (producer.simulcast) {
					logger.debug('updateTrack() | enabling simulcast');

					var sdpObject = _sdpform2.default.parse(offer.sdp);

					sdpUnifiedPlanUtils.addPlanBSimulcast(sdpObject, track, {
						mid: transceiver.mid
					});

					var offerSdp = _sdpform2.default.write(sdpObject);

					offer = {
						type: 'offer',
						sdp: offerSdp
					};
				}

				logger.debug('updateTrack() | calling pc.setLocalDescription() [offer:%o]', offer);
				return _this8._pc.setLocalDescription(offer);
			}).then(function () {
				localSdpObj = _sdpform2.default.parse(_this8._pc.localDescription.sdp);

				var remoteSdp = _this8._remoteSdp.createAnswerSdp(localSdpObj);
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = {
					type: 'answer',
					sdp: remoteSdp
				};
				logger.debug('updateTrack() | calling pc.setRemoteDescription() [answer:%o]', answer);
				return _this8._pc.setRemoteDescription(answer);
			}).then(function () {
				var rtpParameters = utils.clone(_this8._rtpParametersByKind[producer.kind]);
				sdpUnifiedPlanUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track, {
					mid: transceiver.mid,
					planBSimulcast: true
				});
				return rtpParameters;
			}).catch(function (error) {
				// Panic here. Try to undo things.
				// failed at here and nothing to do.
				throw error;
			});
		}
	}]);
	return SendHandler;
}(Handler);

var RecvHandler = function (_Handler2) {
	(0, _inherits3.default)(RecvHandler, _Handler2);

	function RecvHandler(rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, RecvHandler);

		// Got transport remote parameters.
		// @type {Boolean}
		var _this9 = (0, _possibleConstructorReturn3.default)(this, (RecvHandler.__proto__ || (0, _getPrototypeOf2.default)(RecvHandler)).call(this, 'recv', rtpParametersByKind, settings));

		_this9._transportCreated = false;

		// Got transport local parameters.
		// @type {Boolean}
		_this9._transportUpdated = false;

		// Map of Consumers information indexed by consumer.id.
		// - mid {String}
		// - kind {String}
		// - closed {Boolean}
		// - trackId {String}
		// - ssrc {Number}
		// - rtxSsrc {Number}
		// - cname {String}
		// @type {Map<Number, Object>}
		_this9._consumerInfos = new _map2.default();
		return _this9;
	}

	(0, _createClass3.default)(RecvHandler, [{
		key: 'addConsumer',
		value: function addConsumer(consumer) {
			var _this10 = this;

			logger.debug('addConsumer() [id:%s, kind:%s]', consumer.id, consumer.kind);

			if (this._consumerInfos.has(consumer.id)) return _promise2.default.reject(new Error('Consumer already added'));

			var encoding = consumer.rtpParameters.encodings[0];
			var cname = consumer.rtpParameters.rtcp.cname;
			var consumerInfo = {
				mid: '' + consumer.kind[0] + consumer.id,
				kind: consumer.kind,
				closed: consumer.closed,
				streamId: 'recv-stream-' + consumer.id,
				trackId: 'consumer-' + consumer.kind + '-' + consumer.id,
				ssrc: encoding.ssrc,
				cname: cname
			};

			if (encoding.rtx && encoding.rtx.ssrc) consumerInfo.rtxSsrc = encoding.rtx.ssrc;

			this._consumerInfos.set(consumer.id, consumerInfo);

			return _promise2.default.resolve().then(function () {
				if (!_this10._transportCreated) return _this10._setupTransport();
			}).then(function () {
				var remoteSdp = _this10._remoteSdp.createOfferSdp((0, _from2.default)(_this10._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('addConsumer() | calling pc.setRemoteDescription() kind:%s [offer:%o]', consumer.kind, offer);

				return _this10._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this10._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('addConsumer() | calling pc.setLocalDescription() kind:%s [answer:%o]', consumer.kind, answer);

				return _this10._pc.setLocalDescription(answer);
			}).then(function () {
				if (!_this10._transportUpdated) return _this10._updateTransport();
			}).then(function () {
				var transceiver = _this10._pc.getTransceivers().find(function (t) {
					return t.mid === consumerInfo.mid;
				});

				if (!transceiver) throw new Error('remote track not found');

				return transceiver.receiver.track;
			});
		}
	}, {
		key: 'removeConsumer',
		value: function removeConsumer(consumer) {
			var _this11 = this;

			logger.debug('removeConsumer() [id:%s, kind:%s]', consumer.id, consumer.kind);

			var consumerInfo = this._consumerInfos.get(consumer.id);

			if (!consumerInfo) return _promise2.default.reject(new Error('Consumer not found'));

			consumerInfo.closed = true;

			return _promise2.default.resolve().then(function () {
				var remoteSdp = _this11._remoteSdp.createOfferSdp((0, _from2.default)(_this11._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('removeConsumer() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this11._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this11._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('removeConsumer() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this11._pc.setLocalDescription(answer);
			});
		}
	}, {
		key: 'restartIce',
		value: function restartIce(remoteIceParameters) {
			var _this12 = this;

			logger.debug('restartIce()');

			// Provide the remote SDP handler with new remote ICE parameters.
			this._remoteSdp.updateTransportRemoteIceParameters(remoteIceParameters);

			return _promise2.default.resolve().then(function () {
				var remoteSdp = _this12._remoteSdp.createOfferSdp((0, _from2.default)(_this12._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this12._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this12._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this12._pc.setLocalDescription(answer);
			});
		}
	}, {
		key: '_setupTransport',
		value: function _setupTransport() {
			var _this13 = this;

			logger.debug('_setupTransport()');

			return _promise2.default.resolve().then(function () {
				// We need transport remote parameters.
				return _this13.safeEmitAsPromise('@needcreatetransport', null);
			}).then(function (transportRemoteParameters) {
				// Provide the remote SDP handler with transport remote parameters.
				_this13._remoteSdp.setTransportRemoteParameters(transportRemoteParameters);

				_this13._transportCreated = true;
			});
		}
	}, {
		key: '_updateTransport',
		value: function _updateTransport() {
			logger.debug('_updateTransport()');

			// Get our local DTLS parameters.
			var sdp = this._pc.localDescription.sdp;
			var sdpObj = _sdpform2.default.parse(sdp);
			var dtlsParameters = sdpCommonUtils.extractDtlsParameters(sdpObj);
			var transportLocalParameters = { dtlsParameters: dtlsParameters };

			// We need to provide transport local parameters.
			this.safeEmit('@needupdatetransport', transportLocalParameters);

			this._transportUpdated = true;
		}
	}, {
		key: 'getPCStats',
		value: function getPCStats(selector) {
			// logger.debug('getPCStats of revc', selector);
			return this._pc.getStats(selector).then(function (stats) {
				return stats;
			}).catch(function (e) {
				throw e;
			});
		}
	}]);
	return RecvHandler;
}(Handler);

var Chrome70 = function () {
	(0, _createClass3.default)(Chrome70, null, [{
		key: 'getNativeRtpCapabilities',
		value: function getNativeRtpCapabilities() {
			logger.debug('getNativeRtpCapabilities()');

			var pc = new RTCPeerConnection({
				iceServers: [],
				iceTransportPolicy: 'all',
				bundlePolicy: 'max-bundle',
				rtcpMuxPolicy: 'require',
				sdpSemantics: 'unified-plan'
			});

			pc.addTransceiver('audio');
			pc.addTransceiver('video');

			return pc.createOffer().then(function (offer) {
				try {
					pc.close();
				} catch (error) {}

				var sdpObj = _sdpform2.default.parse(offer.sdp);
				var nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities(sdpObj);

				return nativeRtpCapabilities;
			}).catch(function (error) {
				try {
					pc.close();
				} catch (error2) {}

				throw error;
			});
		}
	}, {
		key: 'tag',
		get: function get() {
			return 'Chrome70';
		}
	}]);

	function Chrome70(direction, extendedRtpCapabilities, settings) {
		(0, _classCallCheck3.default)(this, Chrome70);

		logger.debug('constructor() [direction:%s, extendedRtpCapabilities:%o]', direction, extendedRtpCapabilities);

		var rtpParametersByKind = void 0;

		switch (direction) {
			case 'send':
				{
					rtpParametersByKind = {
						audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
						video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
					};

					return new SendHandler(rtpParametersByKind, settings);
				}
			case 'recv':
				{
					rtpParametersByKind = {
						audio: ortc.getReceivingFullRtpParameters('audio', extendedRtpCapabilities),
						video: ortc.getReceivingFullRtpParameters('video', extendedRtpCapabilities)
					};

					return new RecvHandler(rtpParametersByKind, settings);
				}
		}
	}

	return Chrome70;
}();

exports.default = Chrome70;

/***/ }),

/***/ "./lib/mslib/handlers/Edge11.js":
/*!**************************************!*\
  !*** ./lib/mslib/handlers/Edge11.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _getIterator2 = __webpack_require__(/*! babel-runtime/core-js/get-iterator */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/get-iterator.js");

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _map = __webpack_require__(/*! babel-runtime/core-js/map */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/map.js");

var _map2 = _interopRequireDefault(_map);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _promise = __webpack_require__(/*! babel-runtime/core-js/promise */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js");

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

var _Logger = __webpack_require__(/*! ../Logger */ "./lib/mslib/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

var _EnhancedEventEmitter2 = __webpack_require__(/*! ../EnhancedEventEmitter */ "./lib/mslib/EnhancedEventEmitter.js");

var _EnhancedEventEmitter3 = _interopRequireDefault(_EnhancedEventEmitter2);

var _utils = __webpack_require__(/*! ../utils */ "./lib/mslib/utils.js");

var utils = _interopRequireWildcard(_utils);

var _ortc = __webpack_require__(/*! ../ortc */ "./lib/mslib/ortc.js");

var ortc = _interopRequireWildcard(_ortc);

var _edgeUtils = __webpack_require__(/*! ./ortc/edgeUtils */ "./lib/mslib/handlers/ortc/edgeUtils.js");

var edgeUtils = _interopRequireWildcard(_edgeUtils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CNAME = 'CNAME-EDGE-' + utils.randomNumber(); /* global RTCIceGatherer, RTCIceTransport, RTCDtlsTransport, RTCRtpReceiver, RTCRtpSender */

var logger = new _Logger2.default('Edge11');

var Edge11 = function (_EnhancedEventEmitter) {
	(0, _inherits3.default)(Edge11, _EnhancedEventEmitter);
	(0, _createClass3.default)(Edge11, null, [{
		key: 'getNativeRtpCapabilities',
		value: function getNativeRtpCapabilities() {
			logger.debug('getNativeRtpCapabilities()');

			return _promise2.default.resolve(edgeUtils.getCapabilities());
		}
	}, {
		key: 'tag',
		get: function get() {
			return 'Edge11';
		}
	}]);

	function Edge11(direction, extendedRtpCapabilities, settings) {
		(0, _classCallCheck3.default)(this, Edge11);

		var _this = (0, _possibleConstructorReturn3.default)(this, (Edge11.__proto__ || (0, _getPrototypeOf2.default)(Edge11)).call(this, logger));

		logger.debug('constructor() [direction:%s, extendedRtpCapabilities:%o]', direction, extendedRtpCapabilities);

		// Generic sending RTP parameters for audio and video.
		// @type {Object}
		_this._rtpParametersByKind = {
			audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
			video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
		};

		// Got transport local and remote parameters.
		// @type {Boolean}
		_this._transportReady = false;

		// ICE gatherer.
		_this._iceGatherer = null;

		// ICE transport.
		_this._iceTransport = null;

		// DTLS transport.
		// @type {RTCDtlsTransport}
		_this._dtlsTransport = null;

		// Map of RTCRtpSenders indexed by Producer.id.
		// @type {Map<Number, RTCRtpSender}
		_this._rtpSenders = new _map2.default();

		// Map of RTCRtpReceivers indexed by Consumer.id.
		// @type {Map<Number, RTCRtpReceiver}
		_this._rtpReceivers = new _map2.default();

		// Remote Transport parameters.
		// @type {Object}
		_this._transportRemoteParameters = null;

		_this._setIceGatherer(settings);
		_this._setIceTransport();
		_this._setDtlsTransport();
		return _this;
	}

	(0, _createClass3.default)(Edge11, [{
		key: 'close',
		value: function close() {
			logger.debug('close()');

			// Close the ICE gatherer.
			// NOTE: Not yet implemented by Edge.
			try {
				this._iceGatherer.close();
			} catch (error) {}

			// Close the ICE transport.
			try {
				this._iceTransport.stop();
			} catch (error) {}

			// Close the DTLS transport.
			try {
				this._dtlsTransport.stop();
			} catch (error) {}

			// Close RTCRtpSenders.
			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = (0, _getIterator3.default)(this._rtpSenders.values()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var rtpSender = _step.value;

					try {
						rtpSender.stop();
					} catch (error) {}
				}

				// Close RTCRtpReceivers.
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}

			var _iteratorNormalCompletion2 = true;
			var _didIteratorError2 = false;
			var _iteratorError2 = undefined;

			try {
				for (var _iterator2 = (0, _getIterator3.default)(this._rtpReceivers.values()), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
					var rtpReceiver = _step2.value;

					try {
						rtpReceiver.stop();
					} catch (error) {}
				}
			} catch (err) {
				_didIteratorError2 = true;
				_iteratorError2 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion2 && _iterator2.return) {
						_iterator2.return();
					}
				} finally {
					if (_didIteratorError2) {
						throw _iteratorError2;
					}
				}
			}
		}
	}, {
		key: 'remoteClosed',
		value: function remoteClosed() {
			logger.debug('remoteClosed()');

			this._transportReady = false;
		}
	}, {
		key: 'addProducer',
		value: function addProducer(producer) {
			var _this2 = this;

			var track = producer.track;


			logger.debug('addProducer() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			if (this._rtpSenders.has(producer.id)) return _promise2.default.reject(new Error('Producer already added'));

			return _promise2.default.resolve().then(function () {
				if (!_this2._transportReady) return _this2._setupTransport();
			}).then(function () {
				logger.debug('addProducer() | calling new RTCRtpSender()');

				var rtpSender = new RTCRtpSender(track, _this2._dtlsTransport);
				var rtpParameters = utils.clone(_this2._rtpParametersByKind[producer.kind]);

				// Fill RTCRtpParameters.encodings.
				var encoding = {
					ssrc: utils.randomNumber()
				};

				if (rtpParameters.codecs.some(function (codec) {
					return codec.name === 'rtx';
				})) {
					encoding.rtx = {
						ssrc: utils.randomNumber()
					};
				}

				rtpParameters.encodings.push(encoding);

				// Fill RTCRtpParameters.rtcp.
				rtpParameters.rtcp = {
					cname: CNAME,
					reducedSize: true,
					mux: true
				};

				// NOTE: Convert our standard RTCRtpParameters into those that Edge
				// expects.
				var edgeRtpParameters = edgeUtils.mangleRtpParameters(rtpParameters);

				logger.debug('addProducer() | calling rtpSender.send() [params:%o]', edgeRtpParameters);

				rtpSender.send(edgeRtpParameters);

				// Store it.
				_this2._rtpSenders.set(producer.id, rtpSender);

				return rtpParameters;
			});
		}
	}, {
		key: 'removeProducer',
		value: function removeProducer(producer) {
			var _this3 = this;

			var track = producer.track;


			logger.debug('removeProducer() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			return _promise2.default.resolve().then(function () {
				var rtpSender = _this3._rtpSenders.get(producer.id);

				if (!rtpSender) throw new Error('RTCRtpSender not found');

				_this3._rtpSenders.delete(producer.id);

				try {
					logger.debug('removeProducer() | calling rtpSender.stop()');

					rtpSender.stop();
				} catch (error) {
					logger.warn('rtpSender.stop() failed:%o', error);
				}
			});
		}
	}, {
		key: 'replaceProducerTrack',
		value: function replaceProducerTrack(producer, track) {
			var _this4 = this;

			logger.debug('replaceProducerTrack() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			return _promise2.default.resolve().then(function () {
				var rtpSender = _this4._rtpSenders.get(producer.id);

				if (!rtpSender) throw new Error('RTCRtpSender not found');

				rtpSender.setTrack(track);
			});
		}
	}, {
		key: 'addConsumer',
		value: function addConsumer(consumer) {
			var _this5 = this;

			logger.debug('addConsumer() [id:%s, kind:%s]', consumer.id, consumer.kind);

			if (this._rtpReceivers.has(consumer.id)) return _promise2.default.reject(new Error('Consumer already added'));

			return _promise2.default.resolve().then(function () {
				if (!_this5._transportReady) return _this5._setupTransport();
			}).then(function () {
				logger.debug('addConsumer() | calling new RTCRtpReceiver()');

				var rtpReceiver = new RTCRtpReceiver(_this5._dtlsTransport, consumer.kind);

				rtpReceiver.addEventListener('error', function (event) {
					logger.error('iceGatherer "error" event [event:%o]', event);
				});

				// NOTE: Convert our standard RTCRtpParameters into those that Edge
				// expects.
				var edgeRtpParameters = edgeUtils.mangleRtpParameters(consumer.rtpParameters);

				// Ignore MID RTP extension for receiving media.
				edgeRtpParameters.headerExtensions = edgeRtpParameters.headerExtensions.filter(function (extension) {
					return extension.uri !== 'urn:ietf:params:rtp-hdrext:sdes:mid';
				});

				logger.debug('addConsumer() | calling rtpReceiver.receive() [params:%o]', edgeRtpParameters);

				rtpReceiver.receive(edgeRtpParameters);

				// Store it.
				_this5._rtpReceivers.set(consumer.id, rtpReceiver);

				return rtpReceiver.track;
			});
		}
	}, {
		key: 'removeConsumer',
		value: function removeConsumer(consumer) {
			var _this6 = this;

			logger.debug('removeConsumer() [id:%s, kind:%s]', consumer.id, consumer.kind);

			return _promise2.default.resolve().then(function () {
				var rtpReceiver = _this6._rtpReceivers.get(consumer.id);

				if (!rtpReceiver) throw new Error('RTCRtpReceiver not found');

				_this6._rtpReceivers.delete(consumer.id);

				try {
					logger.debug('removeConsumer() | calling rtpReceiver.stop()');

					rtpReceiver.stop();
				} catch (error) {
					logger.warn('rtpReceiver.stop() failed:%o', error);
				}
			});
		}
	}, {
		key: 'restartIce',
		value: function restartIce(remoteIceParameters) {
			var _this7 = this;

			logger.debug('restartIce()');

			_promise2.default.resolve().then(function () {
				_this7._transportRemoteParameters.iceParameters = remoteIceParameters;

				var remoteIceCandidates = _this7._transportRemoteParameters.iceCandidates;

				logger.debug('restartIce() | calling iceTransport.start()');

				_this7._iceTransport.start(_this7._iceGatherer, remoteIceParameters, 'controlling');

				var _iteratorNormalCompletion3 = true;
				var _didIteratorError3 = false;
				var _iteratorError3 = undefined;

				try {
					for (var _iterator3 = (0, _getIterator3.default)(remoteIceCandidates), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
						var candidate = _step3.value;

						_this7._iceTransport.addRemoteCandidate(candidate);
					}
				} catch (err) {
					_didIteratorError3 = true;
					_iteratorError3 = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion3 && _iterator3.return) {
							_iterator3.return();
						}
					} finally {
						if (_didIteratorError3) {
							throw _iteratorError3;
						}
					}
				}

				_this7._iceTransport.addRemoteCandidate({});
			});
		}
	}, {
		key: '_setIceGatherer',
		value: function _setIceGatherer(settings) {
			var iceGatherer = new RTCIceGatherer({
				iceServers: settings.turnServers || [],
				gatherPolicy: settings.iceTransportPolicy
			});

			iceGatherer.addEventListener('error', function (event) {
				logger.error('iceGatherer "error" event [event:%o]', event);
			});

			// NOTE: Not yet implemented by Edge, which starts gathering automatically.
			try {
				iceGatherer.gather();
			} catch (error) {
				logger.debug('iceGatherer.gather() failed: %s', error.toString());
			}

			this._iceGatherer = iceGatherer;
		}
	}, {
		key: '_setIceTransport',
		value: function _setIceTransport() {
			var _this8 = this;

			var iceTransport = new RTCIceTransport(this._iceGatherer);

			// NOTE: Not yet implemented by Edge.
			iceTransport.addEventListener('statechange', function () {
				switch (iceTransport.state) {
					case 'checking':
						_this8.emit('@connectionstatechange', 'connecting');
						break;
					case 'connected':
					case 'completed':
						_this8.emit('@connectionstatechange', 'connected');
						break;
					case 'failed':
						_this8.emit('@connectionstatechange', 'failed');
						break;
					case 'disconnected':
						_this8.emit('@connectionstatechange', 'disconnected');
						break;
					case 'closed':
						_this8.emit('@connectionstatechange', 'closed');
						break;
				}
			});

			// NOTE: Not standard, but implemented by Edge.
			iceTransport.addEventListener('icestatechange', function () {
				switch (iceTransport.state) {
					case 'checking':
						_this8.emit('@connectionstatechange', 'connecting');
						break;
					case 'connected':
					case 'completed':
						_this8.emit('@connectionstatechange', 'connected');
						break;
					case 'failed':
						_this8.emit('@connectionstatechange', 'failed');
						break;
					case 'disconnected':
						_this8.emit('@connectionstatechange', 'disconnected');
						break;
					case 'closed':
						_this8.emit('@connectionstatechange', 'closed');
						break;
				}
			});

			iceTransport.addEventListener('candidatepairchange', function (event) {
				logger.debug('iceTransport "candidatepairchange" event [pair:%o]', event.pair);
			});

			this._iceTransport = iceTransport;
		}
	}, {
		key: '_setDtlsTransport',
		value: function _setDtlsTransport() {
			var _this9 = this;

			var dtlsTransport = new RTCDtlsTransport(this._iceTransport);

			// NOTE: Not yet implemented by Edge.
			dtlsTransport.addEventListener('statechange', function () {
				logger.debug('dtlsTransport "statechange" event [state:%s]', dtlsTransport.state);
			});

			// NOTE: Not standard, but implemented by Edge.
			dtlsTransport.addEventListener('dtlsstatechange', function () {
				logger.debug('dtlsTransport "dtlsstatechange" event [state:%s]', dtlsTransport.state);

				if (dtlsTransport.state === 'closed') _this9.emit('@connectionstatechange', 'closed');
			});

			dtlsTransport.addEventListener('error', function (event) {
				logger.error('dtlsTransport "error" event [event:%o]', event);
			});

			this._dtlsTransport = dtlsTransport;
		}
	}, {
		key: '_setupTransport',
		value: function _setupTransport() {
			var _this10 = this;

			logger.debug('_setupTransport()');

			return _promise2.default.resolve().then(function () {
				// Get our local DTLS parameters.
				var transportLocalParameters = {};
				var dtlsParameters = _this10._dtlsTransport.getLocalParameters();

				// Let's decide that we'll be DTLS server (because we can).
				dtlsParameters.role = 'server';

				transportLocalParameters.dtlsParameters = dtlsParameters;

				// We need transport remote parameters.
				return _this10.safeEmitAsPromise('@needcreatetransport', transportLocalParameters);
			}).then(function (transportRemoteParameters) {
				_this10._transportRemoteParameters = transportRemoteParameters;

				var remoteIceParameters = transportRemoteParameters.iceParameters;
				var remoteIceCandidates = transportRemoteParameters.iceCandidates;
				var remoteDtlsParameters = transportRemoteParameters.dtlsParameters;

				// Start the RTCIceTransport.
				_this10._iceTransport.start(_this10._iceGatherer, remoteIceParameters, 'controlling');

				// Add remote ICE candidates.
				var _iteratorNormalCompletion4 = true;
				var _didIteratorError4 = false;
				var _iteratorError4 = undefined;

				try {
					for (var _iterator4 = (0, _getIterator3.default)(remoteIceCandidates), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
						var candidate = _step4.value;

						_this10._iceTransport.addRemoteCandidate(candidate);
					}

					// Also signal a 'complete' candidate as per spec.
					// NOTE: It should be {complete: true} but Edge prefers {}.
					// NOTE: If we don't signal end of candidates, the Edge RTCIceTransport
					// won't enter the 'completed' state.
				} catch (err) {
					_didIteratorError4 = true;
					_iteratorError4 = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion4 && _iterator4.return) {
							_iterator4.return();
						}
					} finally {
						if (_didIteratorError4) {
							throw _iteratorError4;
						}
					}
				}

				_this10._iceTransport.addRemoteCandidate({});

				// NOTE: Edge does not like SHA less than 256.
				remoteDtlsParameters.fingerprints = remoteDtlsParameters.fingerprints.filter(function (fingerprint) {
					return fingerprint.algorithm === 'sha-256' || fingerprint.algorithm === 'sha-384' || fingerprint.algorithm === 'sha-512';
				});

				// Start the RTCDtlsTransport.
				_this10._dtlsTransport.start(remoteDtlsParameters);

				_this10._transportReady = true;
			});
		}
	}]);
	return Edge11;
}(_EnhancedEventEmitter3.default);

exports.default = Edge11;

/***/ }),

/***/ "./lib/mslib/handlers/Firefox50.js":
/*!*****************************************!*\
  !*** ./lib/mslib/handlers/Firefox50.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _from = __webpack_require__(/*! babel-runtime/core-js/array/from */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/array/from.js");

var _from2 = _interopRequireDefault(_from);

var _map = __webpack_require__(/*! babel-runtime/core-js/map */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/map.js");

var _map2 = _interopRequireDefault(_map);

var _extends2 = __webpack_require__(/*! babel-runtime/helpers/extends */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/extends.js");

var _extends3 = _interopRequireDefault(_extends2);

var _promise = __webpack_require__(/*! babel-runtime/core-js/promise */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js");

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

var _sdpform = __webpack_require__(/*! ../../sdpform */ "./lib/sdpform/index.js");

var _sdpform2 = _interopRequireDefault(_sdpform);

var _Logger = __webpack_require__(/*! ../Logger */ "./lib/mslib/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

var _EnhancedEventEmitter2 = __webpack_require__(/*! ../EnhancedEventEmitter */ "./lib/mslib/EnhancedEventEmitter.js");

var _EnhancedEventEmitter3 = _interopRequireDefault(_EnhancedEventEmitter2);

var _utils = __webpack_require__(/*! ../utils */ "./lib/mslib/utils.js");

var utils = _interopRequireWildcard(_utils);

var _ortc = __webpack_require__(/*! ../ortc */ "./lib/mslib/ortc.js");

var ortc = _interopRequireWildcard(_ortc);

var _commonUtils = __webpack_require__(/*! ./sdp/commonUtils */ "./lib/mslib/handlers/sdp/commonUtils.js");

var sdpCommonUtils = _interopRequireWildcard(_commonUtils);

var _unifiedPlanUtils = __webpack_require__(/*! ./sdp/unifiedPlanUtils */ "./lib/mslib/handlers/sdp/unifiedPlanUtils.js");

var sdpUnifiedPlanUtils = _interopRequireWildcard(_unifiedPlanUtils);

var _RemoteUnifiedPlanSdp = __webpack_require__(/*! ./sdp/RemoteUnifiedPlanSdp */ "./lib/mslib/handlers/sdp/RemoteUnifiedPlanSdp.js");

var _RemoteUnifiedPlanSdp2 = _interopRequireDefault(_RemoteUnifiedPlanSdp);

var _bandwidthHandler = __webpack_require__(/*! ./sdp/bandwidthHandler */ "./lib/mslib/handlers/sdp/bandwidthHandler.js");

var _bandwidthHandler2 = _interopRequireDefault(_bandwidthHandler);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = new _Logger2.default('Firefox50');

var Handler = function (_EnhancedEventEmitter) {
	(0, _inherits3.default)(Handler, _EnhancedEventEmitter);

	function Handler(direction, rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, Handler);

		// RTCPeerConnection instance.
		// @type {RTCPeerConnection}
		var _this = (0, _possibleConstructorReturn3.default)(this, (Handler.__proto__ || (0, _getPrototypeOf2.default)(Handler)).call(this, logger));

		_this._pc = new RTCPeerConnection({
			iceServers: settings.turnServers || [],
			iceTransportPolicy: settings.iceTransportPolicy,
			bundlePolicy: 'max-bundle',
			rtcpMuxPolicy: 'require'
		});

		// Generic sending RTP parameters for audio and video.
		// @type {Object}
		_this._rtpParametersByKind = rtpParametersByKind;

		// Remote SDP handler.
		// @type {RemoteUnifiedPlanSdp}
		_this._remoteSdp = new _RemoteUnifiedPlanSdp2.default(direction, rtpParametersByKind);

		// Handle RTCPeerConnection connection status.
		_this._pc.addEventListener('iceconnectionstatechange', function () {
			switch (_this._pc.iceConnectionState) {
				case 'checking':
					_this.emit('@connectionstatechange', 'connecting');
					break;
				case 'connected':
				case 'completed':
					_this.emit('@connectionstatechange', 'connected');
					break;
				case 'failed':
					_this.emit('@connectionstatechange', 'failed');
					break;
				case 'disconnected':
					_this.emit('@connectionstatechange', 'disconnected');
					break;
				case 'closed':
					_this.emit('@connectionstatechange', 'closed');
					break;
			}
		});
		return _this;
	}

	(0, _createClass3.default)(Handler, [{
		key: 'close',
		value: function close() {
			logger.debug('close()');

			// Close RTCPeerConnection.
			try {
				this._pc.close();
			} catch (error) {}
		}
	}, {
		key: 'remoteClosed',
		value: function remoteClosed() {
			logger.debug('remoteClosed()');

			this._transportReady = false;

			if (this._transportUpdated) this._transportUpdated = false;
		}
	}]);
	return Handler;
}(_EnhancedEventEmitter3.default);

var SendHandler = function (_Handler) {
	(0, _inherits3.default)(SendHandler, _Handler);

	function SendHandler(rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, SendHandler);

		// Got transport local and remote parameters.
		// @type {Boolean}
		var _this2 = (0, _possibleConstructorReturn3.default)(this, (SendHandler.__proto__ || (0, _getPrototypeOf2.default)(SendHandler)).call(this, 'send', rtpParametersByKind, settings));

		_this2._transportReady = false;

		// Local stream.
		// @type {MediaStream}
		_this2._stream = new MediaStream();

		// RID value counter for simulcast (so they never match).
		// @type {Number}
		_this2._nextRid = 1;
		return _this2;
	}

	(0, _createClass3.default)(SendHandler, [{
		key: 'addProducer',
		value: function addProducer(producer) {
			var _this3 = this;

			var track = producer.track;


			logger.debug('addProducer() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			if (this._stream.getTrackById(track.id)) return _promise2.default.reject(new Error('track already added'));

			var rtpSender = void 0;
			var localSdpObj = void 0;

			return _promise2.default.resolve().then(function () {
				_this3._stream.addTrack(track);

				// Add the stream to the PeerConnection.
				rtpSender = _this3._pc.addTrack(track, _this3._stream);
			}).then(function () {
				var encodings = [];

				if (producer.simulcast) {
					logger.debug('addProducer() | enabling simulcast');

					if (producer.simulcast.high) {
						encodings.push({
							rid: 'high' + _this3._nextRid,
							active: true,
							priority: 'low',
							maxBitrate: producer.simulcast.high
						});
					}

					if (producer.simulcast.medium) {
						encodings.push({
							rid: 'medium' + _this3._nextRid,
							active: true,
							priority: 'medium',
							maxBitrate: producer.simulcast.medium
						});
					}

					if (producer.simulcast.low) {
						encodings.push({
							rid: 'low' + _this3._nextRid,
							active: true,
							priority: 'high',
							maxBitrate: producer.simulcast.low
						});
					}

					// Update RID counter for future ones.
					_this3._nextRid++;
				}

				var parameters = rtpSender.getParameters();

				return rtpSender.setParameters((0, _extends3.default)({}, parameters, { encodings: encodings }));
			}).then(function () {
				return _this3._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				logger.debug('addProducer() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this3._pc.setLocalDescription(offer);
			}).then(function () {
				if (!_this3._transportReady) return _this3._setupTransport();
			}).then(function () {
				localSdpObj = _sdpform2.default.parse(_this3._pc.localDescription.sdp);

				var remoteSdp = _this3._remoteSdp.createAnswerSdp(localSdpObj);

				// for video bitrate - jove
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('addProducer() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this3._pc.setRemoteDescription(answer);
			}).then(function () {
				var rtpParameters = utils.clone(_this3._rtpParametersByKind[producer.kind]);

				// Fill the RTP parameters for this track.
				sdpUnifiedPlanUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track);

				return rtpParameters;
			}).catch(function (error) {
				// Panic here. Try to undo things.

				try {
					_this3._pc.removeTrack(rtpSender);
				} catch (error2) {}

				_this3._stream.removeTrack(track);

				throw error;
			});
		}
	}, {
		key: 'removeProducer',
		value: function removeProducer(producer) {
			var _this4 = this;

			var track = producer.track;


			logger.debug('removeProducer() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			return _promise2.default.resolve().then(function () {
				// Get the associated RTCRtpSender.
				var rtpSender = _this4._pc.getSenders().find(function (s) {
					return s.track === track;
				});

				if (!rtpSender) throw new Error('RTCRtpSender not found');

				// Remove the associated RtpSender.
				_this4._pc.removeTrack(rtpSender);

				// Remove the track from the local stream.
				_this4._stream.removeTrack(track);

				return _this4._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				logger.debug('removeProducer() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this4._pc.setLocalDescription(offer);
			}).then(function () {
				var localSdpObj = _sdpform2.default.parse(_this4._pc.localDescription.sdp);
				var remoteSdp = _this4._remoteSdp.createAnswerSdp(localSdpObj);

				// for video bitrate - jove
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('removeProducer() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this4._pc.setRemoteDescription(answer);
			});
		}
	}, {
		key: 'replaceProducerTrack',
		value: function replaceProducerTrack(producer, track) {
			var _this5 = this;

			logger.debug('replaceProducerTrack() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			var oldTrack = producer.track;

			return _promise2.default.resolve().then(function () {
				// Get the associated RTCRtpSender.
				var rtpSender = _this5._pc.getSenders().find(function (s) {
					return s.track === oldTrack;
				});

				if (!rtpSender) throw new Error('local track not found');

				return rtpSender.replaceTrack(track);
			}).then(function () {
				// Remove the old track from the local stream.
				_this5._stream.removeTrack(oldTrack);

				// Add the new track to the local stream.
				_this5._stream.addTrack(track);
			});
		}
	}, {
		key: 'restartIce',
		value: function restartIce(remoteIceParameters) {
			var _this6 = this;

			logger.debug('restartIce()');

			// Provide the remote SDP handler with new remote ICE parameters.
			this._remoteSdp.updateTransportRemoteIceParameters(remoteIceParameters);

			return _promise2.default.resolve().then(function () {
				return _this6._pc.createOffer({ iceRestart: true });
			}).then(function (offer) {
				logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this6._pc.setLocalDescription(offer);
			}).then(function () {
				var localSdpObj = _sdpform2.default.parse(_this6._pc.localDescription.sdp);
				var remoteSdp = _this6._remoteSdp.createAnswerSdp(localSdpObj);
				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this6._pc.setRemoteDescription(answer);
			});
		}
	}, {
		key: '_setupTransport',
		value: function _setupTransport() {
			var _this7 = this;

			logger.debug('_setupTransport()');

			return _promise2.default.resolve().then(function () {
				// Get our local DTLS parameters.
				var transportLocalParameters = {};
				var sdp = _this7._pc.localDescription.sdp;
				var sdpObj = _sdpform2.default.parse(sdp);
				var dtlsParameters = sdpCommonUtils.extractDtlsParameters(sdpObj);

				// Let's decide that we'll be DTLS server (because we can).
				dtlsParameters.role = 'server';

				transportLocalParameters.dtlsParameters = dtlsParameters;

				// Provide the remote SDP handler with transport local parameters.
				_this7._remoteSdp.setTransportLocalParameters(transportLocalParameters);

				// We need transport remote parameters.
				return _this7.safeEmitAsPromise('@needcreatetransport', transportLocalParameters);
			}).then(function (transportRemoteParameters) {
				// Provide the remote SDP handler with transport remote parameters.
				_this7._remoteSdp.setTransportRemoteParameters(transportRemoteParameters);

				_this7._transportReady = true;
			});
		}
	}, {
		key: 'updateTrack',
		value: function updateTrack(producer, track) {
			var _this8 = this;

			logger.debug('update Track() [trackId:%s]', track.id);
			var localSdpObj; // Add the track id to the Set.
			var transceiver;

			return _promise2.default.resolve().then(function () {
				// Let's check if there is transceiver for same kind.
				// One production consists video or (and) audio track(s).
				transceiver = _this8._pc.getTransceivers().find(function (t) {
					return t.receiver.track.kind === track.kind;
				});
			}).then(function () {
				return _this8._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				// If simulcast is set, mangle the offer.
				// var offerSdp;
				if (producer.simulcast) {
					logger.debug('updateTrack() | enabling simulcast');

					var sdpObject = _sdpform2.default.parse(offer.sdp);

					sdpUnifiedPlanUtils.addPlanBSimulcast(sdpObject, track, {
						mid: transceiver.mid
					});

					var offerSdp = _sdpform2.default.write(sdpObject);

					offer = {
						type: 'offer',
						sdp: offerSdp
					};
				}

				logger.debug('updateTrack() | calling pc.setLocalDescription() [offer:%o]', offer);
				return _this8._pc.setLocalDescription(offer);
			}).then(function () {
				localSdpObj = _sdpform2.default.parse(_this8._pc.localDescription.sdp);

				var remoteSdp = _this8._remoteSdp.createAnswerSdp(localSdpObj);
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = {
					type: 'answer',
					sdp: remoteSdp
				};
				logger.debug('updateTrack() | calling pc.setRemoteDescription() [answer:%o]', answer);
				return _this8._pc.setRemoteDescription(answer);
			}).then(function () {
				var rtpParameters = utils.clone(_this8._rtpParametersByKind[producer.kind]);
				sdpUnifiedPlanUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track, {
					mid: transceiver.mid,
					planBSimulcast: true
				});
				return rtpParameters;
			}).catch(function (error) {
				// Panic here. Try to undo things.
				// failed at here and nothing to do.
				throw error;
			});
		}
	}]);
	return SendHandler;
}(Handler);

var RecvHandler = function (_Handler2) {
	(0, _inherits3.default)(RecvHandler, _Handler2);

	function RecvHandler(rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, RecvHandler);

		// Got transport remote parameters.
		// @type {Boolean}
		var _this9 = (0, _possibleConstructorReturn3.default)(this, (RecvHandler.__proto__ || (0, _getPrototypeOf2.default)(RecvHandler)).call(this, 'recv', rtpParametersByKind, settings));

		_this9._transportCreated = false;

		// Got transport local parameters.
		// @type {Boolean}
		_this9._transportUpdated = false;

		// Map of Consumers information indexed by consumer.id.
		// - mid {String}
		// - kind {String}
		// - closed {Boolean}
		// - trackId {String}
		// - ssrc {Number}
		// - rtxSsrc {Number}
		// - cname {String}
		// @type {Map<Number, Object>}
		_this9._consumerInfos = new _map2.default();

		// Add an entry into consumers info to hold a fake DataChannel, so
		// the first m= section of the remote SDP is always "active" and Firefox
		// does not close the transport when there is no remote audio/video Consumers.
		//
		// ISSUE: https://github.com/versatica/mediasoup-client/issues/2
		var fakeDataChannelConsumerInfo = {
			mid: 'fake-dc',
			kind: 'application',
			closed: false,
			cname: null
		};

		_this9._consumerInfos.set(555, fakeDataChannelConsumerInfo);
		return _this9;
	}

	(0, _createClass3.default)(RecvHandler, [{
		key: 'addConsumer',
		value: function addConsumer(consumer) {
			var _this10 = this;

			logger.debug('addConsumer() [id:%s, kind:%s]', consumer.id, consumer.kind);

			if (this._consumerInfos.has(consumer.id)) return _promise2.default.reject(new Error('Consumer already added'));

			var encoding = consumer.rtpParameters.encodings[0];
			var cname = consumer.rtpParameters.rtcp.cname;
			var consumerInfo = {
				mid: '' + consumer.kind[0] + consumer.id,
				kind: consumer.kind,
				closed: consumer.closed,
				streamId: 'recv-stream-' + consumer.id,
				trackId: 'consumer-' + consumer.kind + '-' + consumer.id,
				ssrc: encoding.ssrc,
				cname: cname
			};

			if (encoding.rtx && encoding.rtx.ssrc) consumerInfo.rtxSsrc = encoding.rtx.ssrc;

			this._consumerInfos.set(consumer.id, consumerInfo);

			return _promise2.default.resolve().then(function () {
				if (!_this10._transportCreated) return _this10._setupTransport();
			}).then(function () {
				var remoteSdp = _this10._remoteSdp.createOfferSdp((0, _from2.default)(_this10._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('addConsumer() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this10._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this10._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('addConsumer() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this10._pc.setLocalDescription(answer);
			}).then(function () {
				if (!_this10._transportUpdated) return _this10._updateTransport();
			}).then(function () {
				var newRtpReceiver = _this10._pc.getReceivers().find(function (rtpReceiver) {
					var track = rtpReceiver.track;


					if (!track) return false;

					return track.id === consumerInfo.trackId;
				});

				if (!newRtpReceiver) throw new Error('remote track not found');

				return newRtpReceiver.track;
			});
		}
	}, {
		key: 'removeConsumer',
		value: function removeConsumer(consumer) {
			var _this11 = this;

			logger.debug('removeConsumer() [id:%s, kind:%s]', consumer.id, consumer.kind);

			var consumerInfo = this._consumerInfos.get(consumer.id);

			if (!consumerInfo) return _promise2.default.reject(new Error('Consumer not found'));

			consumerInfo.closed = true;

			return _promise2.default.resolve().then(function () {
				var remoteSdp = _this11._remoteSdp.createOfferSdp((0, _from2.default)(_this11._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('removeConsumer() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this11._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this11._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('removeConsumer() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this11._pc.setLocalDescription(answer);
			});
		}
	}, {
		key: 'restartIce',
		value: function restartIce(remoteIceParameters) {
			var _this12 = this;

			logger.debug('restartIce()');

			// Provide the remote SDP handler with new remote ICE parameters.
			this._remoteSdp.updateTransportRemoteIceParameters(remoteIceParameters);

			return _promise2.default.resolve().then(function () {
				var remoteSdp = _this12._remoteSdp.createOfferSdp((0, _from2.default)(_this12._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this12._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this12._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this12._pc.setLocalDescription(answer);
			});
		}
	}, {
		key: '_setupTransport',
		value: function _setupTransport() {
			var _this13 = this;

			logger.debug('_setupTransport()');

			return _promise2.default.resolve().then(function () {
				// We need transport remote parameters.
				return _this13.safeEmitAsPromise('@needcreatetransport', null);
			}).then(function (transportRemoteParameters) {
				// Provide the remote SDP handler with transport remote parameters.
				_this13._remoteSdp.setTransportRemoteParameters(transportRemoteParameters);

				_this13._transportCreated = true;
			});
		}
	}, {
		key: '_updateTransport',
		value: function _updateTransport() {
			logger.debug('_updateTransport()');

			// Get our local DTLS parameters.
			var sdp = this._pc.localDescription.sdp;
			var sdpObj = _sdpform2.default.parse(sdp);
			var dtlsParameters = sdpCommonUtils.extractDtlsParameters(sdpObj);
			var transportLocalParameters = { dtlsParameters: dtlsParameters };

			// We need to provide transport local parameters.
			this.safeEmit('@needupdatetransport', transportLocalParameters);

			this._transportUpdated = true;
		}
	}]);
	return RecvHandler;
}(Handler);

var Firefox50 = function () {
	(0, _createClass3.default)(Firefox50, null, [{
		key: 'getNativeRtpCapabilities',
		value: function getNativeRtpCapabilities() {
			logger.debug('getNativeRtpCapabilities()');

			var pc = new RTCPeerConnection({
				iceServers: [],
				iceTransportPolicy: 'all',
				bundlePolicy: 'max-bundle',
				rtcpMuxPolicy: 'require'
			});

			// NOTE: We need to add a real video track to get the RID extension mapping.
			var canvas = document.createElement('canvas');

			// NOTE: Otherwise Firefox fails in next line.
			canvas.getContext('2d');

			var fakeStream = canvas.captureStream();
			var fakeVideoTrack = fakeStream.getVideoTracks()[0];
			var rtpSender = pc.addTrack(fakeVideoTrack, fakeStream);

			rtpSender.setParameters({
				encodings: [{ rid: 'RID1', maxBitrate: 40000 }, { rid: 'RID2', maxBitrate: 10000 }]
			});

			return pc.createOffer({
				offerToReceiveAudio: true,
				offerToReceiveVideo: true
			}).then(function (offer) {
				try {
					canvas.remove();
				} catch (error) {}

				try {
					fakeVideoTrack.stop();
				} catch (error) {}

				try {
					pc.close();
				} catch (error) {}

				var sdpObj = _sdpform2.default.parse(offer.sdp);
				var nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities(sdpObj);

				return nativeRtpCapabilities;
			}).catch(function (error) {
				try {
					canvas.remove();
				} catch (error2) {}

				try {
					fakeVideoTrack.stop();
				} catch (error2) {}

				try {
					pc.close();
				} catch (error2) {}

				throw error;
			});
		}
	}, {
		key: 'tag',
		get: function get() {
			return 'Firefox50';
		}
	}]);

	function Firefox50(direction, extendedRtpCapabilities, settings) {
		(0, _classCallCheck3.default)(this, Firefox50);

		logger.debug('constructor() [direction:%s, extendedRtpCapabilities:%o]', direction, extendedRtpCapabilities);

		var rtpParametersByKind = void 0;

		switch (direction) {
			case 'send':
				{
					rtpParametersByKind = {
						audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
						video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
					};

					return new SendHandler(rtpParametersByKind, settings);
				}
			case 'recv':
				{
					rtpParametersByKind = {
						audio: ortc.getReceivingFullRtpParameters('audio', extendedRtpCapabilities),
						video: ortc.getReceivingFullRtpParameters('video', extendedRtpCapabilities)
					};

					return new RecvHandler(rtpParametersByKind, settings);
				}
		}
	}

	return Firefox50;
}();

exports.default = Firefox50;

/***/ }),

/***/ "./lib/mslib/handlers/Firefox59.js":
/*!*****************************************!*\
  !*** ./lib/mslib/handlers/Firefox59.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _from = __webpack_require__(/*! babel-runtime/core-js/array/from */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/array/from.js");

var _from2 = _interopRequireDefault(_from);

var _map = __webpack_require__(/*! babel-runtime/core-js/map */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/map.js");

var _map2 = _interopRequireDefault(_map);

var _extends2 = __webpack_require__(/*! babel-runtime/helpers/extends */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/extends.js");

var _extends3 = _interopRequireDefault(_extends2);

var _promise = __webpack_require__(/*! babel-runtime/core-js/promise */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js");

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

var _sdpform = __webpack_require__(/*! ../../sdpform */ "./lib/sdpform/index.js");

var _sdpform2 = _interopRequireDefault(_sdpform);

var _Logger = __webpack_require__(/*! ../Logger */ "./lib/mslib/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

var _EnhancedEventEmitter2 = __webpack_require__(/*! ../EnhancedEventEmitter */ "./lib/mslib/EnhancedEventEmitter.js");

var _EnhancedEventEmitter3 = _interopRequireDefault(_EnhancedEventEmitter2);

var _utils = __webpack_require__(/*! ../utils */ "./lib/mslib/utils.js");

var utils = _interopRequireWildcard(_utils);

var _ortc = __webpack_require__(/*! ../ortc */ "./lib/mslib/ortc.js");

var ortc = _interopRequireWildcard(_ortc);

var _commonUtils = __webpack_require__(/*! ./sdp/commonUtils */ "./lib/mslib/handlers/sdp/commonUtils.js");

var sdpCommonUtils = _interopRequireWildcard(_commonUtils);

var _unifiedPlanUtils = __webpack_require__(/*! ./sdp/unifiedPlanUtils */ "./lib/mslib/handlers/sdp/unifiedPlanUtils.js");

var sdpUnifiedPlanUtils = _interopRequireWildcard(_unifiedPlanUtils);

var _RemoteUnifiedPlanSdp = __webpack_require__(/*! ./sdp/RemoteUnifiedPlanSdp */ "./lib/mslib/handlers/sdp/RemoteUnifiedPlanSdp.js");

var _RemoteUnifiedPlanSdp2 = _interopRequireDefault(_RemoteUnifiedPlanSdp);

var _bandwidthHandler = __webpack_require__(/*! ./sdp/bandwidthHandler */ "./lib/mslib/handlers/sdp/bandwidthHandler.js");

var _bandwidthHandler2 = _interopRequireDefault(_bandwidthHandler);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = new _Logger2.default('Firefox59');

var Handler = function (_EnhancedEventEmitter) {
	(0, _inherits3.default)(Handler, _EnhancedEventEmitter);

	function Handler(direction, rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, Handler);

		// RTCPeerConnection instance.
		// @type {RTCPeerConnection}
		var _this = (0, _possibleConstructorReturn3.default)(this, (Handler.__proto__ || (0, _getPrototypeOf2.default)(Handler)).call(this, logger));

		_this._pc = new RTCPeerConnection({
			iceServers: settings.turnServers || [],
			iceTransportPolicy: settings.iceTransportPolicy,
			bundlePolicy: 'max-bundle',
			rtcpMuxPolicy: 'require'
		});

		// Generic sending RTP parameters for audio and video.
		// @type {Object}
		_this._rtpParametersByKind = rtpParametersByKind;

		// Remote SDP handler.
		// @type {RemoteUnifiedPlanSdp}
		_this._remoteSdp = new _RemoteUnifiedPlanSdp2.default(direction, rtpParametersByKind);

		// Handle RTCPeerConnection connection status.
		_this._pc.addEventListener('iceconnectionstatechange', function () {
			switch (_this._pc.iceConnectionState) {
				case 'checking':
					_this.emit('@connectionstatechange', 'connecting');
					break;
				case 'connected':
				case 'completed':
					_this.emit('@connectionstatechange', 'connected');
					break;
				case 'failed':
					_this.emit('@connectionstatechange', 'failed');
					break;
				case 'disconnected':
					_this.emit('@connectionstatechange', 'disconnected');
					break;
				case 'closed':
					_this.emit('@connectionstatechange', 'closed');
					break;
			}
		});
		return _this;
	}

	(0, _createClass3.default)(Handler, [{
		key: 'close',
		value: function close() {
			logger.debug('close()');

			// Close RTCPeerConnection.
			try {
				this._pc.close();
			} catch (error) {}
		}
	}, {
		key: 'remoteClosed',
		value: function remoteClosed() {
			logger.debug('remoteClosed()');

			this._transportReady = false;

			if (this._transportUpdated) this._transportUpdated = false;
		}
	}]);
	return Handler;
}(_EnhancedEventEmitter3.default);

var SendHandler = function (_Handler) {
	(0, _inherits3.default)(SendHandler, _Handler);

	function SendHandler(rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, SendHandler);

		// Got transport local and remote parameters.
		// @type {Boolean}
		var _this2 = (0, _possibleConstructorReturn3.default)(this, (SendHandler.__proto__ || (0, _getPrototypeOf2.default)(SendHandler)).call(this, 'send', rtpParametersByKind, settings));

		_this2._transportReady = false;

		// Local stream.
		// @type {MediaStream}
		_this2._stream = new MediaStream();

		// RID value counter for simulcast (so they never match).
		// @type {Number}
		_this2._nextRid = 1;
		return _this2;
	}

	(0, _createClass3.default)(SendHandler, [{
		key: 'addProducer',
		value: function addProducer(producer) {
			var _this3 = this;

			var track = producer.track;


			logger.debug('addProducer() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			if (this._stream.getTrackById(track.id)) return _promise2.default.reject(new Error('track already added'));

			var rtpSender = void 0;
			var localSdpObj = void 0;

			return _promise2.default.resolve().then(function () {
				// Add the track to the local stream.
				_this3._stream.addTrack(track);

				// Add the stream to the PeerConnection.
				rtpSender = _this3._pc.addTrack(track, _this3._stream);
			}).then(function () {
				var encodings = [];

				if (producer.simulcast) {
					logger.debug('addProducer() | enabling simulcast');

					if (producer.simulcast.high) {
						encodings.push({
							rid: 'high' + _this3._nextRid,
							active: true,
							priority: 'low',
							maxBitrate: producer.simulcast.high
						});
					}

					if (producer.simulcast.medium) {
						encodings.push({
							rid: 'medium' + _this3._nextRid,
							active: true,
							priority: 'medium',
							maxBitrate: producer.simulcast.medium
						});
					}

					if (producer.simulcast.low) {
						encodings.push({
							rid: 'low' + _this3._nextRid,
							active: true,
							priority: 'high',
							maxBitrate: producer.simulcast.low
						});
					}

					// Update RID counter for future ones.
					_this3._nextRid++;
				}

				var parameters = rtpSender.getParameters();

				return rtpSender.setParameters((0, _extends3.default)({}, parameters, { encodings: encodings }));
			}).then(function () {
				return _this3._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				logger.debug('addProducer() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this3._pc.setLocalDescription(offer);
			}).then(function () {
				if (!_this3._transportReady) return _this3._setupTransport();
			}).then(function () {
				localSdpObj = _sdpform2.default.parse(_this3._pc.localDescription.sdp);

				var remoteSdp = _this3._remoteSdp.createAnswerSdp(localSdpObj);

				// for video bitrate - jove
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('addProducer() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this3._pc.setRemoteDescription(answer);
			}).then(function () {
				var rtpParameters = utils.clone(_this3._rtpParametersByKind[producer.kind]);

				// Fill the RTP parameters for this track.
				sdpUnifiedPlanUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track);

				return rtpParameters;
			}).catch(function (error) {
				// Panic here. Try to undo things.

				try {
					_this3._pc.removeTrack(rtpSender);
				} catch (error2) {}

				_this3._stream.removeTrack(track);

				throw error;
			});
		}
	}, {
		key: 'removeProducer',
		value: function removeProducer(producer) {
			var _this4 = this;

			var track = producer.track;


			logger.debug('removeProducer() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			return _promise2.default.resolve().then(function () {
				// Get the associated RTCRtpSender.
				var rtpSender = _this4._pc.getSenders().find(function (s) {
					return s.track === track;
				});

				if (!rtpSender) throw new Error('RTCRtpSender not found');

				// Remove the associated RtpSender.
				_this4._pc.removeTrack(rtpSender);

				// Remove the track from the local stream.
				_this4._stream.removeTrack(track);

				return _this4._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				logger.debug('removeProducer() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this4._pc.setLocalDescription(offer);
			}).then(function () {
				var localSdpObj = _sdpform2.default.parse(_this4._pc.localDescription.sdp);
				var remoteSdp = _this4._remoteSdp.createAnswerSdp(localSdpObj);

				// for video bitrate - jove
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('removeProducer() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this4._pc.setRemoteDescription(answer);
			});
		}
	}, {
		key: 'replaceProducerTrack',
		value: function replaceProducerTrack(producer, track) {
			var _this5 = this;

			logger.debug('replaceProducerTrack() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			var oldTrack = producer.track;

			return _promise2.default.resolve().then(function () {
				// Get the associated RTCRtpSender.
				var rtpSender = _this5._pc.getSenders().find(function (s) {
					return s.track === oldTrack;
				});

				if (!rtpSender) throw new Error('local track not found');

				return rtpSender.replaceTrack(track);
			}).then(function () {
				// Remove the old track from the local stream.
				_this5._stream.removeTrack(oldTrack);

				// Add the new track to the local stream.
				_this5._stream.addTrack(track);
			});
		}
	}, {
		key: 'restartIce',
		value: function restartIce(remoteIceParameters) {
			var _this6 = this;

			logger.debug('restartIce()');

			// Provide the remote SDP handler with new remote ICE parameters.
			this._remoteSdp.updateTransportRemoteIceParameters(remoteIceParameters);

			return _promise2.default.resolve().then(function () {
				return _this6._pc.createOffer({ iceRestart: true });
			}).then(function (offer) {
				logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this6._pc.setLocalDescription(offer);
			}).then(function () {
				var localSdpObj = _sdpform2.default.parse(_this6._pc.localDescription.sdp);
				var remoteSdp = _this6._remoteSdp.createAnswerSdp(localSdpObj);
				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this6._pc.setRemoteDescription(answer);
			});
		}
	}, {
		key: '_setupTransport',
		value: function _setupTransport() {
			var _this7 = this;

			logger.debug('_setupTransport()');

			return _promise2.default.resolve().then(function () {
				// Get our local DTLS parameters.
				var transportLocalParameters = {};
				var sdp = _this7._pc.localDescription.sdp;
				var sdpObj = _sdpform2.default.parse(sdp);
				var dtlsParameters = sdpCommonUtils.extractDtlsParameters(sdpObj);

				// Let's decide that we'll be DTLS server (because we can).
				dtlsParameters.role = 'server';

				transportLocalParameters.dtlsParameters = dtlsParameters;

				// Provide the remote SDP handler with transport local parameters.
				_this7._remoteSdp.setTransportLocalParameters(transportLocalParameters);

				// We need transport remote parameters.
				return _this7.safeEmitAsPromise('@needcreatetransport', transportLocalParameters);
			}).then(function (transportRemoteParameters) {
				// Provide the remote SDP handler with transport remote parameters.
				_this7._remoteSdp.setTransportRemoteParameters(transportRemoteParameters);

				_this7._transportReady = true;
			});
		}
	}, {
		key: 'updateTrack',
		value: function updateTrack(producer, track) {
			var _this8 = this;

			logger.debug('update Track() [trackId:%s]', track.id);
			var localSdpObj; // Add the track id to the Set.
			var transceiver;

			return _promise2.default.resolve().then(function () {
				// Let's check if there is transceiver for same kind.
				// One production consists video or (and) audio track(s).
				transceiver = _this8._pc.getTransceivers().find(function (t) {
					return t.receiver.track.kind === track.kind;
				});
			}).then(function () {
				return _this8._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				// If simulcast is set, mangle the offer.
				// var offerSdp;
				if (producer.simulcast) {
					logger.debug('updateTrack() | enabling simulcast');

					var sdpObject = _sdpform2.default.parse(offer.sdp);

					sdpUnifiedPlanUtils.addPlanBSimulcast(sdpObject, track, {
						mid: transceiver.mid
					});

					var offerSdp = _sdpform2.default.write(sdpObject);

					offer = {
						type: 'offer',
						sdp: offerSdp
					};
				}

				logger.debug('updateTrack() | calling pc.setLocalDescription() [offer:%o]', offer);
				return _this8._pc.setLocalDescription(offer);
			}).then(function () {
				localSdpObj = _sdpform2.default.parse(_this8._pc.localDescription.sdp);

				var remoteSdp = _this8._remoteSdp.createAnswerSdp(localSdpObj);
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = {
					type: 'answer',
					sdp: remoteSdp
				};
				logger.debug('updateTrack() | calling pc.setRemoteDescription() [answer:%o]', answer);
				return _this8._pc.setRemoteDescription(answer);
			}).then(function () {
				var rtpParameters = utils.clone(_this8._rtpParametersByKind[producer.kind]);
				sdpUnifiedPlanUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track, {
					mid: transceiver.mid,
					planBSimulcast: true
				});
				return rtpParameters;
			}).catch(function (error) {
				// Panic here. Try to undo things.
				// failed at here and nothing to do.
				throw error;
			});
		}
	}]);
	return SendHandler;
}(Handler);

var RecvHandler = function (_Handler2) {
	(0, _inherits3.default)(RecvHandler, _Handler2);

	function RecvHandler(rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, RecvHandler);

		// Got transport remote parameters.
		// @type {Boolean}
		var _this9 = (0, _possibleConstructorReturn3.default)(this, (RecvHandler.__proto__ || (0, _getPrototypeOf2.default)(RecvHandler)).call(this, 'recv', rtpParametersByKind, settings));

		_this9._transportCreated = false;

		// Got transport local parameters.
		// @type {Boolean}
		_this9._transportUpdated = false;

		// Map of Consumers information indexed by consumer.id.
		// - mid {String}
		// - kind {String}
		// - closed {Boolean}
		// - trackId {String}
		// - ssrc {Number}
		// - rtxSsrc {Number}
		// - cname {String}
		// @type {Map<Number, Object>}
		_this9._consumerInfos = new _map2.default();
		return _this9;
	}

	(0, _createClass3.default)(RecvHandler, [{
		key: 'addConsumer',
		value: function addConsumer(consumer) {
			var _this10 = this;

			logger.debug('addConsumer() [id:%s, kind:%s]', consumer.id, consumer.kind);

			if (this._consumerInfos.has(consumer.id)) return _promise2.default.reject(new Error('Consumer already added'));

			var encoding = consumer.rtpParameters.encodings[0];
			var cname = consumer.rtpParameters.rtcp.cname;
			var consumerInfo = {
				mid: '' + consumer.kind[0] + consumer.id,
				kind: consumer.kind,
				closed: consumer.closed,
				streamId: 'recv-stream-' + consumer.id,
				trackId: 'consumer-' + consumer.kind + '-' + consumer.id,
				ssrc: encoding.ssrc,
				cname: cname
			};

			if (encoding.rtx && encoding.rtx.ssrc) consumerInfo.rtxSsrc = encoding.rtx.ssrc;

			this._consumerInfos.set(consumer.id, consumerInfo);

			return _promise2.default.resolve().then(function () {
				if (!_this10._transportCreated) return _this10._setupTransport();
			}).then(function () {
				var remoteSdp = _this10._remoteSdp.createOfferSdp((0, _from2.default)(_this10._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('addConsumer() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this10._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this10._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('addConsumer() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this10._pc.setLocalDescription(answer);
			}).then(function () {
				if (!_this10._transportUpdated) return _this10._updateTransport();
			}).then(function () {
				var newTransceiver = _this10._pc.getTransceivers().find(function (transceiver) {
					var receiver = transceiver.receiver;


					if (!receiver) return false;

					var track = receiver.track;


					if (!track) return false;

					return transceiver.mid === consumerInfo.mid;
				});

				if (!newTransceiver) throw new Error('remote track not found');

				return newTransceiver.receiver.track;
			});
		}
	}, {
		key: 'removeConsumer',
		value: function removeConsumer(consumer) {
			var _this11 = this;

			logger.debug('removeConsumer() [id:%s, kind:%s]', consumer.id, consumer.kind);

			var consumerInfo = this._consumerInfos.get(consumer.id);

			if (!consumerInfo) return _promise2.default.reject(new Error('Consumer not found'));

			consumerInfo.closed = true;

			return _promise2.default.resolve().then(function () {
				var remoteSdp = _this11._remoteSdp.createOfferSdp((0, _from2.default)(_this11._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('removeConsumer() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this11._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this11._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('removeConsumer() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this11._pc.setLocalDescription(answer);
			});
		}
	}, {
		key: 'restartIce',
		value: function restartIce(remoteIceParameters) {
			var _this12 = this;

			logger.debug('restartIce()');

			// Provide the remote SDP handler with new remote ICE parameters.
			this._remoteSdp.updateTransportRemoteIceParameters(remoteIceParameters);

			return _promise2.default.resolve().then(function () {
				var remoteSdp = _this12._remoteSdp.createOfferSdp((0, _from2.default)(_this12._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this12._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this12._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this12._pc.setLocalDescription(answer);
			});
		}
	}, {
		key: '_setupTransport',
		value: function _setupTransport() {
			var _this13 = this;

			logger.debug('_setupTransport()');

			return _promise2.default.resolve().then(function () {
				// We need transport remote parameters.
				return _this13.safeEmitAsPromise('@needcreatetransport', null);
			}).then(function (transportRemoteParameters) {
				// Provide the remote SDP handler with transport remote parameters.
				_this13._remoteSdp.setTransportRemoteParameters(transportRemoteParameters);

				_this13._transportCreated = true;
			});
		}
	}, {
		key: '_updateTransport',
		value: function _updateTransport() {
			logger.debug('_updateTransport()');

			// Get our local DTLS parameters.
			var sdp = this._pc.localDescription.sdp;
			var sdpObj = _sdpform2.default.parse(sdp);
			var dtlsParameters = sdpCommonUtils.extractDtlsParameters(sdpObj);
			var transportLocalParameters = { dtlsParameters: dtlsParameters };

			// We need to provide transport local parameters.
			this.safeEmit('@needupdatetransport', transportLocalParameters);

			this._transportUpdated = true;
		}
	}]);
	return RecvHandler;
}(Handler);

var Firefox59 = function () {
	(0, _createClass3.default)(Firefox59, null, [{
		key: 'getNativeRtpCapabilities',
		value: function getNativeRtpCapabilities() {
			logger.debug('getNativeRtpCapabilities()');

			var pc = new RTCPeerConnection({
				iceServers: [],
				iceTransportPolicy: 'all',
				bundlePolicy: 'max-bundle',
				rtcpMuxPolicy: 'require'
			});

			// NOTE: We need to add a real video track to get the RID extension mapping.
			var canvas = document.createElement('canvas');

			// NOTE: Otherwise Firefox fails in next line.
			canvas.getContext('2d');

			var fakeStream = canvas.captureStream();
			var fakeVideoTrack = fakeStream.getVideoTracks()[0];
			var rtpSender = pc.addTrack(fakeVideoTrack, fakeStream);

			rtpSender.setParameters({
				encodings: [{ rid: 'RID1', maxBitrate: 40000 }, { rid: 'RID2', maxBitrate: 10000 }]
			});

			return pc.createOffer({
				offerToReceiveAudio: true,
				offerToReceiveVideo: true
			}).then(function (offer) {
				try {
					canvas.remove();
				} catch (error) {}

				try {
					fakeVideoTrack.stop();
				} catch (error) {}

				try {
					pc.close();
				} catch (error) {}

				var sdpObj = _sdpform2.default.parse(offer.sdp);
				var nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities(sdpObj);

				return nativeRtpCapabilities;
			}).catch(function (error) {
				try {
					canvas.remove();
				} catch (error2) {}

				try {
					fakeVideoTrack.stop();
				} catch (error2) {}

				try {
					pc.close();
				} catch (error2) {}

				throw error;
			});
		}
	}, {
		key: 'tag',
		get: function get() {
			return 'Firefox59';
		}
	}]);

	function Firefox59(direction, extendedRtpCapabilities, settings) {
		(0, _classCallCheck3.default)(this, Firefox59);

		logger.debug('constructor() [direction:%s, extendedRtpCapabilities:%o]', direction, extendedRtpCapabilities);

		var rtpParametersByKind = void 0;

		switch (direction) {
			case 'send':
				{
					rtpParametersByKind = {
						audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
						video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
					};

					return new SendHandler(rtpParametersByKind, settings);
				}
			case 'recv':
				{
					rtpParametersByKind = {
						audio: ortc.getReceivingFullRtpParameters('audio', extendedRtpCapabilities),
						video: ortc.getReceivingFullRtpParameters('video', extendedRtpCapabilities)
					};

					return new RecvHandler(rtpParametersByKind, settings);
				}
		}
	}

	return Firefox59;
}();

exports.default = Firefox59;

/***/ }),

/***/ "./lib/mslib/handlers/Firefox65.js":
/*!*****************************************!*\
  !*** ./lib/mslib/handlers/Firefox65.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _from = __webpack_require__(/*! babel-runtime/core-js/array/from */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/array/from.js");

var _from2 = _interopRequireDefault(_from);

var _map = __webpack_require__(/*! babel-runtime/core-js/map */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/map.js");

var _map2 = _interopRequireDefault(_map);

var _extends2 = __webpack_require__(/*! babel-runtime/helpers/extends */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/extends.js");

var _extends3 = _interopRequireDefault(_extends2);

var _promise = __webpack_require__(/*! babel-runtime/core-js/promise */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js");

var _promise2 = _interopRequireDefault(_promise);

var _set = __webpack_require__(/*! babel-runtime/core-js/set */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/set.js");

var _set2 = _interopRequireDefault(_set);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

var _sdpform = __webpack_require__(/*! ../../sdpform */ "./lib/sdpform/index.js");

var _sdpform2 = _interopRequireDefault(_sdpform);

var _Logger = __webpack_require__(/*! ../Logger */ "./lib/mslib/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

var _EnhancedEventEmitter2 = __webpack_require__(/*! ../EnhancedEventEmitter */ "./lib/mslib/EnhancedEventEmitter.js");

var _EnhancedEventEmitter3 = _interopRequireDefault(_EnhancedEventEmitter2);

var _utils = __webpack_require__(/*! ../utils */ "./lib/mslib/utils.js");

var utils = _interopRequireWildcard(_utils);

var _ortc = __webpack_require__(/*! ../ortc */ "./lib/mslib/ortc.js");

var ortc = _interopRequireWildcard(_ortc);

var _commonUtils = __webpack_require__(/*! ./sdp/commonUtils */ "./lib/mslib/handlers/sdp/commonUtils.js");

var sdpCommonUtils = _interopRequireWildcard(_commonUtils);

var _unifiedPlanUtils = __webpack_require__(/*! ./sdp/unifiedPlanUtils */ "./lib/mslib/handlers/sdp/unifiedPlanUtils.js");

var sdpUnifiedPlanUtils = _interopRequireWildcard(_unifiedPlanUtils);

var _RemoteUnifiedPlanSdp = __webpack_require__(/*! ./sdp/RemoteUnifiedPlanSdp */ "./lib/mslib/handlers/sdp/RemoteUnifiedPlanSdp.js");

var _RemoteUnifiedPlanSdp2 = _interopRequireDefault(_RemoteUnifiedPlanSdp);

var _bandwidthHandler = __webpack_require__(/*! ./sdp/bandwidthHandler */ "./lib/mslib/handlers/sdp/bandwidthHandler.js");

var _bandwidthHandler2 = _interopRequireDefault(_bandwidthHandler);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = new _Logger2.default('Firefox65');

var Handler = function (_EnhancedEventEmitter) {
	(0, _inherits3.default)(Handler, _EnhancedEventEmitter);

	function Handler(direction, rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, Handler);

		// RTCPeerConnection instance.
		// @type {RTCPeerConnection}
		var _this = (0, _possibleConstructorReturn3.default)(this, (Handler.__proto__ || (0, _getPrototypeOf2.default)(Handler)).call(this, logger));

		_this._pc = new RTCPeerConnection({
			iceServers: settings.turnServers || [],
			iceTransportPolicy: settings.iceTransportPolicy,
			bundlePolicy: 'max-bundle',
			rtcpMuxPolicy: 'require'
		});

		// Generic sending RTP parameters for audio and video.
		// @type {Object}
		_this._rtpParametersByKind = rtpParametersByKind;

		// Remote SDP handler.
		// @type {RemoteUnifiedPlanSdp}
		_this._remoteSdp = new _RemoteUnifiedPlanSdp2.default(direction, rtpParametersByKind);

		// Handle RTCPeerConnection connection status.
		_this._pc.addEventListener('iceconnectionstatechange', function () {
			switch (_this._pc.iceConnectionState) {
				case 'checking':
					_this.emit('@connectionstatechange', 'connecting');
					break;
				case 'connected':
				case 'completed':
					_this.emit('@connectionstatechange', 'connected');
					break;
				case 'failed':
					_this.emit('@connectionstatechange', 'failed');
					break;
				case 'disconnected':
					_this.emit('@connectionstatechange', 'disconnected');
					break;
				case 'closed':
					_this.emit('@connectionstatechange', 'closed');
					break;
			}
		});
		return _this;
	}

	(0, _createClass3.default)(Handler, [{
		key: 'close',
		value: function close() {
			logger.debug('close()');

			// Close RTCPeerConnection.
			try {
				this._pc.close();
			} catch (error) {}
		}
	}, {
		key: 'remoteClosed',
		value: function remoteClosed() {
			logger.debug('remoteClosed()');

			this._transportReady = false;

			if (this._transportUpdated) this._transportUpdated = false;
		}
	}]);
	return Handler;
}(_EnhancedEventEmitter3.default);

var SendHandler = function (_Handler) {
	(0, _inherits3.default)(SendHandler, _Handler);

	function SendHandler(rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, SendHandler);

		// Got transport local and remote parameters.
		// @type {Boolean}
		var _this2 = (0, _possibleConstructorReturn3.default)(this, (SendHandler.__proto__ || (0, _getPrototypeOf2.default)(SendHandler)).call(this, 'send', rtpParametersByKind, settings));

		_this2._transportReady = false;

		// Ids of alive local tracks.
		// @type {Set<Number>}
		_this2._trackIds = new _set2.default();

		// RID value counter for simulcast (so they never match).
		// @type {Number}
		_this2._nextRid = 1;
		return _this2;
	}

	(0, _createClass3.default)(SendHandler, [{
		key: 'addProducer',
		value: function addProducer(producer) {
			var _this3 = this;

			var track = producer.track;


			logger.debug('addProducer() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			if (this._trackIds.has(track.id)) return _promise2.default.reject(new Error('track already added'));

			var transceiver = void 0;
			var localSdpObj = void 0;

			// Add the track id to the Set.
			this._trackIds.add(track.id);

			return _promise2.default.resolve().then(function () {
				// Let's check if there is any inactive transceiver for same kind and
				// reuse it if so.
				transceiver = _this3._pc.getTransceivers().find(function (t) {
					return t.receiver.track.kind === track.kind && t.direction === 'inactive';
				});

				if (transceiver) {
					logger.debug('addProducer() | reusing an inactive transceiver');

					transceiver.direction = 'sendonly';

					return transceiver.sender.replaceTrack(track);
				} else {
					transceiver = _this3._pc.addTransceiver(track, { direction: 'sendonly' });
				}
			}).then(function () {
				var _transceiver = transceiver,
				    sender = _transceiver.sender;

				var encodings = [];

				if (producer.simulcast) {
					logger.debug('addProducer() | enabling simulcast');

					if (producer.simulcast.high) {
						encodings.push({
							rid: 'high' + _this3._nextRid,
							active: true,
							priority: 'low',
							maxBitrate: producer.simulcast.high
						});
					}

					if (producer.simulcast.medium) {
						encodings.push({
							rid: 'medium' + _this3._nextRid,
							active: true,
							priority: 'medium',
							maxBitrate: producer.simulcast.medium
						});
					}

					if (producer.simulcast.low) {
						encodings.push({
							rid: 'low' + _this3._nextRid,
							active: true,
							priority: 'high',
							maxBitrate: producer.simulcast.low
						});
					}

					// Update RID counter for future ones.
					_this3._nextRid++;
				}

				var parameters = sender.getParameters();

				return sender.setParameters((0, _extends3.default)({}, parameters, { encodings: encodings }));
			}).then(function () {
				return _this3._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				logger.debug('addProducer() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this3._pc.setLocalDescription(offer);
			}).then(function () {
				if (!_this3._transportReady) return _this3._setupTransport();
			}).then(function () {
				localSdpObj = _sdpform2.default.parse(_this3._pc.localDescription.sdp);

				var remoteSdp = _this3._remoteSdp.createAnswerSdp(localSdpObj);

				// for video bitrate - jove
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('addProducer() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this3._pc.setRemoteDescription(answer);
			}).then(function () {
				var rtpParameters = utils.clone(_this3._rtpParametersByKind[producer.kind]);

				sdpUnifiedPlanUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track, { mid: transceiver.mid });

				return rtpParameters;
			}).catch(function (error) {
				// Panic here. Try to undo things.

				try {
					transceiver.direction = 'inactive';
				} catch (error2) {}

				_this3._trackIds.delete(track.id);

				throw error;
			});
		}
	}, {
		key: 'removeProducer',
		value: function removeProducer(producer) {
			var _this4 = this;

			var track = producer.track;


			if (!this._trackIds.has(track.id)) return _promise2.default.reject(new Error('track not found'));

			logger.debug('removeProducer() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			return _promise2.default.resolve().then(function () {
				// Get the associated RTCRtpSender.
				var rtpSender = _this4._pc.getSenders().find(function (s) {
					return s.track === track;
				});

				if (!rtpSender) throw new Error('local track not found');

				_this4._pc.removeTrack(rtpSender);

				// Remove the track id from the Set.
				_this4._trackIds.delete(track.id);

				return _this4._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				logger.debug('removeProducer() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this4._pc.setLocalDescription(offer);
			}).then(function () {
				var localSdpObj = _sdpform2.default.parse(_this4._pc.localDescription.sdp);
				var remoteSdp = _this4._remoteSdp.createAnswerSdp(localSdpObj);

				// for video bitrate - jove
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('removeProducer() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this4._pc.setRemoteDescription(answer);
			});
		}
	}, {
		key: 'replaceProducerTrack',
		value: function replaceProducerTrack(producer, track) {
			var _this5 = this;

			logger.debug('replaceProducerTrack() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			var oldTrack = producer.track;

			return _promise2.default.resolve().then(function () {
				// Get the associated RTCRtpSender.
				var rtpSender = _this5._pc.getSenders().find(function (s) {
					return s.track === oldTrack;
				});

				if (!rtpSender) throw new Error('local track not found');

				return rtpSender.replaceTrack(track);
			}).then(function () {
				// Remove the old track id from the Set.
				_this5._trackIds.delete(oldTrack.id);

				// Add the new track id to the Set.
				_this5._trackIds.add(track.id);
			});
		}
	}, {
		key: 'restartIce',
		value: function restartIce(remoteIceParameters) {
			var _this6 = this;

			logger.debug('restartIce()');

			// Provide the remote SDP handler with new remote ICE parameters.
			this._remoteSdp.updateTransportRemoteIceParameters(remoteIceParameters);

			return _promise2.default.resolve().then(function () {
				return _this6._pc.createOffer({ iceRestart: true });
			}).then(function (offer) {
				logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this6._pc.setLocalDescription(offer);
			}).then(function () {
				var localSdpObj = _sdpform2.default.parse(_this6._pc.localDescription.sdp);
				var remoteSdp = _this6._remoteSdp.createAnswerSdp(localSdpObj);
				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this6._pc.setRemoteDescription(answer);
			});
		}
	}, {
		key: '_setupTransport',
		value: function _setupTransport() {
			var _this7 = this;

			logger.debug('_setupTransport()');

			return _promise2.default.resolve().then(function () {
				// Get our local DTLS parameters.
				var transportLocalParameters = {};
				var sdp = _this7._pc.localDescription.sdp;
				var sdpObj = _sdpform2.default.parse(sdp);
				var dtlsParameters = sdpCommonUtils.extractDtlsParameters(sdpObj);

				// Let's decide that we'll be DTLS server (because we can).
				dtlsParameters.role = 'server';

				transportLocalParameters.dtlsParameters = dtlsParameters;

				// Provide the remote SDP handler with transport local parameters.
				_this7._remoteSdp.setTransportLocalParameters(transportLocalParameters);

				// We need transport remote parameters.
				return _this7.safeEmitAsPromise('@needcreatetransport', transportLocalParameters);
			}).then(function (transportRemoteParameters) {
				// Provide the remote SDP handler with transport remote parameters.
				_this7._remoteSdp.setTransportRemoteParameters(transportRemoteParameters);

				_this7._transportReady = true;
			});
		}
	}, {
		key: 'updateTrack',
		value: function updateTrack(producer, track) {
			var _this8 = this;

			logger.debug('update Track() [trackId:%s]', track.id);
			var localSdpObj; // Add the track id to the Set.
			var transceiver;

			return _promise2.default.resolve().then(function () {
				// Let's check if there is transceiver for same kind.
				// One production consists video or (and) audio track(s).
				transceiver = _this8._pc.getTransceivers().find(function (t) {
					return t.receiver.track.kind === track.kind;
				});
			}).then(function () {
				return _this8._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				// If simulcast is set, mangle the offer.
				// var offerSdp;
				if (producer.simulcast) {
					logger.debug('updateTrack() | enabling simulcast');

					var sdpObject = _sdpform2.default.parse(offer.sdp);

					sdpUnifiedPlanUtils.addPlanBSimulcast(sdpObject, track, {
						mid: transceiver.mid
					});

					var offerSdp = _sdpform2.default.write(sdpObject);

					offer = {
						type: 'offer',
						sdp: offerSdp
					};
				}

				logger.debug('updateTrack() | calling pc.setLocalDescription() [offer:%o]', offer);
				return _this8._pc.setLocalDescription(offer);
			}).then(function () {
				localSdpObj = _sdpform2.default.parse(_this8._pc.localDescription.sdp);

				var remoteSdp = _this8._remoteSdp.createAnswerSdp(localSdpObj);
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = {
					type: 'answer',
					sdp: remoteSdp
				};
				logger.debug('updateTrack() | calling pc.setRemoteDescription() [answer:%o]', answer);
				return _this8._pc.setRemoteDescription(answer);
			}).then(function () {
				var rtpParameters = utils.clone(_this8._rtpParametersByKind[producer.kind]);
				sdpUnifiedPlanUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track, {
					mid: transceiver.mid,
					planBSimulcast: true
				});
				return rtpParameters;
			}).catch(function (error) {
				// Panic here. Try to undo things.
				// failed at here and nothing to do.
				throw error;
			});
		}
	}]);
	return SendHandler;
}(Handler);

var RecvHandler = function (_Handler2) {
	(0, _inherits3.default)(RecvHandler, _Handler2);

	function RecvHandler(rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, RecvHandler);

		// Got transport remote parameters.
		// @type {Boolean}
		var _this9 = (0, _possibleConstructorReturn3.default)(this, (RecvHandler.__proto__ || (0, _getPrototypeOf2.default)(RecvHandler)).call(this, 'recv', rtpParametersByKind, settings));

		_this9._transportCreated = false;

		// Got transport local parameters.
		// @type {Boolean}
		_this9._transportUpdated = false;

		// Map of Consumers information indexed by consumer.id.
		// - mid {String}
		// - kind {String}
		// - closed {Boolean}
		// - trackId {String}
		// - ssrc {Number}
		// - rtxSsrc {Number}
		// - cname {String}
		// @type {Map<Number, Object>}
		_this9._consumerInfos = new _map2.default();
		return _this9;
	}

	(0, _createClass3.default)(RecvHandler, [{
		key: 'addConsumer',
		value: function addConsumer(consumer) {
			var _this10 = this;

			logger.debug('addConsumer() [id:%s, kind:%s]', consumer.id, consumer.kind);

			if (this._consumerInfos.has(consumer.id)) return _promise2.default.reject(new Error('Consumer already added'));

			var encoding = consumer.rtpParameters.encodings[0];
			var cname = consumer.rtpParameters.rtcp.cname;
			var consumerInfo = {
				mid: '' + consumer.kind[0] + consumer.id,
				kind: consumer.kind,
				closed: consumer.closed,
				streamId: 'recv-stream-' + consumer.id,
				trackId: 'consumer-' + consumer.kind + '-' + consumer.id,
				ssrc: encoding.ssrc,
				cname: cname
			};

			if (encoding.rtx && encoding.rtx.ssrc) consumerInfo.rtxSsrc = encoding.rtx.ssrc;

			this._consumerInfos.set(consumer.id, consumerInfo);

			return _promise2.default.resolve().then(function () {
				if (!_this10._transportCreated) return _this10._setupTransport();
			}).then(function () {
				var remoteSdp = _this10._remoteSdp.createOfferSdp((0, _from2.default)(_this10._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('addConsumer() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this10._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this10._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('addConsumer() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this10._pc.setLocalDescription(answer);
			}).then(function () {
				if (!_this10._transportUpdated) return _this10._updateTransport();
			}).then(function () {
				var transceiver = _this10._pc.getTransceivers().find(function (t) {
					return t.mid === consumerInfo.mid;
				});

				if (!transceiver) throw new Error('remote track not found');

				return transceiver.receiver.track;
			});
		}
	}, {
		key: 'removeConsumer',
		value: function removeConsumer(consumer) {
			var _this11 = this;

			logger.debug('removeConsumer() [id:%s, kind:%s]', consumer.id, consumer.kind);

			var consumerInfo = this._consumerInfos.get(consumer.id);

			if (!consumerInfo) return _promise2.default.reject(new Error('Consumer not found'));

			consumerInfo.closed = true;

			return _promise2.default.resolve().then(function () {
				var remoteSdp = _this11._remoteSdp.createOfferSdp((0, _from2.default)(_this11._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('removeConsumer() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this11._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this11._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('removeConsumer() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this11._pc.setLocalDescription(answer);
			});
		}
	}, {
		key: 'restartIce',
		value: function restartIce(remoteIceParameters) {
			var _this12 = this;

			logger.debug('restartIce()');

			// Provide the remote SDP handler with new remote ICE parameters.
			this._remoteSdp.updateTransportRemoteIceParameters(remoteIceParameters);

			return _promise2.default.resolve().then(function () {
				var remoteSdp = _this12._remoteSdp.createOfferSdp((0, _from2.default)(_this12._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this12._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this12._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this12._pc.setLocalDescription(answer);
			});
		}
	}, {
		key: '_setupTransport',
		value: function _setupTransport() {
			var _this13 = this;

			logger.debug('_setupTransport()');

			return _promise2.default.resolve().then(function () {
				// We need transport remote parameters.
				return _this13.safeEmitAsPromise('@needcreatetransport', null);
			}).then(function (transportRemoteParameters) {
				// Provide the remote SDP handler with transport remote parameters.
				_this13._remoteSdp.setTransportRemoteParameters(transportRemoteParameters);

				_this13._transportCreated = true;
			});
		}
	}, {
		key: '_updateTransport',
		value: function _updateTransport() {
			logger.debug('_updateTransport()');

			// Get our local DTLS parameters.
			var sdp = this._pc.localDescription.sdp;
			var sdpObj = _sdpform2.default.parse(sdp);
			var dtlsParameters = sdpCommonUtils.extractDtlsParameters(sdpObj);
			var transportLocalParameters = { dtlsParameters: dtlsParameters };

			// We need to provide transport local parameters.
			this.safeEmit('@needupdatetransport', transportLocalParameters);

			this._transportUpdated = true;
		}
	}]);
	return RecvHandler;
}(Handler);

var Firefox65 = function () {
	(0, _createClass3.default)(Firefox65, null, [{
		key: 'getNativeRtpCapabilities',
		value: function getNativeRtpCapabilities() {
			logger.debug('getNativeRtpCapabilities()');

			var pc = new RTCPeerConnection({
				iceServers: [],
				iceTransportPolicy: 'all',
				bundlePolicy: 'max-bundle',
				rtcpMuxPolicy: 'require'
			});

			// NOTE: We need to add a real video track to get the RID extension mapping.
			var canvas = document.createElement('canvas');

			// NOTE: Otherwise Firefox fails in next line.
			canvas.getContext('2d');

			var fakeStream = canvas.captureStream();
			var fakeVideoTrack = fakeStream.getVideoTracks()[0];
			var rtpSender = pc.addTrack(fakeVideoTrack, fakeStream);

			rtpSender.setParameters({
				encodings: [{ rid: 'RID1', maxBitrate: 40000 }, { rid: 'RID2', maxBitrate: 10000 }]
			});

			return pc.createOffer({
				offerToReceiveAudio: true,
				offerToReceiveVideo: true
			}).then(function (offer) {
				try {
					canvas.remove();
				} catch (error) {}

				try {
					fakeVideoTrack.stop();
				} catch (error) {}

				try {
					pc.close();
				} catch (error) {}

				var sdpObj = _sdpform2.default.parse(offer.sdp);
				var nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities(sdpObj);

				return nativeRtpCapabilities;
			}).catch(function (error) {
				try {
					canvas.remove();
				} catch (error2) {}

				try {
					fakeVideoTrack.stop();
				} catch (error2) {}

				try {
					pc.close();
				} catch (error2) {}

				throw error;
			});
		}
	}, {
		key: 'tag',
		get: function get() {
			return 'Firefox65';
		}
	}]);

	function Firefox65(direction, extendedRtpCapabilities, settings) {
		(0, _classCallCheck3.default)(this, Firefox65);

		logger.debug('constructor() [direction:%s, extendedRtpCapabilities:%o]', direction, extendedRtpCapabilities);

		var rtpParametersByKind = void 0;

		switch (direction) {
			case 'send':
				{
					rtpParametersByKind = {
						audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
						video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
					};

					return new SendHandler(rtpParametersByKind, settings);
				}
			case 'recv':
				{
					rtpParametersByKind = {
						audio: ortc.getReceivingFullRtpParameters('audio', extendedRtpCapabilities),
						video: ortc.getReceivingFullRtpParameters('video', extendedRtpCapabilities)
					};

					return new RecvHandler(rtpParametersByKind, settings);
				}
		}
	}

	return Firefox65;
}();

exports.default = Firefox65;

/***/ }),

/***/ "./lib/mslib/handlers/ReactNative.js":
/*!*******************************************!*\
  !*** ./lib/mslib/handlers/ReactNative.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _from = __webpack_require__(/*! babel-runtime/core-js/array/from */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/array/from.js");

var _from2 = _interopRequireDefault(_from);

var _map = __webpack_require__(/*! babel-runtime/core-js/map */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/map.js");

var _map2 = _interopRequireDefault(_map);

var _promise = __webpack_require__(/*! babel-runtime/core-js/promise */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js");

var _promise2 = _interopRequireDefault(_promise);

var _set = __webpack_require__(/*! babel-runtime/core-js/set */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/set.js");

var _set2 = _interopRequireDefault(_set);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

var _sdpform = __webpack_require__(/*! ../../sdpform */ "./lib/sdpform/index.js");

var _sdpform2 = _interopRequireDefault(_sdpform);

var _Logger = __webpack_require__(/*! ../Logger */ "./lib/mslib/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

var _EnhancedEventEmitter2 = __webpack_require__(/*! ../EnhancedEventEmitter */ "./lib/mslib/EnhancedEventEmitter.js");

var _EnhancedEventEmitter3 = _interopRequireDefault(_EnhancedEventEmitter2);

var _utils = __webpack_require__(/*! ../utils */ "./lib/mslib/utils.js");

var utils = _interopRequireWildcard(_utils);

var _ortc = __webpack_require__(/*! ../ortc */ "./lib/mslib/ortc.js");

var ortc = _interopRequireWildcard(_ortc);

var _commonUtils = __webpack_require__(/*! ./sdp/commonUtils */ "./lib/mslib/handlers/sdp/commonUtils.js");

var sdpCommonUtils = _interopRequireWildcard(_commonUtils);

var _planBUtils = __webpack_require__(/*! ./sdp/planBUtils */ "./lib/mslib/handlers/sdp/planBUtils.js");

var sdpPlanBUtils = _interopRequireWildcard(_planBUtils);

var _RemotePlanBSdp = __webpack_require__(/*! ./sdp/RemotePlanBSdp */ "./lib/mslib/handlers/sdp/RemotePlanBSdp.js");

var _RemotePlanBSdp2 = _interopRequireDefault(_RemotePlanBSdp);

var _bandwidthHandler = __webpack_require__(/*! ./sdp/bandwidthHandler */ "./lib/mslib/handlers/sdp/bandwidthHandler.js");

var _bandwidthHandler2 = _interopRequireDefault(_bandwidthHandler);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = new _Logger2.default('ReactNative');

var Handler = function (_EnhancedEventEmitter) {
	(0, _inherits3.default)(Handler, _EnhancedEventEmitter);

	function Handler(direction, rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, Handler);

		// RTCPeerConnection instance.
		// @type {RTCPeerConnection}
		var _this = (0, _possibleConstructorReturn3.default)(this, (Handler.__proto__ || (0, _getPrototypeOf2.default)(Handler)).call(this, logger));

		_this._pc = new RTCPeerConnection({
			iceServers: settings.turnServers || [],
			iceTransportPolicy: settings.iceTransportPolicy,
			bundlePolicy: 'max-bundle',
			rtcpMuxPolicy: 'require'
		});

		// Generic sending RTP parameters for audio and video.
		// @type {Object}
		_this._rtpParametersByKind = rtpParametersByKind;

		// Remote SDP handler.
		// @type {RemotePlanBSdp}
		_this._remoteSdp = new _RemotePlanBSdp2.default(direction, rtpParametersByKind);

		// Handle RTCPeerConnection connection status.
		_this._pc.addEventListener('iceconnectionstatechange', function () {
			switch (_this._pc.iceConnectionState) {
				case 'checking':
					_this.emit('@connectionstatechange', 'connecting');
					break;
				case 'connected':
				case 'completed':
					_this.emit('@connectionstatechange', 'connected');
					break;
				case 'failed':
					_this.emit('@connectionstatechange', 'failed');
					break;
				case 'disconnected':
					_this.emit('@connectionstatechange', 'disconnected');
					break;
				case 'closed':
					_this.emit('@connectionstatechange', 'closed');
					break;
			}
		});
		return _this;
	}

	(0, _createClass3.default)(Handler, [{
		key: 'close',
		value: function close() {
			logger.debug('close()');

			// Close RTCPeerConnection.
			try {
				this._pc.close();
			} catch (error) {}
		}
	}, {
		key: 'remoteClosed',
		value: function remoteClosed() {
			logger.debug('remoteClosed()');

			this._transportReady = false;

			if (this._transportUpdated) this._transportUpdated = false;
		}
	}]);
	return Handler;
}(_EnhancedEventEmitter3.default);

var SendHandler = function (_Handler) {
	(0, _inherits3.default)(SendHandler, _Handler);

	function SendHandler(rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, SendHandler);

		// Got transport local and remote parameters.
		// @type {Boolean}
		var _this2 = (0, _possibleConstructorReturn3.default)(this, (SendHandler.__proto__ || (0, _getPrototypeOf2.default)(SendHandler)).call(this, 'send', rtpParametersByKind, settings));

		_this2._transportReady = false;

		// Handled tracks.
		// @type {Set<MediaStreamTrack>}
		_this2._tracks = new _set2.default();
		return _this2;
	}

	(0, _createClass3.default)(SendHandler, [{
		key: 'addProducer',
		value: function addProducer(producer) {
			var _this3 = this;

			var track = producer.track;


			logger.debug('addProducer() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			if (this._tracks.has(track)) return _promise2.default.reject(new Error('track already added'));

			if (!track.streamReactTag) return _promise2.default.reject(new Error('no track.streamReactTag property'));

			var stream = void 0;
			var localSdpObj = void 0;

			return _promise2.default.resolve().then(function () {
				// Add the track to the Set.
				_this3._tracks.add(track);

				// Hack: Create a new stream with track.streamReactTag as id.
				stream = new MediaStream(track.streamReactTag);

				// Add the track to the stream.
				stream.addTrack(track);

				// Add the stream to the PeerConnection.
				_this3._pc.addStream(stream);

				return _this3._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				// If simulcast is set, mangle the offer.
				if (producer.simulcast) {
					logger.debug('addProducer() | enabling simulcast');

					var sdpObject = _sdpform2.default.parse(offer.sdp);

					sdpPlanBUtils.addSimulcastForTrack(sdpObject, track);

					var offerSdp = _sdpform2.default.write(sdpObject);

					offer = { type: 'offer', sdp: offerSdp };
				}

				logger.debug('addProducer() | calling pc.setLocalDescription() [offer:%o]', offer);

				var offerDesc = new RTCSessionDescription(offer);

				return _this3._pc.setLocalDescription(offerDesc);
			}).then(function () {
				if (!_this3._transportReady) return _this3._setupTransport();
			}).then(function () {
				localSdpObj = _sdpform2.default.parse(_this3._pc.localDescription.sdp);

				var remoteSdp = _this3._remoteSdp.createAnswerSdp(localSdpObj);

				// for video bitrate - jove
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('addProducer() | calling pc.setRemoteDescription() [answer:%o]', answer);

				var answerDesc = new RTCSessionDescription(answer);

				return _this3._pc.setRemoteDescription(answerDesc);
			}).then(function () {
				var rtpParameters = utils.clone(_this3._rtpParametersByKind[producer.kind]);

				// Fill the RTP parameters for this track.
				sdpPlanBUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track);

				return rtpParameters;
			}).catch(function (error) {
				// Panic here. Try to undo things.

				_this3._tracks.delete(track);
				stream.removeTrack(track);
				_this3._pc.removeStream(stream);

				throw error;
			});
		}
	}, {
		key: 'removeProducer',
		value: function removeProducer(producer) {
			var _this4 = this;

			var track = producer.track;


			logger.debug('removeProducer() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			if (!track.streamReactTag) return _promise2.default.reject(new Error('no track.streamReactTag property'));

			return _promise2.default.resolve().then(function () {
				// Remove the track from the Set.
				_this4._tracks.delete(track);

				// Hack: Create a new stream with track.streamReactTag as id.
				var stream = new MediaStream(track.streamReactTag);

				// Add the track to the stream.
				stream.addTrack(track);

				// Remove the stream from the PeerConnection.
				_this4._pc.removeStream(stream);

				return _this4._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				logger.debug('removeProducer() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this4._pc.setLocalDescription(offer);
			}).catch(function (error) {
				// NOTE: If there are no sending tracks, setLocalDescription() will fail with
				// "Failed to create channels". If so, ignore it.
				if (_this4._tracks.size === 0) {
					logger.warn('removeProducer() | ignoring expected error due no sending tracks: %s', error.toString());

					return;
				}

				throw error;
			}).then(function () {
				if (_this4._pc.signalingState === 'stable') return;

				var localSdpObj = _sdpform2.default.parse(_this4._pc.localDescription.sdp);
				var remoteSdp = _this4._remoteSdp.createAnswerSdp(localSdpObj);

				// for video bitrate - jove
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('removeProducer() | calling pc.setRemoteDescription() [answer:%o]', answer);

				var answerDesc = new RTCSessionDescription(answer);

				return _this4._pc.setRemoteDescription(answerDesc);
			});
		}
	}, {
		key: 'replaceProducerTrack',
		value: function replaceProducerTrack(producer, track) {
			var _this5 = this;

			logger.debug('replaceProducerTrack() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			if (!track.streamReactTag) return _promise2.default.reject(new Error('no track.streamReactTag property'));

			var oldTrack = producer.track;
			var stream = void 0;
			var localSdpObj = void 0;

			return _promise2.default.resolve().then(function () {
				// Add the new Track to the Set and remove the old one.
				_this5._tracks.add(track);
				_this5._tracks.delete(oldTrack);

				// Hack: Create a new stream with track.streamReactTag as id.
				stream = new MediaStream(track.streamReactTag);

				// Add the track to the stream and remove the old one.
				stream.addTrack(track);
				stream.removeTrack(oldTrack);

				// Add the stream to the PeerConnection.
				_this5._pc.addStream(stream);

				return _this5._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				// If simulcast is set, mangle the offer.
				if (producer.simulcast) {
					logger.debug('addProducer() | enabling simulcast');

					var sdpObject = _sdpform2.default.parse(offer.sdp);

					sdpPlanBUtils.addSimulcastForTrack(sdpObject, track);

					var offerSdp = _sdpform2.default.write(sdpObject);

					offer = { type: 'offer', sdp: offerSdp };
				}

				logger.debug('replaceProducerTrack() | calling pc.setLocalDescription() [offer:%o]', offer);

				var offerDesc = new RTCSessionDescription(offer);

				return _this5._pc.setLocalDescription(offerDesc);
			}).then(function () {
				localSdpObj = _sdpform2.default.parse(_this5._pc.localDescription.sdp);

				var remoteSdp = _this5._remoteSdp.createAnswerSdp(localSdpObj);

				// for video bitrate - jove
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('replaceProducerTrack() | calling pc.setRemoteDescription() [answer:%o]', answer);

				var answerDesc = new RTCSessionDescription(answer);

				return _this5._pc.setRemoteDescription(answerDesc);
			}).then(function () {
				var rtpParameters = utils.clone(_this5._rtpParametersByKind[producer.kind]);

				// Fill the RTP parameters for the new track.
				sdpPlanBUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track);

				// We need to provide new RTP parameters.
				_this5.safeEmit('@needupdateproducer', producer, rtpParameters);
			}).catch(function (error) {
				// Panic here. Try to undo things.

				_this5._tracks.delete(track);
				stream.removeTrack(track);
				_this5._pc.addStream(stream);

				throw error;
			});
		}
	}, {
		key: 'restartIce',
		value: function restartIce(remoteIceParameters) {
			var _this6 = this;

			logger.debug('restartIce()');

			// Provide the remote SDP handler with new remote ICE parameters.
			this._remoteSdp.updateTransportRemoteIceParameters(remoteIceParameters);

			return _promise2.default.resolve().then(function () {
				return _this6._pc.createOffer({ iceRestart: true });
			}).then(function (offer) {
				logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this6._pc.setLocalDescription(offer);
			}).then(function () {
				var localSdpObj = _sdpform2.default.parse(_this6._pc.localDescription.sdp);
				var remoteSdp = _this6._remoteSdp.createAnswerSdp(localSdpObj);
				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);

				var answerDesc = new RTCSessionDescription(answer);

				return _this6._pc.setRemoteDescription(answerDesc);
			});
		}
	}, {
		key: '_setupTransport',
		value: function _setupTransport() {
			var _this7 = this;

			logger.debug('_setupTransport()');

			return _promise2.default.resolve().then(function () {
				// Get our local DTLS parameters.
				var transportLocalParameters = {};
				var sdp = _this7._pc.localDescription.sdp;
				var sdpObj = _sdpform2.default.parse(sdp);
				var dtlsParameters = sdpCommonUtils.extractDtlsParameters(sdpObj);

				// Let's decide that we'll be DTLS server (because we can).
				dtlsParameters.role = 'server';

				transportLocalParameters.dtlsParameters = dtlsParameters;

				// Provide the remote SDP handler with transport local parameters.
				_this7._remoteSdp.setTransportLocalParameters(transportLocalParameters);

				// We need transport remote parameters.
				return _this7.safeEmitAsPromise('@needcreatetransport', transportLocalParameters);
			}).then(function (transportRemoteParameters) {
				// Provide the remote SDP handler with transport remote parameters.
				_this7._remoteSdp.setTransportRemoteParameters(transportRemoteParameters);

				_this7._transportReady = true;
			});
		}
	}, {
		key: 'updateTrack',
		value: function updateTrack(producer, track) {
			var _this8 = this;

			logger.debug('update Track() [trackId:%s]', track.id);
			var localSdpObj; // Add the track id to the Set.
			var transceiver;

			return _promise2.default.resolve().then(function () {
				// Let's check if there is transceiver for same kind.
				// One production consists video or (and) audio track(s).
				transceiver = _this8._pc.getTransceivers().find(function (t) {
					return t.receiver.track.kind === track.kind;
				});
			}).then(function () {
				return _this8._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				// If simulcast is set, mangle the offer.
				// var offerSdp;
				if (producer.simulcast) {
					logger.debug('updateTrack() | enabling simulcast');

					var sdpObject = _sdpform2.default.parse(offer.sdp);

					sdpPlanBUtils.addSimulcastForTrack(sdpObject, track);
					/*
     sdpPlanBUtils.addPlanBSimulcast(sdpObject, track, {
         mid: transceiver.mid
     });
     */

					var offerSdp = _sdpform2.default.write(sdpObject);

					offer = {
						type: 'offer',
						sdp: offerSdp
					};
				}

				logger.debug('updateTrack() | calling pc.setLocalDescription() [offer:%o]', offer);
				return _this8._pc.setLocalDescription(offer);
			}).then(function () {
				localSdpObj = _sdpform2.default.parse(_this8._pc.localDescription.sdp);

				var remoteSdp = _this8._remoteSdp.createAnswerSdp(localSdpObj);
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = {
					type: 'answer',
					sdp: remoteSdp
				};
				logger.debug('updateTrack() | calling pc.setRemoteDescription() [answer:%o]', answer);
				return _this8._pc.setRemoteDescription(answer);
			}).then(function () {
				var rtpParameters = utils.clone(_this8._rtpParametersByKind[producer.kind]);
				sdpPlanBUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track);
				/*
    sdpPlanBUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track, {
        mid: transceiver.mid,
        planBSimulcast: true
    });
    */
				return rtpParameters;
			}).catch(function (error) {
				// Panic here. Try to undo things.
				// failed at here and nothing to do.
				throw error;
			});
		}
	}]);
	return SendHandler;
}(Handler);

var RecvHandler = function (_Handler2) {
	(0, _inherits3.default)(RecvHandler, _Handler2);

	function RecvHandler(rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, RecvHandler);

		// Got transport remote parameters.
		// @type {Boolean}
		var _this9 = (0, _possibleConstructorReturn3.default)(this, (RecvHandler.__proto__ || (0, _getPrototypeOf2.default)(RecvHandler)).call(this, 'recv', rtpParametersByKind, settings));

		_this9._transportCreated = false;

		// Got transport local parameters.
		// @type {Boolean}
		_this9._transportUpdated = false;

		// Seen media kinds.
		// @type {Set<String>}
		_this9._kinds = new _set2.default();

		// Map of Consumers information indexed by consumer.id.
		// - kind {String}
		// - trackId {String}
		// - ssrc {Number}
		// - rtxSsrc {Number}
		// - cname {String}
		// @type {Map<Number, Object>}
		_this9._consumerInfos = new _map2.default();
		return _this9;
	}

	(0, _createClass3.default)(RecvHandler, [{
		key: 'addConsumer',
		value: function addConsumer(consumer) {
			var _this10 = this;

			logger.debug('addConsumer() [id:%s, kind:%s]', consumer.id, consumer.kind);

			if (this._consumerInfos.has(consumer.id)) return _promise2.default.reject(new Error('Consumer already added'));

			var encoding = consumer.rtpParameters.encodings[0];
			var cname = consumer.rtpParameters.rtcp.cname;
			var consumerInfo = {
				kind: consumer.kind,
				streamId: 'recv-stream-' + consumer.id,
				trackId: 'consumer-' + consumer.kind + '-' + consumer.id,
				ssrc: encoding.ssrc,
				cname: cname
			};

			if (encoding.rtx && encoding.rtx.ssrc) consumerInfo.rtxSsrc = encoding.rtx.ssrc;

			this._consumerInfos.set(consumer.id, consumerInfo);
			this._kinds.add(consumer.kind);

			return _promise2.default.resolve().then(function () {
				if (!_this10._transportCreated) return _this10._setupTransport();
			}).then(function () {
				var remoteSdp = _this10._remoteSdp.createOfferSdp((0, _from2.default)(_this10._kinds), (0, _from2.default)(_this10._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('addConsumer() | calling pc.setRemoteDescription() [offer:%o]', offer);

				var offerDesc = new RTCSessionDescription(offer);

				return _this10._pc.setRemoteDescription(offerDesc);
			}).then(function () {
				return _this10._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('addConsumer() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this10._pc.setLocalDescription(answer);
			}).then(function () {
				if (!_this10._transportUpdated) return _this10._updateTransport();
			}).then(function () {
				var stream = _this10._pc.getRemoteStreams().find(function (s) {
					return s.id === consumerInfo.streamId;
				});
				var track = stream.getTrackById(consumerInfo.trackId);

				// Hack: Add a streamReactTag property with the reactTag of the MediaStream
				// generated by react-native-webrtc (this is needed because react-native-webrtc
				// assumes that we're gonna use the streams generated by it).
				track.streamReactTag = stream.reactTag;

				if (!track) throw new Error('remote track not found');

				return track;
			});
		}
	}, {
		key: 'removeConsumer',
		value: function removeConsumer(consumer) {
			var _this11 = this;

			logger.debug('removeConsumer() [id:%s, kind:%s]', consumer.id, consumer.kind);

			if (!this._consumerInfos.has(consumer.id)) return _promise2.default.reject(new Error('Consumer not found'));

			this._consumerInfos.delete(consumer.id);

			return _promise2.default.resolve().then(function () {
				var remoteSdp = _this11._remoteSdp.createOfferSdp((0, _from2.default)(_this11._kinds), (0, _from2.default)(_this11._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('removeConsumer() | calling pc.setRemoteDescription() [offer:%o]', offer);

				var offerDesc = new RTCSessionDescription(offer);

				return _this11._pc.setRemoteDescription(offerDesc);
			}).then(function () {
				return _this11._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('removeConsumer() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this11._pc.setLocalDescription(answer);
			});
		}
	}, {
		key: 'restartIce',
		value: function restartIce(remoteIceParameters) {
			var _this12 = this;

			logger.debug('restartIce()');

			// Provide the remote SDP handler with new remote ICE parameters.
			this._remoteSdp.updateTransportRemoteIceParameters(remoteIceParameters);

			return _promise2.default.resolve().then(function () {
				var remoteSdp = _this12._remoteSdp.createOfferSdp((0, _from2.default)(_this12._kinds), (0, _from2.default)(_this12._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);

				var offerDesc = new RTCSessionDescription(offer);

				return _this12._pc.setRemoteDescription(offerDesc);
			}).then(function () {
				return _this12._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this12._pc.setLocalDescription(answer);
			});
		}
	}, {
		key: '_setupTransport',
		value: function _setupTransport() {
			var _this13 = this;

			logger.debug('_setupTransport()');

			return _promise2.default.resolve().then(function () {
				// We need transport remote parameters.
				return _this13.safeEmitAsPromise('@needcreatetransport', null);
			}).then(function (transportRemoteParameters) {
				// Provide the remote SDP handler with transport remote parameters.
				_this13._remoteSdp.setTransportRemoteParameters(transportRemoteParameters);

				_this13._transportCreated = true;
			});
		}
	}, {
		key: '_updateTransport',
		value: function _updateTransport() {
			logger.debug('_updateTransport()');

			// Get our local DTLS parameters.
			var sdp = this._pc.localDescription.sdp;
			var sdpObj = _sdpform2.default.parse(sdp);
			var dtlsParameters = sdpCommonUtils.extractDtlsParameters(sdpObj);
			var transportLocalParameters = { dtlsParameters: dtlsParameters };

			// We need to provide transport local parameters.
			this.safeEmit('@needupdatetransport', transportLocalParameters);

			this._transportUpdated = true;
		}
	}]);
	return RecvHandler;
}(Handler);

var ReactNative = function () {
	(0, _createClass3.default)(ReactNative, null, [{
		key: 'getNativeRtpCapabilities',
		value: function getNativeRtpCapabilities() {
			logger.debug('getNativeRtpCapabilities()');

			var pc = new RTCPeerConnection({
				iceServers: [],
				iceTransportPolicy: 'all',
				bundlePolicy: 'max-bundle',
				rtcpMuxPolicy: 'require'
			});

			return pc.createOffer({
				offerToReceiveAudio: true,
				offerToReceiveVideo: true
			}).then(function (offer) {
				try {
					pc.close();
				} catch (error) {}

				var sdpObj = _sdpform2.default.parse(offer.sdp);
				var nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities(sdpObj);

				return nativeRtpCapabilities;
			}).catch(function (error) {
				try {
					pc.close();
				} catch (error2) {}

				throw error;
			});
		}
	}, {
		key: 'tag',
		get: function get() {
			return 'ReactNative';
		}
	}]);

	function ReactNative(direction, extendedRtpCapabilities, settings) {
		(0, _classCallCheck3.default)(this, ReactNative);

		logger.debug('constructor() [direction:%s, extendedRtpCapabilities:%o]', direction, extendedRtpCapabilities);

		var rtpParametersByKind = void 0;

		switch (direction) {
			case 'send':
				{
					rtpParametersByKind = {
						audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
						video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
					};

					return new SendHandler(rtpParametersByKind, settings);
				}
			case 'recv':
				{
					rtpParametersByKind = {
						audio: ortc.getReceivingFullRtpParameters('audio', extendedRtpCapabilities),
						video: ortc.getReceivingFullRtpParameters('video', extendedRtpCapabilities)
					};

					return new RecvHandler(rtpParametersByKind, settings);
				}
		}
	}

	return ReactNative;
}();

exports.default = ReactNative;

/***/ }),

/***/ "./lib/mslib/handlers/Safari11.js":
/*!****************************************!*\
  !*** ./lib/mslib/handlers/Safari11.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _from = __webpack_require__(/*! babel-runtime/core-js/array/from */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/array/from.js");

var _from2 = _interopRequireDefault(_from);

var _map = __webpack_require__(/*! babel-runtime/core-js/map */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/map.js");

var _map2 = _interopRequireDefault(_map);

var _set = __webpack_require__(/*! babel-runtime/core-js/set */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/set.js");

var _set2 = _interopRequireDefault(_set);

var _promise = __webpack_require__(/*! babel-runtime/core-js/promise */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js");

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

var _sdpform = __webpack_require__(/*! ../../sdpform */ "./lib/sdpform/index.js");

var _sdpform2 = _interopRequireDefault(_sdpform);

var _Logger = __webpack_require__(/*! ../Logger */ "./lib/mslib/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

var _EnhancedEventEmitter2 = __webpack_require__(/*! ../EnhancedEventEmitter */ "./lib/mslib/EnhancedEventEmitter.js");

var _EnhancedEventEmitter3 = _interopRequireDefault(_EnhancedEventEmitter2);

var _utils = __webpack_require__(/*! ../utils */ "./lib/mslib/utils.js");

var utils = _interopRequireWildcard(_utils);

var _ortc = __webpack_require__(/*! ../ortc */ "./lib/mslib/ortc.js");

var ortc = _interopRequireWildcard(_ortc);

var _commonUtils = __webpack_require__(/*! ./sdp/commonUtils */ "./lib/mslib/handlers/sdp/commonUtils.js");

var sdpCommonUtils = _interopRequireWildcard(_commonUtils);

var _planBUtils = __webpack_require__(/*! ./sdp/planBUtils */ "./lib/mslib/handlers/sdp/planBUtils.js");

var sdpPlanBUtils = _interopRequireWildcard(_planBUtils);

var _RemotePlanBSdp = __webpack_require__(/*! ./sdp/RemotePlanBSdp */ "./lib/mslib/handlers/sdp/RemotePlanBSdp.js");

var _RemotePlanBSdp2 = _interopRequireDefault(_RemotePlanBSdp);

var _bandwidthHandler = __webpack_require__(/*! ./sdp/bandwidthHandler */ "./lib/mslib/handlers/sdp/bandwidthHandler.js");

var _bandwidthHandler2 = _interopRequireDefault(_bandwidthHandler);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = new _Logger2.default('Safari11');

var Handler = function (_EnhancedEventEmitter) {
	(0, _inherits3.default)(Handler, _EnhancedEventEmitter);

	function Handler(direction, rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, Handler);

		// RTCPeerConnection instance.
		// @type {RTCPeerConnection}
		var _this = (0, _possibleConstructorReturn3.default)(this, (Handler.__proto__ || (0, _getPrototypeOf2.default)(Handler)).call(this, logger));

		_this._pc = new RTCPeerConnection({
			iceServers: settings.turnServers || [],
			iceTransportPolicy: settings.iceTransportPolicy,
			bundlePolicy: 'max-bundle',
			rtcpMuxPolicy: 'require'
		});

		// Generic sending RTP parameters for audio and video.
		// @type {Object}
		_this._rtpParametersByKind = rtpParametersByKind;

		// Remote SDP handler.
		// @type {RemotePlanBSdp}
		_this._remoteSdp = new _RemotePlanBSdp2.default(direction, rtpParametersByKind);

		// Handle RTCPeerConnection connection status.
		_this._pc.addEventListener('iceconnectionstatechange', function () {
			switch (_this._pc.iceConnectionState) {
				case 'checking':
					_this.emit('@connectionstatechange', 'connecting');
					break;
				case 'connected':
				case 'completed':
					_this.emit('@connectionstatechange', 'connected');
					break;
				case 'failed':
					_this.emit('@connectionstatechange', 'failed');
					break;
				case 'disconnected':
					_this.emit('@connectionstatechange', 'disconnected');
					break;
				case 'closed':
					_this.emit('@connectionstatechange', 'closed');
					break;
			}
		});
		return _this;
	}

	(0, _createClass3.default)(Handler, [{
		key: 'close',
		value: function close() {
			logger.debug('close()');

			// Close RTCPeerConnection.
			try {
				this._pc.close();
			} catch (error) {}
		}
	}, {
		key: 'remoteClosed',
		value: function remoteClosed() {
			logger.debug('remoteClosed()');

			this._transportReady = false;

			if (this._transportUpdated) this._transportUpdated = false;
		}
	}]);
	return Handler;
}(_EnhancedEventEmitter3.default);

var SendHandler = function (_Handler) {
	(0, _inherits3.default)(SendHandler, _Handler);

	function SendHandler(rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, SendHandler);

		// Got transport local and remote parameters.
		// @type {Boolean}
		var _this2 = (0, _possibleConstructorReturn3.default)(this, (SendHandler.__proto__ || (0, _getPrototypeOf2.default)(SendHandler)).call(this, 'send', rtpParametersByKind, settings));

		_this2._transportReady = false;

		// Local stream.
		// @type {MediaStream}
		_this2._stream = new MediaStream();
		return _this2;
	}

	(0, _createClass3.default)(SendHandler, [{
		key: 'addProducer',
		value: function addProducer(producer) {
			var _this3 = this;

			var track = producer.track;


			logger.debug('addProducer() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			if (this._stream.getTrackById(track.id)) return _promise2.default.reject(new Error('track already added'));

			var rtpSender = void 0;
			var localSdpObj = void 0;

			return _promise2.default.resolve().then(function () {
				// Add the track to the local stream.
				_this3._stream.addTrack(track);

				// Add the stream to the PeerConnection.
				rtpSender = _this3._pc.addTrack(track, _this3._stream);

				return _this3._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				logger.debug('addProducer() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this3._pc.setLocalDescription(offer);
			}).then(function () {
				if (!_this3._transportReady) return _this3._setupTransport();
			}).then(function () {
				localSdpObj = _sdpform2.default.parse(_this3._pc.localDescription.sdp);

				var remoteSdp = _this3._remoteSdp.createAnswerSdp(localSdpObj);

				// for video bitrate - jove
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('addProducer() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this3._pc.setRemoteDescription(answer);
			}).then(function () {
				var rtpParameters = utils.clone(_this3._rtpParametersByKind[producer.kind]);

				// Fill the RTP parameters for this track.
				sdpPlanBUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track);

				return rtpParameters;
			}).catch(function (error) {
				// Panic here. Try to undo things.

				try {
					_this3._pc.removeTrack(rtpSender);
				} catch (error2) {}

				_this3._stream.removeTrack(track);

				throw error;
			});
		}
	}, {
		key: 'removeProducer',
		value: function removeProducer(producer) {
			var _this4 = this;

			var track = producer.track;


			logger.debug('removeProducer() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			return _promise2.default.resolve().then(function () {
				// Get the associated RTCRtpSender.
				var rtpSender = _this4._pc.getSenders().find(function (s) {
					return s.track === track;
				});

				if (!rtpSender) throw new Error('RTCRtpSender not found');

				// Remove the associated RtpSender.
				_this4._pc.removeTrack(rtpSender);

				// Remove the track from the local stream.
				_this4._stream.removeTrack(track);

				return _this4._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				logger.debug('removeProducer() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this4._pc.setLocalDescription(offer);
			}).catch(function (error) {
				// NOTE: If there are no sending tracks, setLocalDescription() will fail with
				// "Failed to create channels". If so, ignore it.
				if (_this4._stream.getTracks().length === 0) {
					logger.warn('removeProducer() | ignoring expected error due no sending tracks: %s', error.toString());

					return;
				}

				throw error;
			}).then(function () {
				if (_this4._pc.signalingState === 'stable') return;

				var localSdpObj = _sdpform2.default.parse(_this4._pc.localDescription.sdp);
				var remoteSdp = _this4._remoteSdp.createAnswerSdp(localSdpObj);

				// for video bitrate - jove
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('removeProducer() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this4._pc.setRemoteDescription(answer);
			});
		}
	}, {
		key: 'replaceProducerTrack',
		value: function replaceProducerTrack(producer, track) {
			var _this5 = this;

			logger.debug('replaceProducerTrack() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			var oldTrack = producer.track;

			return _promise2.default.resolve().then(function () {
				// Get the associated RTCRtpSender.
				var rtpSender = _this5._pc.getSenders().find(function (s) {
					return s.track === oldTrack;
				});

				if (!rtpSender) throw new Error('local track not found');

				return rtpSender.replaceTrack(track);
			}).then(function () {
				// Remove the old track from the local stream.
				_this5._stream.removeTrack(oldTrack);

				// Add the new track to the local stream.
				_this5._stream.addTrack(track);
			});
		}
	}, {
		key: 'restartIce',
		value: function restartIce(remoteIceParameters) {
			var _this6 = this;

			logger.debug('restartIce()');

			// Provide the remote SDP handler with new remote ICE parameters.
			this._remoteSdp.updateTransportRemoteIceParameters(remoteIceParameters);

			return _promise2.default.resolve().then(function () {
				return _this6._pc.createOffer({ iceRestart: true });
			}).then(function (offer) {
				logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this6._pc.setLocalDescription(offer);
			}).then(function () {
				var localSdpObj = _sdpform2.default.parse(_this6._pc.localDescription.sdp);
				var remoteSdp = _this6._remoteSdp.createAnswerSdp(localSdpObj);
				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this6._pc.setRemoteDescription(answer);
			});
		}
	}, {
		key: '_setupTransport',
		value: function _setupTransport() {
			var _this7 = this;

			logger.debug('_setupTransport()');

			return _promise2.default.resolve().then(function () {
				// Get our local DTLS parameters.
				var transportLocalParameters = {};
				var sdp = _this7._pc.localDescription.sdp;
				var sdpObj = _sdpform2.default.parse(sdp);
				var dtlsParameters = sdpCommonUtils.extractDtlsParameters(sdpObj);

				// Let's decide that we'll be DTLS server (because we can).
				dtlsParameters.role = 'server';

				transportLocalParameters.dtlsParameters = dtlsParameters;

				// Provide the remote SDP handler with transport local parameters.
				_this7._remoteSdp.setTransportLocalParameters(transportLocalParameters);

				// We need transport remote parameters.
				return _this7.safeEmitAsPromise('@needcreatetransport', transportLocalParameters);
			}).then(function (transportRemoteParameters) {
				// Provide the remote SDP handler with transport remote parameters.
				_this7._remoteSdp.setTransportRemoteParameters(transportRemoteParameters);

				_this7._transportReady = true;
			});
		}
	}, {
		key: 'getPCStats',
		value: function getPCStats(selector) {
			// logger.debug('getPCStats of send', selector);
			return this._pc.getStats(selector).then(function (stats) {
				return stats;
			}).catch(function (e) {
				throw e;
			});
		}
	}, {
		key: 'updateTrack',
		value: function updateTrack(producer, track) {
			var _this8 = this;

			logger.debug('update Track() [trackId:%s]', track.id);
			var localSdpObj; // Add the track id to the Set.
			var transceiver;

			return _promise2.default.resolve().then(function () {
				// Let's check if there is transceiver for same kind.
				// One production consists video or (and) audio track(s).
				transceiver = _this8._pc.getTransceivers().find(function (t) {
					return t.receiver.track.kind === track.kind;
				});
			}).then(function () {
				return _this8._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				// If simulcast is set, mangle the offer.
				// var offerSdp;
				if (producer.simulcast) {
					logger.debug('updateTrack() | enabling simulcast');

					var sdpObject = _sdpform2.default.parse(offer.sdp);

					sdpPlanBUtils.addSimulcastForTrack(sdpObject, track);
					/*
     sdpPlanBUtils.addPlanBSimulcast(sdpObject, track, {
         mid: transceiver.mid
     });
     */

					var offerSdp = _sdpform2.default.write(sdpObject);

					offer = {
						type: 'offer',
						sdp: offerSdp
					};
				}

				logger.debug('updateTrack() | calling pc.setLocalDescription() [offer:%o]', offer);
				return _this8._pc.setLocalDescription(offer);
			}).then(function () {
				localSdpObj = _sdpform2.default.parse(_this8._pc.localDescription.sdp);

				var remoteSdp = _this8._remoteSdp.createAnswerSdp(localSdpObj);
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = {
					type: 'answer',
					sdp: remoteSdp
				};
				logger.debug('updateTrack() | calling pc.setRemoteDescription() [answer:%o]', answer);
				return _this8._pc.setRemoteDescription(answer);
			}).then(function () {
				var rtpParameters = utils.clone(_this8._rtpParametersByKind[producer.kind]);
				sdpPlanBUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track);
				/*
    sdpPlanBUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track, {
        mid: transceiver.mid,
        planBSimulcast: true
    });
    */
				return rtpParameters;
			}).catch(function (error) {
				// Panic here. Try to undo things.
				// failed at here and nothing to do.
				throw error;
			});
		}
	}]);
	return SendHandler;
}(Handler);

var RecvHandler = function (_Handler2) {
	(0, _inherits3.default)(RecvHandler, _Handler2);

	function RecvHandler(rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, RecvHandler);

		// Got transport remote parameters.
		// @type {Boolean}
		var _this9 = (0, _possibleConstructorReturn3.default)(this, (RecvHandler.__proto__ || (0, _getPrototypeOf2.default)(RecvHandler)).call(this, 'recv', rtpParametersByKind, settings));

		_this9._transportCreated = false;

		// Got transport local parameters.
		// @type {Boolean}
		_this9._transportUpdated = false;

		// Seen media kinds.
		// @type {Set<String>}
		_this9._kinds = new _set2.default();

		// Map of Consumers information indexed by consumer.id.
		// - kind {String}
		// - trackId {String}
		// - ssrc {Number}
		// - rtxSsrc {Number}
		// - cname {String}
		// @type {Map<Number, Object>}
		_this9._consumerInfos = new _map2.default();
		return _this9;
	}

	(0, _createClass3.default)(RecvHandler, [{
		key: 'addConsumer',
		value: function addConsumer(consumer) {
			var _this10 = this;

			logger.debug('addConsumer() [id:%s, kind:%s]', consumer.id, consumer.kind);

			if (this._consumerInfos.has(consumer.id)) return _promise2.default.reject(new Error('Consumer already added'));

			var encoding = consumer.rtpParameters.encodings[0];
			var cname = consumer.rtpParameters.rtcp.cname;
			var consumerInfo = {
				kind: consumer.kind,
				streamId: 'recv-stream-' + consumer.id,
				trackId: 'consumer-' + consumer.kind + '-' + consumer.id,
				ssrc: encoding.ssrc,
				cname: cname
			};

			if (encoding.rtx && encoding.rtx.ssrc) consumerInfo.rtxSsrc = encoding.rtx.ssrc;

			this._consumerInfos.set(consumer.id, consumerInfo);
			this._kinds.add(consumer.kind);

			return _promise2.default.resolve().then(function () {
				if (!_this10._transportCreated) return _this10._setupTransport();
			}).then(function () {
				var remoteSdp = _this10._remoteSdp.createOfferSdp((0, _from2.default)(_this10._kinds), (0, _from2.default)(_this10._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('addConsumer() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this10._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this10._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('addConsumer() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this10._pc.setLocalDescription(answer);
			}).then(function () {
				if (!_this10._transportUpdated) return _this10._updateTransport();
			}).then(function () {
				var newRtpReceiver = _this10._pc.getReceivers().find(function (rtpReceiver) {
					var track = rtpReceiver.track;


					if (!track) return false;

					return track.id === consumerInfo.trackId;
				});

				if (!newRtpReceiver) throw new Error('remote track not found');

				return newRtpReceiver.track;
			});
		}
	}, {
		key: 'removeConsumer',
		value: function removeConsumer(consumer) {
			var _this11 = this;

			logger.debug('removeConsumer() [id:%s, kind:%s]', consumer.id, consumer.kind);

			if (!this._consumerInfos.has(consumer.id)) return _promise2.default.reject(new Error('Consumer not found'));

			this._consumerInfos.delete(consumer.id);

			return _promise2.default.resolve().then(function () {
				var remoteSdp = _this11._remoteSdp.createOfferSdp((0, _from2.default)(_this11._kinds), (0, _from2.default)(_this11._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('removeConsumer() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this11._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this11._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('removeConsumer() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this11._pc.setLocalDescription(answer);
			});
		}
	}, {
		key: 'restartIce',
		value: function restartIce(remoteIceParameters) {
			var _this12 = this;

			logger.debug('restartIce()');

			// Provide the remote SDP handler with new remote ICE parameters.
			this._remoteSdp.updateTransportRemoteIceParameters(remoteIceParameters);

			return _promise2.default.resolve().then(function () {
				var remoteSdp = _this12._remoteSdp.createOfferSdp((0, _from2.default)(_this12._kinds), (0, _from2.default)(_this12._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this12._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this12._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this12._pc.setLocalDescription(answer);
			});
		}
	}, {
		key: '_setupTransport',
		value: function _setupTransport() {
			var _this13 = this;

			logger.debug('_setupTransport()');

			return _promise2.default.resolve().then(function () {
				// We need transport remote parameters.
				return _this13.safeEmitAsPromise('@needcreatetransport', null);
			}).then(function (transportRemoteParameters) {
				// Provide the remote SDP handler with transport remote parameters.
				_this13._remoteSdp.setTransportRemoteParameters(transportRemoteParameters);

				_this13._transportCreated = true;
			});
		}
	}, {
		key: '_updateTransport',
		value: function _updateTransport() {
			logger.debug('_updateTransport()');

			// Get our local DTLS parameters.
			var sdp = this._pc.localDescription.sdp;
			var sdpObj = _sdpform2.default.parse(sdp);
			var dtlsParameters = sdpCommonUtils.extractDtlsParameters(sdpObj);
			var transportLocalParameters = { dtlsParameters: dtlsParameters };

			// We need to provide transport local parameters.
			this.safeEmit('@needupdatetransport', transportLocalParameters);

			this._transportUpdated = true;
		}
	}, {
		key: 'getPCStats',
		value: function getPCStats(selector) {
			// logger.debug('getPCStats of recv', selector);
			return this._pc.getStats(selector).then(function (stats) {
				return stats;
			}).catch(function (e) {
				throw e;
			});
		}
	}]);
	return RecvHandler;
}(Handler);

var Safari11 = function () {
	(0, _createClass3.default)(Safari11, null, [{
		key: 'getNativeRtpCapabilities',
		value: function getNativeRtpCapabilities() {
			logger.debug('getNativeRtpCapabilities()');

			var pc = new RTCPeerConnection({
				iceServers: [],
				iceTransportPolicy: 'all',
				bundlePolicy: 'max-bundle',
				rtcpMuxPolicy: 'require'
			});

			pc.addTransceiver('audio');
			pc.addTransceiver('video');

			return pc.createOffer().then(function (offer) {
				try {
					pc.close();
				} catch (error) {}

				var sdpObj = _sdpform2.default.parse(offer.sdp);
				var nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities(sdpObj);

				return nativeRtpCapabilities;
			}).catch(function (error) {
				try {
					pc.close();
				} catch (error2) {}

				throw error;
			});
		}
	}, {
		key: 'tag',
		get: function get() {
			return 'Safari11';
		}
	}]);

	function Safari11(direction, extendedRtpCapabilities, settings) {
		(0, _classCallCheck3.default)(this, Safari11);

		logger.debug('constructor() [direction:%s, extendedRtpCapabilities:%o]', direction, extendedRtpCapabilities);

		var rtpParametersByKind = void 0;

		switch (direction) {
			case 'send':
				{
					rtpParametersByKind = {
						audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
						video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
					};

					return new SendHandler(rtpParametersByKind, settings);
				}
			case 'recv':
				{
					rtpParametersByKind = {
						audio: ortc.getReceivingFullRtpParameters('audio', extendedRtpCapabilities),
						video: ortc.getReceivingFullRtpParameters('video', extendedRtpCapabilities)
					};

					return new RecvHandler(rtpParametersByKind, settings);
				}
		}
	}

	return Safari11;
}();

exports.default = Safari11;

/***/ }),

/***/ "./lib/mslib/handlers/Safari12.js":
/*!****************************************!*\
  !*** ./lib/mslib/handlers/Safari12.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _from = __webpack_require__(/*! babel-runtime/core-js/array/from */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/array/from.js");

var _from2 = _interopRequireDefault(_from);

var _map = __webpack_require__(/*! babel-runtime/core-js/map */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/map.js");

var _map2 = _interopRequireDefault(_map);

var _promise = __webpack_require__(/*! babel-runtime/core-js/promise */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js");

var _promise2 = _interopRequireDefault(_promise);

var _set = __webpack_require__(/*! babel-runtime/core-js/set */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/set.js");

var _set2 = _interopRequireDefault(_set);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

var _sdpform = __webpack_require__(/*! ../../sdpform */ "./lib/sdpform/index.js");

var _sdpform2 = _interopRequireDefault(_sdpform);

var _Logger = __webpack_require__(/*! ../Logger */ "./lib/mslib/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

var _EnhancedEventEmitter2 = __webpack_require__(/*! ../EnhancedEventEmitter */ "./lib/mslib/EnhancedEventEmitter.js");

var _EnhancedEventEmitter3 = _interopRequireDefault(_EnhancedEventEmitter2);

var _utils = __webpack_require__(/*! ../utils */ "./lib/mslib/utils.js");

var utils = _interopRequireWildcard(_utils);

var _ortc = __webpack_require__(/*! ../ortc */ "./lib/mslib/ortc.js");

var ortc = _interopRequireWildcard(_ortc);

var _commonUtils = __webpack_require__(/*! ./sdp/commonUtils */ "./lib/mslib/handlers/sdp/commonUtils.js");

var sdpCommonUtils = _interopRequireWildcard(_commonUtils);

var _unifiedPlanUtils = __webpack_require__(/*! ./sdp/unifiedPlanUtils */ "./lib/mslib/handlers/sdp/unifiedPlanUtils.js");

var sdpUnifiedPlanUtils = _interopRequireWildcard(_unifiedPlanUtils);

var _RemoteUnifiedPlanSdp = __webpack_require__(/*! ./sdp/RemoteUnifiedPlanSdp */ "./lib/mslib/handlers/sdp/RemoteUnifiedPlanSdp.js");

var _RemoteUnifiedPlanSdp2 = _interopRequireDefault(_RemoteUnifiedPlanSdp);

var _bandwidthHandler = __webpack_require__(/*! ./sdp/bandwidthHandler */ "./lib/mslib/handlers/sdp/bandwidthHandler.js");

var _bandwidthHandler2 = _interopRequireDefault(_bandwidthHandler);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = new _Logger2.default('Safari12');

var Handler = function (_EnhancedEventEmitter) {
	(0, _inherits3.default)(Handler, _EnhancedEventEmitter);

	function Handler(direction, rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, Handler);

		// RTCPeerConnection instance.
		// @type {RTCPeerConnection}
		var _this = (0, _possibleConstructorReturn3.default)(this, (Handler.__proto__ || (0, _getPrototypeOf2.default)(Handler)).call(this, logger));

		_this._pc = new RTCPeerConnection({
			iceServers: settings.turnServers || [],
			iceTransportPolicy: settings.iceTransportPolicy,
			bundlePolicy: 'max-bundle',
			rtcpMuxPolicy: 'require'
		});

		// Generic sending RTP parameters for audio and video.
		// @type {Object}
		_this._rtpParametersByKind = rtpParametersByKind;

		// Remote SDP handler.
		// @type {RemoteUnifiedPlanSdp}
		_this._remoteSdp = new _RemoteUnifiedPlanSdp2.default(direction, rtpParametersByKind);

		// Handle RTCPeerConnection connection status.
		_this._pc.addEventListener('iceconnectionstatechange', function () {
			switch (_this._pc.iceConnectionState) {
				case 'checking':
					_this.emit('@connectionstatechange', 'connecting');
					break;
				case 'connected':
				case 'completed':
					_this.emit('@connectionstatechange', 'connected');
					break;
				case 'failed':
					_this.emit('@connectionstatechange', 'failed');
					break;
				case 'disconnected':
					_this.emit('@connectionstatechange', 'disconnected');
					break;
				case 'closed':
					_this.emit('@connectionstatechange', 'closed');
					break;
			}
		});
		return _this;
	}

	(0, _createClass3.default)(Handler, [{
		key: 'close',
		value: function close() {
			logger.debug('close()');

			// Close RTCPeerConnection.
			try {
				this._pc.close();
			} catch (error) {}
		}
	}, {
		key: 'remoteClosed',
		value: function remoteClosed() {
			logger.debug('remoteClosed()');

			this._transportReady = false;

			if (this._transportUpdated) this._transportUpdated = false;
		}
	}]);
	return Handler;
}(_EnhancedEventEmitter3.default);

var SendHandler = function (_Handler) {
	(0, _inherits3.default)(SendHandler, _Handler);

	function SendHandler(rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, SendHandler);

		// Got transport local and remote parameters.
		// @type {Boolean}
		var _this2 = (0, _possibleConstructorReturn3.default)(this, (SendHandler.__proto__ || (0, _getPrototypeOf2.default)(SendHandler)).call(this, 'send', rtpParametersByKind, settings));

		_this2._transportReady = false;

		// Ids of alive local tracks.
		// @type {Set<Number>}
		_this2._trackIds = new _set2.default();
		return _this2;
	}

	(0, _createClass3.default)(SendHandler, [{
		key: 'addProducer',
		value: function addProducer(producer) {
			var _this3 = this;

			var track = producer.track;


			logger.debug('addProducer() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			if (this._trackIds.has(track.id)) return _promise2.default.reject(new Error('track already added'));

			var transceiver = void 0;
			var localSdpObj = void 0;

			// Add the track id to the Set.
			this._trackIds.add(track.id);

			return _promise2.default.resolve().then(function () {
				// Let's check if there is any inactive transceiver for same kind and
				// reuse it if so.
				transceiver = _this3._pc.getTransceivers().find(function (t) {
					return t.receiver.track.kind === track.kind && t.direction === 'inactive';
				});

				if (transceiver) {
					logger.debug('addProducer() | reusing an inactive transceiver');

					transceiver.direction = 'sendonly';

					return transceiver.sender.replaceTrack(track);
				} else {
					transceiver = _this3._pc.addTransceiver(track, { direction: 'sendonly' });
				}
			}).then(function () {
				return _this3._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				// If simulcast is set, mangle the offer.
				if (producer.simulcast) {
					logger.debug('addProducer() | enabling simulcast');

					var sdpObject = _sdpform2.default.parse(offer.sdp);

					sdpUnifiedPlanUtils.addPlanBSimulcast(sdpObject, track, { mid: transceiver.mid });

					var offerSdp = _sdpform2.default.write(sdpObject);

					offer = { type: 'offer', sdp: offerSdp };
				}

				logger.debug('addProducer() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this3._pc.setLocalDescription(offer);
			}).then(function () {
				if (!_this3._transportReady) return _this3._setupTransport();
			}).then(function () {
				localSdpObj = _sdpform2.default.parse(_this3._pc.localDescription.sdp);

				var remoteSdp = _this3._remoteSdp.createAnswerSdp(localSdpObj);

				// for video bitrate - jove
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('addProducer() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this3._pc.setRemoteDescription(answer);
			}).then(function () {
				var rtpParameters = utils.clone(_this3._rtpParametersByKind[producer.kind]);

				sdpUnifiedPlanUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track, { mid: transceiver.mid, planBSimulcast: true });

				return rtpParameters;
			}).catch(function (error) {
				// Panic here. Try to undo things.

				try {
					transceiver.direction = 'inactive';
				} catch (error2) {}

				_this3._trackIds.delete(track.id);

				throw error;
			});
		}
	}, {
		key: 'removeProducer',
		value: function removeProducer(producer) {
			var _this4 = this;

			var track = producer.track;


			if (!this._trackIds.has(track.id)) return _promise2.default.reject(new Error('track not found'));

			logger.debug('removeProducer() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			return _promise2.default.resolve().then(function () {
				// Get the associated RTCRtpSender.
				var rtpSender = _this4._pc.getSenders().find(function (s) {
					return s.track === track;
				});

				if (!rtpSender) throw new Error('local track not found');

				_this4._pc.removeTrack(rtpSender);

				// Remove the track id from the Set.
				_this4._trackIds.delete(track.id);

				return _this4._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				logger.debug('removeProducer() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this4._pc.setLocalDescription(offer);
			}).then(function () {
				var localSdpObj = _sdpform2.default.parse(_this4._pc.localDescription.sdp);
				var remoteSdp = _this4._remoteSdp.createAnswerSdp(localSdpObj);

				// for video bitrate - jove
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('removeProducer() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this4._pc.setRemoteDescription(answer);
			});
		}
	}, {
		key: 'replaceProducerTrack',
		value: function replaceProducerTrack(producer, track) {
			var _this5 = this;

			logger.debug('replaceProducerTrack() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			var oldTrack = producer.track;

			return _promise2.default.resolve().then(function () {
				// Get the associated RTCRtpSender.
				var rtpSender = _this5._pc.getSenders().find(function (s) {
					return s.track === oldTrack;
				});

				if (!rtpSender) throw new Error('local track not found');

				return rtpSender.replaceTrack(track);
			}).then(function () {
				// Remove the old track id from the Set.
				_this5._trackIds.delete(oldTrack.id);

				// Add the new track id to the Set.
				_this5._trackIds.add(track.id);
			});
		}
	}, {
		key: 'restartIce',
		value: function restartIce(remoteIceParameters) {
			var _this6 = this;

			logger.debug('restartIce()');

			// Provide the remote SDP handler with new remote ICE parameters.
			this._remoteSdp.updateTransportRemoteIceParameters(remoteIceParameters);

			return _promise2.default.resolve().then(function () {
				return _this6._pc.createOffer({ iceRestart: true });
			}).then(function (offer) {
				logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this6._pc.setLocalDescription(offer);
			}).then(function () {
				var localSdpObj = _sdpform2.default.parse(_this6._pc.localDescription.sdp);
				var remoteSdp = _this6._remoteSdp.createAnswerSdp(localSdpObj);
				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this6._pc.setRemoteDescription(answer);
			});
		}
	}, {
		key: '_setupTransport',
		value: function _setupTransport() {
			var _this7 = this;

			logger.debug('_setupTransport()');

			return _promise2.default.resolve().then(function () {
				// Get our local DTLS parameters.
				var transportLocalParameters = {};
				var sdp = _this7._pc.localDescription.sdp;
				var sdpObj = _sdpform2.default.parse(sdp);
				var dtlsParameters = sdpCommonUtils.extractDtlsParameters(sdpObj);

				// Let's decide that we'll be DTLS server (because we can).
				dtlsParameters.role = 'server';

				transportLocalParameters.dtlsParameters = dtlsParameters;

				// Provide the remote SDP handler with transport local parameters.
				_this7._remoteSdp.setTransportLocalParameters(transportLocalParameters);

				// We need transport remote parameters.
				return _this7.safeEmitAsPromise('@needcreatetransport', transportLocalParameters);
			}).then(function (transportRemoteParameters) {
				// Provide the remote SDP handler with transport remote parameters.
				_this7._remoteSdp.setTransportRemoteParameters(transportRemoteParameters);

				_this7._transportReady = true;
			});
		}
	}, {
		key: 'getPCStats',
		value: function getPCStats(selector) {
			// logger.debug('getPCStats of send', selector);
			return this._pc.getStats(selector).then(function (stats) {
				return stats;
			}).catch(function (e) {
				throw e;
			});
		}
	}, {
		key: 'updateTrack',
		value: function updateTrack(producer, track) {
			var _this8 = this;

			logger.debug('update Track() [trackId:%s]', track.id);
			var localSdpObj; // Add the track id to the Set.
			var transceiver;

			return _promise2.default.resolve().then(function () {
				// Let's check if there is transceiver for same kind.
				// One production consists video or (and) audio track(s).
				transceiver = _this8._pc.getTransceivers().find(function (t) {
					return t.receiver.track.kind === track.kind;
				});
			}).then(function () {
				return _this8._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				// If simulcast is set, mangle the offer.
				// var offerSdp;
				if (producer.simulcast) {
					logger.debug('updateTrack() | enabling simulcast');

					var sdpObject = _sdpform2.default.parse(offer.sdp);

					sdpUnifiedPlanUtils.addPlanBSimulcast(sdpObject, track, {
						mid: transceiver.mid
					});

					var offerSdp = _sdpform2.default.write(sdpObject);

					offer = {
						type: 'offer',
						sdp: offerSdp
					};
				}

				logger.debug('updateTrack() | calling pc.setLocalDescription() [offer:%o]', offer);
				return _this8._pc.setLocalDescription(offer);
			}).then(function () {
				localSdpObj = _sdpform2.default.parse(_this8._pc.localDescription.sdp);

				var remoteSdp = _this8._remoteSdp.createAnswerSdp(localSdpObj);
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = {
					type: 'answer',
					sdp: remoteSdp
				};
				logger.debug('updateTrack() | calling pc.setRemoteDescription() [answer:%o]', answer);
				return _this8._pc.setRemoteDescription(answer);
			}).then(function () {
				var rtpParameters = utils.clone(_this8._rtpParametersByKind[producer.kind]);
				sdpUnifiedPlanUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track, {
					mid: transceiver.mid,
					planBSimulcast: true
				});
				return rtpParameters;
			}).catch(function (error) {
				// Panic here. Try to undo things.
				// failed at here and nothing to do.
				throw error;
			});
		}
	}]);
	return SendHandler;
}(Handler);

var RecvHandler = function (_Handler2) {
	(0, _inherits3.default)(RecvHandler, _Handler2);

	function RecvHandler(rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, RecvHandler);

		// Got transport remote parameters.
		// @type {Boolean}
		var _this9 = (0, _possibleConstructorReturn3.default)(this, (RecvHandler.__proto__ || (0, _getPrototypeOf2.default)(RecvHandler)).call(this, 'recv', rtpParametersByKind, settings));

		_this9._transportCreated = false;

		// Got transport local parameters.
		// @type {Boolean}
		_this9._transportUpdated = false;

		// Map of Consumers information indexed by consumer.id.
		// - mid {String}
		// - kind {String}
		// - closed {Boolean}
		// - trackId {String}
		// - ssrc {Number}
		// - rtxSsrc {Number}
		// - cname {String}
		// @type {Map<Number, Object>}
		_this9._consumerInfos = new _map2.default();
		return _this9;
	}

	(0, _createClass3.default)(RecvHandler, [{
		key: 'addConsumer',
		value: function addConsumer(consumer) {
			var _this10 = this;

			logger.debug('addConsumer() [id:%s, kind:%s]', consumer.id, consumer.kind);

			if (this._consumerInfos.has(consumer.id)) return _promise2.default.reject(new Error('Consumer already added'));

			var encoding = consumer.rtpParameters.encodings[0];
			var cname = consumer.rtpParameters.rtcp.cname;
			var consumerInfo = {
				mid: '' + consumer.kind[0] + consumer.id,
				kind: consumer.kind,
				closed: consumer.closed,
				streamId: 'recv-stream-' + consumer.id,
				trackId: 'consumer-' + consumer.kind + '-' + consumer.id,
				ssrc: encoding.ssrc,
				cname: cname
			};

			if (encoding.rtx && encoding.rtx.ssrc) consumerInfo.rtxSsrc = encoding.rtx.ssrc;

			this._consumerInfos.set(consumer.id, consumerInfo);

			return _promise2.default.resolve().then(function () {
				if (!_this10._transportCreated) return _this10._setupTransport();
			}).then(function () {
				var remoteSdp = _this10._remoteSdp.createOfferSdp((0, _from2.default)(_this10._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('addConsumer() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this10._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this10._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('addConsumer() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this10._pc.setLocalDescription(answer);
			}).then(function () {
				if (!_this10._transportUpdated) return _this10._updateTransport();
			}).then(function () {
				var transceiver = _this10._pc.getTransceivers().find(function (t) {
					return t.mid === consumerInfo.mid;
				});

				if (!transceiver) throw new Error('remote track not found');

				return transceiver.receiver.track;
			});
		}
	}, {
		key: 'removeConsumer',
		value: function removeConsumer(consumer) {
			var _this11 = this;

			logger.debug('removeConsumer() [id:%s, kind:%s]', consumer.id, consumer.kind);

			var consumerInfo = this._consumerInfos.get(consumer.id);

			if (!consumerInfo) return _promise2.default.reject(new Error('Consumer not found'));

			consumerInfo.closed = true;

			return _promise2.default.resolve().then(function () {
				var remoteSdp = _this11._remoteSdp.createOfferSdp((0, _from2.default)(_this11._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('removeConsumer() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this11._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this11._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('removeConsumer() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this11._pc.setLocalDescription(answer);
			});
		}
	}, {
		key: 'restartIce',
		value: function restartIce(remoteIceParameters) {
			var _this12 = this;

			logger.debug('restartIce()');

			// Provide the remote SDP handler with new remote ICE parameters.
			this._remoteSdp.updateTransportRemoteIceParameters(remoteIceParameters);

			return _promise2.default.resolve().then(function () {
				var remoteSdp = _this12._remoteSdp.createOfferSdp((0, _from2.default)(_this12._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this12._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this12._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this12._pc.setLocalDescription(answer);
			});
		}
	}, {
		key: '_setupTransport',
		value: function _setupTransport() {
			var _this13 = this;

			logger.debug('_setupTransport()');

			return _promise2.default.resolve().then(function () {
				// We need transport remote parameters.
				return _this13.safeEmitAsPromise('@needcreatetransport', null);
			}).then(function (transportRemoteParameters) {
				// Provide the remote SDP handler with transport remote parameters.
				_this13._remoteSdp.setTransportRemoteParameters(transportRemoteParameters);

				_this13._transportCreated = true;
			});
		}
	}, {
		key: '_updateTransport',
		value: function _updateTransport() {
			logger.debug('_updateTransport()');

			// Get our local DTLS parameters.
			var sdp = this._pc.localDescription.sdp;
			var sdpObj = _sdpform2.default.parse(sdp);
			var dtlsParameters = sdpCommonUtils.extractDtlsParameters(sdpObj);
			var transportLocalParameters = { dtlsParameters: dtlsParameters };

			// We need to provide transport local parameters.
			this.safeEmit('@needupdatetransport', transportLocalParameters);

			this._transportUpdated = true;
		}
	}, {
		key: 'getPCStats',
		value: function getPCStats(selector) {
			// logger.debug('getPCStats of recv', selector);
			return this._pc.getStats(selector).then(function (stats) {
				return stats;
			}).catch(function (e) {
				throw e;
			});
		}
	}]);
	return RecvHandler;
}(Handler);

var Safari12 = function () {
	(0, _createClass3.default)(Safari12, null, [{
		key: 'getNativeRtpCapabilities',
		value: function getNativeRtpCapabilities() {
			logger.debug('getNativeRtpCapabilities()');

			var pc = new RTCPeerConnection({
				iceServers: [],
				iceTransportPolicy: 'all',
				bundlePolicy: 'max-bundle',
				rtcpMuxPolicy: 'require'
			});

			pc.addTransceiver('audio');
			pc.addTransceiver('video');

			return pc.createOffer().then(function (offer) {
				try {
					pc.close();
				} catch (error) {}

				var sdpObj = _sdpform2.default.parse(offer.sdp);
				var nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities(sdpObj);

				return nativeRtpCapabilities;
			}).catch(function (error) {
				try {
					pc.close();
				} catch (error2) {}

				throw error;
			});
		}
	}, {
		key: 'tag',
		get: function get() {
			return 'Safari12';
		}
	}]);

	function Safari12(direction, extendedRtpCapabilities, settings) {
		(0, _classCallCheck3.default)(this, Safari12);

		logger.debug('constructor() [direction:%s, extendedRtpCapabilities:%o]', direction, extendedRtpCapabilities);

		var rtpParametersByKind = void 0;

		switch (direction) {
			case 'send':
				{
					rtpParametersByKind = {
						audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
						video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
					};

					return new SendHandler(rtpParametersByKind, settings);
				}
			case 'recv':
				{
					rtpParametersByKind = {
						audio: ortc.getReceivingFullRtpParameters('audio', extendedRtpCapabilities),
						video: ortc.getReceivingFullRtpParameters('video', extendedRtpCapabilities)
					};

					return new RecvHandler(rtpParametersByKind, settings);
				}
		}
	}

	return Safari12;
}();

exports.default = Safari12;

/***/ }),

/***/ "./lib/mslib/handlers/Safari13.js":
/*!****************************************!*\
  !*** ./lib/mslib/handlers/Safari13.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _from = __webpack_require__(/*! babel-runtime/core-js/array/from */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/array/from.js");

var _from2 = _interopRequireDefault(_from);

var _map = __webpack_require__(/*! babel-runtime/core-js/map */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/map.js");

var _map2 = _interopRequireDefault(_map);

var _promise = __webpack_require__(/*! babel-runtime/core-js/promise */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js");

var _promise2 = _interopRequireDefault(_promise);

var _set = __webpack_require__(/*! babel-runtime/core-js/set */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/set.js");

var _set2 = _interopRequireDefault(_set);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

var _sdpform = __webpack_require__(/*! ../../sdpform */ "./lib/sdpform/index.js");

var _sdpform2 = _interopRequireDefault(_sdpform);

var _Logger = __webpack_require__(/*! ../Logger */ "./lib/mslib/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

var _EnhancedEventEmitter2 = __webpack_require__(/*! ../EnhancedEventEmitter */ "./lib/mslib/EnhancedEventEmitter.js");

var _EnhancedEventEmitter3 = _interopRequireDefault(_EnhancedEventEmitter2);

var _utils = __webpack_require__(/*! ../utils */ "./lib/mslib/utils.js");

var utils = _interopRequireWildcard(_utils);

var _ortc = __webpack_require__(/*! ../ortc */ "./lib/mslib/ortc.js");

var ortc = _interopRequireWildcard(_ortc);

var _commonUtils = __webpack_require__(/*! ./sdp/commonUtils */ "./lib/mslib/handlers/sdp/commonUtils.js");

var sdpCommonUtils = _interopRequireWildcard(_commonUtils);

var _unifiedPlanUtils = __webpack_require__(/*! ./sdp/unifiedPlanUtils */ "./lib/mslib/handlers/sdp/unifiedPlanUtils.js");

var sdpUnifiedPlanUtils = _interopRequireWildcard(_unifiedPlanUtils);

var _RemoteUnifiedPlanSdp = __webpack_require__(/*! ./sdp/RemoteUnifiedPlanSdp */ "./lib/mslib/handlers/sdp/RemoteUnifiedPlanSdp.js");

var _RemoteUnifiedPlanSdp2 = _interopRequireDefault(_RemoteUnifiedPlanSdp);

var _bandwidthHandler = __webpack_require__(/*! ./sdp/bandwidthHandler */ "./lib/mslib/handlers/sdp/bandwidthHandler.js");

var _bandwidthHandler2 = _interopRequireDefault(_bandwidthHandler);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = new _Logger2.default('Safari13');

var Handler = function (_EnhancedEventEmitter) {
	(0, _inherits3.default)(Handler, _EnhancedEventEmitter);

	function Handler(direction, rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, Handler);

		// RTCPeerConnection instance.
		// @type {RTCPeerConnection}
		var _this = (0, _possibleConstructorReturn3.default)(this, (Handler.__proto__ || (0, _getPrototypeOf2.default)(Handler)).call(this, logger));

		_this._pc = new RTCPeerConnection({
			iceServers: settings.turnServers || [],
			iceTransportPolicy: settings.iceTransportPolicy,
			bundlePolicy: 'max-bundle',
			rtcpMuxPolicy: 'require'
		});

		// Generic sending RTP parameters for audio and video.
		// @type {Object}
		_this._rtpParametersByKind = rtpParametersByKind;

		// Remote SDP handler.
		// @type {RemoteUnifiedPlanSdp}
		_this._remoteSdp = new _RemoteUnifiedPlanSdp2.default(direction, rtpParametersByKind);

		// Handle RTCPeerConnection connection status.
		_this._pc.addEventListener('iceconnectionstatechange', function () {
			switch (_this._pc.iceConnectionState) {
				case 'checking':
					_this.emit('@connectionstatechange', 'connecting');
					break;
				case 'connected':
				case 'completed':
					_this.emit('@connectionstatechange', 'connected');
					break;
				case 'failed':
					_this.emit('@connectionstatechange', 'failed');
					break;
				case 'disconnected':
					_this.emit('@connectionstatechange', 'disconnected');
					break;
				case 'closed':
					_this.emit('@connectionstatechange', 'closed');
					break;
			}
		});
		return _this;
	}

	(0, _createClass3.default)(Handler, [{
		key: 'close',
		value: function close() {
			logger.debug('close()');

			// Close RTCPeerConnection.
			try {
				this._pc.close();
			} catch (error) {}
		}
	}, {
		key: 'remoteClosed',
		value: function remoteClosed() {
			logger.debug('remoteClosed()');

			this._transportReady = false;

			if (this._transportUpdated) this._transportUpdated = false;
		}
	}]);
	return Handler;
}(_EnhancedEventEmitter3.default);

var SendHandler = function (_Handler) {
	(0, _inherits3.default)(SendHandler, _Handler);

	function SendHandler(rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, SendHandler);

		// Got transport local and remote parameters.
		// @type {Boolean}
		var _this2 = (0, _possibleConstructorReturn3.default)(this, (SendHandler.__proto__ || (0, _getPrototypeOf2.default)(SendHandler)).call(this, 'send', rtpParametersByKind, settings));

		_this2._transportReady = false;

		// Ids of alive local tracks.
		// @type {Set<Number>}
		_this2._trackIds = new _set2.default();
		return _this2;
	}

	(0, _createClass3.default)(SendHandler, [{
		key: 'addProducer',
		value: function addProducer(producer) {
			var _this3 = this;

			var track = producer.track;


			logger.debug('addProducer() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			if (this._trackIds.has(track.id)) return _promise2.default.reject(new Error('track already added'));

			var transceiver = void 0;
			var localSdpObj = void 0;

			// Add the track id to the Set.
			this._trackIds.add(track.id);

			return _promise2.default.resolve().then(function () {
				// Let's check if there is any inactive transceiver for same kind and
				// reuse it if so.
				transceiver = _this3._pc.getTransceivers().find(function (t) {
					return t.receiver.track.kind === track.kind && t.direction === 'inactive';
				});

				if (transceiver) {
					logger.debug('addProducer() | reusing an inactive transceiver');

					transceiver.direction = 'sendonly';

					return transceiver.sender.replaceTrack(track);
				} else {
					transceiver = _this3._pc.addTransceiver(track, { direction: 'sendonly' });
				}
			}).then(function () {
				return _this3._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				// If simulcast is set, mangle the offer.
				if (producer.simulcast) {
					logger.debug('addProducer() | enabling simulcast');

					var sdpObject = _sdpform2.default.parse(offer.sdp);

					sdpUnifiedPlanUtils.addPlanBSimulcast(sdpObject, track, { mid: transceiver.mid });

					var offerSdp = _sdpform2.default.write(sdpObject);

					offer = { type: 'offer', sdp: offerSdp };
				}

				logger.debug('addProducer() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this3._pc.setLocalDescription(offer);
			}).then(function () {
				if (!_this3._transportReady) return _this3._setupTransport();
			}).then(function () {
				localSdpObj = _sdpform2.default.parse(_this3._pc.localDescription.sdp);

				var remoteSdp = _this3._remoteSdp.createAnswerSdp(localSdpObj);

				// for video bitrate - jove
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('addProducer() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this3._pc.setRemoteDescription(answer);
			}).then(function () {
				var rtpParameters = utils.clone(_this3._rtpParametersByKind[producer.kind]);

				sdpUnifiedPlanUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track, { mid: transceiver.mid, planBSimulcast: true });

				return rtpParameters;
			}).catch(function (error) {
				// Panic here. Try to undo things.

				try {
					transceiver.direction = 'inactive';
				} catch (error2) {}

				_this3._trackIds.delete(track.id);

				throw error;
			});
		}
	}, {
		key: 'removeProducer',
		value: function removeProducer(producer) {
			var _this4 = this;

			var track = producer.track;


			if (!this._trackIds.has(track.id)) return _promise2.default.reject(new Error('track not found'));

			logger.debug('removeProducer() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			return _promise2.default.resolve().then(function () {
				// Get the associated RTCRtpSender.
				var rtpSender = _this4._pc.getSenders().find(function (s) {
					return s.track === track;
				});

				if (!rtpSender) throw new Error('local track not found');

				_this4._pc.removeTrack(rtpSender);

				// Remove the track id from the Set.
				_this4._trackIds.delete(track.id);

				return _this4._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				logger.debug('removeProducer() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this4._pc.setLocalDescription(offer);
			}).then(function () {
				var localSdpObj = _sdpform2.default.parse(_this4._pc.localDescription.sdp);
				var remoteSdp = _this4._remoteSdp.createAnswerSdp(localSdpObj);

				// for video bitrate - jove
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('removeProducer() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this4._pc.setRemoteDescription(answer);
			});
		}
	}, {
		key: 'replaceProducerTrack',
		value: function replaceProducerTrack(producer, track) {
			var _this5 = this;

			logger.debug('replaceProducerTrack() [id:%s, kind:%s, trackId:%s]', producer.id, producer.kind, track.id);

			var oldTrack = producer.track;

			return _promise2.default.resolve().then(function () {
				// Get the associated RTCRtpSender.
				var rtpSender = _this5._pc.getSenders().find(function (s) {
					return s.track === oldTrack;
				});

				if (!rtpSender) throw new Error('local track not found');

				return rtpSender.replaceTrack(track);
			}).then(function () {
				// Remove the old track id from the Set.
				_this5._trackIds.delete(oldTrack.id);

				// Add the new track id to the Set.
				_this5._trackIds.add(track.id);
			});
		}
	}, {
		key: 'restartIce',
		value: function restartIce(remoteIceParameters) {
			var _this6 = this;

			logger.debug('restartIce()');

			// Provide the remote SDP handler with new remote ICE parameters.
			this._remoteSdp.updateTransportRemoteIceParameters(remoteIceParameters);

			return _promise2.default.resolve().then(function () {
				return _this6._pc.createOffer({ iceRestart: true });
			}).then(function (offer) {
				logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);

				return _this6._pc.setLocalDescription(offer);
			}).then(function () {
				var localSdpObj = _sdpform2.default.parse(_this6._pc.localDescription.sdp);
				var remoteSdp = _this6._remoteSdp.createAnswerSdp(localSdpObj);
				var answer = { type: 'answer', sdp: remoteSdp };

				logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);

				return _this6._pc.setRemoteDescription(answer);
			});
		}
	}, {
		key: '_setupTransport',
		value: function _setupTransport() {
			var _this7 = this;

			logger.debug('_setupTransport()');

			return _promise2.default.resolve().then(function () {
				// Get our local DTLS parameters.
				var transportLocalParameters = {};
				var sdp = _this7._pc.localDescription.sdp;
				var sdpObj = _sdpform2.default.parse(sdp);
				var dtlsParameters = sdpCommonUtils.extractDtlsParameters(sdpObj);

				// Let's decide that we'll be DTLS server (because we can).
				dtlsParameters.role = 'server';

				transportLocalParameters.dtlsParameters = dtlsParameters;

				// Provide the remote SDP handler with transport local parameters.
				_this7._remoteSdp.setTransportLocalParameters(transportLocalParameters);

				// We need transport remote parameters.
				return _this7.safeEmitAsPromise('@needcreatetransport', transportLocalParameters);
			}).then(function (transportRemoteParameters) {
				// Provide the remote SDP handler with transport remote parameters.
				_this7._remoteSdp.setTransportRemoteParameters(transportRemoteParameters);

				_this7._transportReady = true;
			});
		}
	}, {
		key: 'getPCStats',
		value: function getPCStats(selector) {
			// logger.debug('getPCStats of send', selector);
			return this._pc.getStats(selector).then(function (stats) {
				return stats;
			}).catch(function (e) {
				throw e;
			});
		}
	}, {
		key: 'updateTrack',
		value: function updateTrack(producer, track) {
			var _this8 = this;

			logger.debug('update Track() [trackId:%s]', track.id);
			var localSdpObj; // Add the track id to the Set.
			var transceiver;

			return _promise2.default.resolve().then(function () {
				// Let's check if there is transceiver for same kind.
				// One production consists video or (and) audio track(s).
				transceiver = _this8._pc.getTransceivers().find(function (t) {
					return t.receiver.track.kind === track.kind;
				});
			}).then(function () {
				return _this8._pc.createOffer();
			}).then(function (offer) {
				// for video bitrate - jove
				offer.sdp = _bandwidthHandler2.default.setVideoBitrates(offer.sdp, producer.videoBitrateOptions);

				// for opus profile - jove
				offer.sdp = _bandwidthHandler2.default.setOpusAttributes(offer.sdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					offer.sdp = _bandwidthHandler2.default.setSpecialAudioCodec(offer.sdp, producer.audioProfile.codec);
				}

				// If simulcast is set, mangle the offer.
				// var offerSdp;
				if (producer.simulcast) {
					logger.debug('updateTrack() | enabling simulcast');

					var sdpObject = _sdpform2.default.parse(offer.sdp);

					sdpUnifiedPlanUtils.addPlanBSimulcast(sdpObject, track, {
						mid: transceiver.mid
					});

					var offerSdp = _sdpform2.default.write(sdpObject);

					offer = {
						type: 'offer',
						sdp: offerSdp
					};
				}

				logger.debug('updateTrack() | calling pc.setLocalDescription() [offer:%o]', offer);
				return _this8._pc.setLocalDescription(offer);
			}).then(function () {
				localSdpObj = _sdpform2.default.parse(_this8._pc.localDescription.sdp);

				var remoteSdp = _this8._remoteSdp.createAnswerSdp(localSdpObj);
				remoteSdp = _bandwidthHandler2.default.setVideoBitrates(remoteSdp, producer.videoBitrateOptions);

				// for opus profile - jove
				remoteSdp = _bandwidthHandler2.default.setOpusAttributes(remoteSdp, producer.audioProfile);
				// 

				if (producer.audioProfile && producer.audioProfile.codec && producer.audioProfile.codec !== '') {
					remoteSdp = _bandwidthHandler2.default.setSpecialAudioCodec(remoteSdp, producer.audioProfile.codec);
				}

				var answer = {
					type: 'answer',
					sdp: remoteSdp
				};
				logger.debug('updateTrack() | calling pc.setRemoteDescription() [answer:%o]', answer);
				return _this8._pc.setRemoteDescription(answer);
			}).then(function () {
				var rtpParameters = utils.clone(_this8._rtpParametersByKind[producer.kind]);
				sdpUnifiedPlanUtils.fillRtpParametersForTrack(rtpParameters, localSdpObj, track, {
					mid: transceiver.mid,
					planBSimulcast: true
				});
				return rtpParameters;
			}).catch(function (error) {
				// Panic here. Try to undo things.
				// failed at here and nothing to do.
				throw error;
			});
		}
	}]);
	return SendHandler;
}(Handler);

var RecvHandler = function (_Handler2) {
	(0, _inherits3.default)(RecvHandler, _Handler2);

	function RecvHandler(rtpParametersByKind, settings) {
		(0, _classCallCheck3.default)(this, RecvHandler);

		// Got transport remote parameters.
		// @type {Boolean}
		var _this9 = (0, _possibleConstructorReturn3.default)(this, (RecvHandler.__proto__ || (0, _getPrototypeOf2.default)(RecvHandler)).call(this, 'recv', rtpParametersByKind, settings));

		_this9._transportCreated = false;

		// Got transport local parameters.
		// @type {Boolean}
		_this9._transportUpdated = false;

		// Map of Consumers information indexed by consumer.id.
		// - mid {String}
		// - kind {String}
		// - closed {Boolean}
		// - trackId {String}
		// - ssrc {Number}
		// - rtxSsrc {Number}
		// - cname {String}
		// @type {Map<Number, Object>}
		_this9._consumerInfos = new _map2.default();
		return _this9;
	}

	(0, _createClass3.default)(RecvHandler, [{
		key: 'addConsumer',
		value: function addConsumer(consumer) {
			var _this10 = this;

			logger.debug('addConsumer() [id:%s, kind:%s]', consumer.id, consumer.kind);

			if (this._consumerInfos.has(consumer.id)) return _promise2.default.reject(new Error('Consumer already added'));

			var encoding = consumer.rtpParameters.encodings[0];
			var cname = consumer.rtpParameters.rtcp.cname;
			var consumerInfo = {
				mid: '' + consumer.kind[0] + consumer.id,
				kind: consumer.kind,
				closed: consumer.closed,
				streamId: 'recv-stream-' + consumer.id,
				trackId: 'consumer-' + consumer.kind + '-' + consumer.id,
				ssrc: encoding.ssrc,
				cname: cname
			};

			if (encoding.rtx && encoding.rtx.ssrc) consumerInfo.rtxSsrc = encoding.rtx.ssrc;

			this._consumerInfos.set(consumer.id, consumerInfo);

			return _promise2.default.resolve().then(function () {
				if (!_this10._transportCreated) return _this10._setupTransport();
			}).then(function () {
				var remoteSdp = _this10._remoteSdp.createOfferSdp((0, _from2.default)(_this10._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('addConsumer() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this10._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this10._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('addConsumer() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this10._pc.setLocalDescription(answer);
			}).then(function () {
				if (!_this10._transportUpdated) return _this10._updateTransport();
			}).then(function () {
				var transceiver = _this10._pc.getTransceivers().find(function (t) {
					return t.mid === consumerInfo.mid;
				});

				if (!transceiver) throw new Error('remote track not found');

				return transceiver.receiver.track;
			});
		}
	}, {
		key: 'removeConsumer',
		value: function removeConsumer(consumer) {
			var _this11 = this;

			logger.debug('removeConsumer() [id:%s, kind:%s]', consumer.id, consumer.kind);

			var consumerInfo = this._consumerInfos.get(consumer.id);

			if (!consumerInfo) return _promise2.default.reject(new Error('Consumer not found'));

			consumerInfo.closed = true;

			return _promise2.default.resolve().then(function () {
				var remoteSdp = _this11._remoteSdp.createOfferSdp((0, _from2.default)(_this11._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('removeConsumer() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this11._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this11._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('removeConsumer() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this11._pc.setLocalDescription(answer);
			});
		}
	}, {
		key: 'restartIce',
		value: function restartIce(remoteIceParameters) {
			var _this12 = this;

			logger.debug('restartIce()');

			// Provide the remote SDP handler with new remote ICE parameters.
			this._remoteSdp.updateTransportRemoteIceParameters(remoteIceParameters);

			return _promise2.default.resolve().then(function () {
				var remoteSdp = _this12._remoteSdp.createOfferSdp((0, _from2.default)(_this12._consumerInfos.values()));
				var offer = { type: 'offer', sdp: remoteSdp };

				logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);

				return _this12._pc.setRemoteDescription(offer);
			}).then(function () {
				return _this12._pc.createAnswer();
			}).then(function (answer) {
				logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);

				return _this12._pc.setLocalDescription(answer);
			});
		}
	}, {
		key: '_setupTransport',
		value: function _setupTransport() {
			var _this13 = this;

			logger.debug('_setupTransport()');

			return _promise2.default.resolve().then(function () {
				// We need transport remote parameters.
				return _this13.safeEmitAsPromise('@needcreatetransport', null);
			}).then(function (transportRemoteParameters) {
				// Provide the remote SDP handler with transport remote parameters.
				_this13._remoteSdp.setTransportRemoteParameters(transportRemoteParameters);

				_this13._transportCreated = true;
			});
		}
	}, {
		key: '_updateTransport',
		value: function _updateTransport() {
			logger.debug('_updateTransport()');

			// Get our local DTLS parameters.
			var sdp = this._pc.localDescription.sdp;
			var sdpObj = _sdpform2.default.parse(sdp);
			var dtlsParameters = sdpCommonUtils.extractDtlsParameters(sdpObj);
			var transportLocalParameters = { dtlsParameters: dtlsParameters };

			// We need to provide transport local parameters.
			this.safeEmit('@needupdatetransport', transportLocalParameters);

			this._transportUpdated = true;
		}
	}, {
		key: 'getPCStats',
		value: function getPCStats(selector) {
			// logger.debug('getPCStats of send', selector);
			return this._pc.getStats(selector).then(function (stats) {
				return stats;
			}).catch(function (e) {
				throw e;
			});
		}
	}]);
	return RecvHandler;
}(Handler);

var Safari13 = function () {
	(0, _createClass3.default)(Safari13, null, [{
		key: 'getNativeRtpCapabilities',
		value: function getNativeRtpCapabilities() {
			logger.debug('getNativeRtpCapabilities()');

			var pc = new RTCPeerConnection({
				iceServers: [],
				iceTransportPolicy: 'all',
				bundlePolicy: 'max-bundle',
				rtcpMuxPolicy: 'require'
			});

			pc.addTransceiver('audio');
			pc.addTransceiver('video');

			return pc.createOffer().then(function (offer) {
				try {
					pc.close();
				} catch (error) {}

				var sdpObj = _sdpform2.default.parse(offer.sdp);
				var nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities(sdpObj);

				return nativeRtpCapabilities;
			}).catch(function (error) {
				try {
					pc.close();
				} catch (error2) {}

				throw error;
			});
		}
	}, {
		key: 'tag',
		get: function get() {
			return 'Safari13';
		}
	}]);

	function Safari13(direction, extendedRtpCapabilities, settings) {
		(0, _classCallCheck3.default)(this, Safari13);

		logger.debug('constructor() [direction:%s, extendedRtpCapabilities:%o]', direction, extendedRtpCapabilities);

		var rtpParametersByKind = void 0;

		switch (direction) {
			case 'send':
				{
					rtpParametersByKind = {
						audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
						video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
					};

					return new SendHandler(rtpParametersByKind, settings);
				}
			case 'recv':
				{
					rtpParametersByKind = {
						audio: ortc.getReceivingFullRtpParameters('audio', extendedRtpCapabilities),
						video: ortc.getReceivingFullRtpParameters('video', extendedRtpCapabilities)
					};

					return new RecvHandler(rtpParametersByKind, settings);
				}
		}
	}

	return Safari13;
}();

exports.default = Safari13;

/***/ }),

/***/ "./lib/mslib/handlers/ortc/edgeUtils.js":
/*!**********************************************!*\
  !*** ./lib/mslib/handlers/ortc/edgeUtils.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _getIterator2 = __webpack_require__(/*! babel-runtime/core-js/get-iterator */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/get-iterator.js");

var _getIterator3 = _interopRequireDefault(_getIterator2);

exports.getCapabilities = getCapabilities;
exports.mangleRtpParameters = mangleRtpParameters;

var _utils = __webpack_require__(/*! ../../utils */ "./lib/mslib/utils.js");

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Normalize Edge's RTCRtpReceiver.getCapabilities() to produce a full
 * compliant ORTC RTCRtpCapabilities.
 *
 * @return {RTCRtpCapabilities}
 */
function getCapabilities() {
	var nativeCaps = RTCRtpReceiver.getCapabilities();
	var caps = utils.clone(nativeCaps);

	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {
		for (var _iterator = (0, _getIterator3.default)(caps.codecs), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
			var codec = _step.value;

			// Rename numChannels to channels.
			codec.channels = codec.numChannels;
			delete codec.numChannels;

			// Normalize channels.
			if (codec.kind !== 'audio') delete codec.channels;else if (!codec.channels) codec.channels = 1;

			// Add mimeType.
			codec.mimeType = codec.kind + '/' + codec.name;

			// NOTE: Edge sets some numeric parameters as String rather than Number. Fix them.
			if (codec.parameters) {
				var parameters = codec.parameters;

				if (parameters.apt) parameters.apt = Number(parameters.apt);

				if (parameters['packetization-mode']) parameters['packetization-mode'] = Number(parameters['packetization-mode']);
			}

			// Delete emty parameter String in rtcpFeedback.
			var _iteratorNormalCompletion2 = true;
			var _didIteratorError2 = false;
			var _iteratorError2 = undefined;

			try {
				for (var _iterator2 = (0, _getIterator3.default)(codec.rtcpFeedback || []), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
					var feedback = _step2.value;

					if (!feedback.parameter) delete feedback.parameter;
				}
			} catch (err) {
				_didIteratorError2 = true;
				_iteratorError2 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion2 && _iterator2.return) {
						_iterator2.return();
					}
				} finally {
					if (_didIteratorError2) {
						throw _iteratorError2;
					}
				}
			}
		}
	} catch (err) {
		_didIteratorError = true;
		_iteratorError = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion && _iterator.return) {
				_iterator.return();
			}
		} finally {
			if (_didIteratorError) {
				throw _iteratorError;
			}
		}
	}

	return caps;
}

/**
 * Generate RTCRtpParameters as Edge like them.
 *
 * @param  {RTCRtpParameters} rtpParameters
 * @return {RTCRtpParameters}
 */
/* global RTCRtpReceiver */

function mangleRtpParameters(rtpParameters) {
	var params = utils.clone(rtpParameters);

	var _iteratorNormalCompletion3 = true;
	var _didIteratorError3 = false;
	var _iteratorError3 = undefined;

	try {
		for (var _iterator3 = (0, _getIterator3.default)(params.codecs), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
			var codec = _step3.value;

			// Rename channels to numChannels.
			if (codec.channels) {
				codec.numChannels = codec.channels;
				delete codec.channels;
			}

			// Remove mimeType.
			delete codec.mimeType;
		}
	} catch (err) {
		_didIteratorError3 = true;
		_iteratorError3 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion3 && _iterator3.return) {
				_iterator3.return();
			}
		} finally {
			if (_didIteratorError3) {
				throw _iteratorError3;
			}
		}
	}

	return params;
}

/***/ }),

/***/ "./lib/mslib/handlers/sdp/RemotePlainRtpSdp.js":
/*!*****************************************************!*\
  !*** ./lib/mslib/handlers/sdp/RemotePlainRtpSdp.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _keys = __webpack_require__(/*! babel-runtime/core-js/object/keys */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/keys.js");

var _keys2 = _interopRequireDefault(_keys);

var _getIterator2 = __webpack_require__(/*! babel-runtime/core-js/get-iterator */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/get-iterator.js");

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _sdpform = __webpack_require__(/*! ../../../sdpform */ "./lib/sdpform/index.js");

var _sdpform2 = _interopRequireDefault(_sdpform);

var _Logger = __webpack_require__(/*! ../../Logger */ "./lib/mslib/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

var _utils = __webpack_require__(/*! ../../utils */ "./lib/mslib/utils.js");

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = new _Logger2.default('RemotePlainRtpSdp');

var RemoteSdp = function () {
	function RemoteSdp(rtpParametersByKind) {
		(0, _classCallCheck3.default)(this, RemoteSdp);

		// Generic sending RTP parameters for audio and video.
		// @type {Object}
		this._rtpParametersByKind = rtpParametersByKind;

		// Transport local parameters, including plain RTP parameteres.
		// @type {Object}
		this._transportLocalParameters = null;

		// Transport remote parameters, including plain RTP parameters.
		// @type {Object}
		this._transportRemoteParameters = null;

		// SDP global fields.
		// @type {Object}
		this._sdpGlobalFields = {
			id: utils.randomNumber(),
			version: 0
		};
	}

	(0, _createClass3.default)(RemoteSdp, [{
		key: 'setTransportLocalParameters',
		value: function setTransportLocalParameters(transportLocalParameters) {
			logger.debug('setTransportLocalParameters() [transportLocalParameters:%o]', transportLocalParameters);

			this._transportLocalParameters = transportLocalParameters;
		}
	}, {
		key: 'setTransportRemoteParameters',
		value: function setTransportRemoteParameters(transportRemoteParameters) {
			logger.debug('setTransportRemoteParameters() [transportRemoteParameters:%o]', transportRemoteParameters);

			this._transportRemoteParameters = transportRemoteParameters;
		}
	}]);
	return RemoteSdp;
}();

var SendRemoteSdp = function (_RemoteSdp) {
	(0, _inherits3.default)(SendRemoteSdp, _RemoteSdp);

	function SendRemoteSdp(rtpParametersByKind) {
		(0, _classCallCheck3.default)(this, SendRemoteSdp);
		return (0, _possibleConstructorReturn3.default)(this, (SendRemoteSdp.__proto__ || (0, _getPrototypeOf2.default)(SendRemoteSdp)).call(this, rtpParametersByKind));
	}

	(0, _createClass3.default)(SendRemoteSdp, [{
		key: 'createAnswerSdp',
		value: function createAnswerSdp(localSdpObj) {
			logger.debug('createAnswerSdp()');

			if (!this._transportLocalParameters) throw new Error('no transport local parameters');else if (!this._transportRemoteParameters) throw new Error('no transport remote parameters');

			var remotePlainRtpParameters = this._transportRemoteParameters.plainRtpParameters;
			var sdpObj = {};
			var mids = (localSdpObj.media || []).filter(function (m) {
				return m.hasOwnProperty('mid');
			}).map(function (m) {
				return String(m.mid);
			});

			// Increase our SDP version.
			this._sdpGlobalFields.version++;

			sdpObj.version = 0;
			sdpObj.origin = {
				address: remotePlainRtpParameters.ip,
				ipVer: remotePlainRtpParameters.version,
				netType: 'IN',
				sessionId: this._sdpGlobalFields.id,
				sessionVersion: this._sdpGlobalFields.version,
				username: 'mediasoup-client'
			};
			sdpObj.name = '-';
			sdpObj.timing = { start: 0, stop: 0 };

			sdpObj.msidSemantic = {
				semantic: 'WMS',
				token: '*'
			};

			if (mids.length > 0) {
				sdpObj.groups = [{
					type: 'BUNDLE',
					mids: mids.join(' ')
				}];
			}

			sdpObj.media = [];

			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = (0, _getIterator3.default)(localSdpObj.media || []), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var localMediaObj = _step.value;

					var closed = localMediaObj.direction === 'inactive';
					var kind = localMediaObj.type;
					var codecs = this._rtpParametersByKind[kind].codecs;
					var headerExtensions = this._rtpParametersByKind[kind].headerExtensions;
					var remoteMediaObj = {};

					remoteMediaObj.type = localMediaObj.type;

					remoteMediaObj.port = remotePlainRtpParameters.port;
					remoteMediaObj.protocol = 'RTP/AVP';
					remoteMediaObj.connection = {
						ip: remotePlainRtpParameters.ip,
						version: remotePlainRtpParameters.version
					};
					remoteMediaObj.mid = localMediaObj.mid;

					switch (localMediaObj.direction) {
						case 'sendrecv':
						case 'sendonly':
							remoteMediaObj.direction = 'recvonly';
							break;
						case 'recvonly':
						case 'inactive':
							remoteMediaObj.direction = 'inactive';
							break;
					}

					remoteMediaObj.rtp = [];
					remoteMediaObj.rtcpFb = [];
					remoteMediaObj.fmtp = [];

					var _iteratorNormalCompletion2 = true;
					var _didIteratorError2 = false;
					var _iteratorError2 = undefined;

					try {
						for (var _iterator2 = (0, _getIterator3.default)(codecs), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
							var codec = _step2.value;

							var rtp = {
								payload: codec.payloadType,
								codec: codec.name,
								rate: codec.clockRate
							};

							if (codec.channels > 1) rtp.encoding = codec.channels;

							remoteMediaObj.rtp.push(rtp);

							if (codec.parameters) {
								var paramFmtp = {
									payload: codec.payloadType,
									config: ''
								};

								var _iteratorNormalCompletion5 = true;
								var _didIteratorError5 = false;
								var _iteratorError5 = undefined;

								try {
									for (var _iterator5 = (0, _getIterator3.default)((0, _keys2.default)(codec.parameters)), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
										var key = _step5.value;

										if (paramFmtp.config) paramFmtp.config += ';';

										paramFmtp.config += key + '=' + codec.parameters[key];
									}
								} catch (err) {
									_didIteratorError5 = true;
									_iteratorError5 = err;
								} finally {
									try {
										if (!_iteratorNormalCompletion5 && _iterator5.return) {
											_iterator5.return();
										}
									} finally {
										if (_didIteratorError5) {
											throw _iteratorError5;
										}
									}
								}

								if (paramFmtp.config) remoteMediaObj.fmtp.push(paramFmtp);
							}

							if (codec.rtcpFeedback) {
								var _iteratorNormalCompletion6 = true;
								var _didIteratorError6 = false;
								var _iteratorError6 = undefined;

								try {
									for (var _iterator6 = (0, _getIterator3.default)(codec.rtcpFeedback), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
										var fb = _step6.value;

										remoteMediaObj.rtcpFb.push({
											payload: codec.payloadType,
											type: fb.type,
											subtype: fb.parameter || ''
										});
									}
								} catch (err) {
									_didIteratorError6 = true;
									_iteratorError6 = err;
								} finally {
									try {
										if (!_iteratorNormalCompletion6 && _iterator6.return) {
											_iterator6.return();
										}
									} finally {
										if (_didIteratorError6) {
											throw _iteratorError6;
										}
									}
								}
							}
						}
					} catch (err) {
						_didIteratorError2 = true;
						_iteratorError2 = err;
					} finally {
						try {
							if (!_iteratorNormalCompletion2 && _iterator2.return) {
								_iterator2.return();
							}
						} finally {
							if (_didIteratorError2) {
								throw _iteratorError2;
							}
						}
					}

					remoteMediaObj.payloads = codecs.map(function (codec) {
						return codec.payloadType;
					}).join(' ');

					if (!closed) {
						remoteMediaObj.ext = [];

						var _loop = function _loop(ext) {
							// Don't add a header extension if not present in the offer.
							var matchedLocalExt = (localMediaObj.ext || []).find(function (localExt) {
								return localExt.uri === ext.uri;
							});

							if (!matchedLocalExt) return 'continue';

							remoteMediaObj.ext.push({
								uri: ext.uri,
								value: ext.id
							});
						};

						var _iteratorNormalCompletion3 = true;
						var _didIteratorError3 = false;
						var _iteratorError3 = undefined;

						try {
							for (var _iterator3 = (0, _getIterator3.default)(headerExtensions), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
								var ext = _step3.value;

								var _ret = _loop(ext);

								if (_ret === 'continue') continue;
							}
						} catch (err) {
							_didIteratorError3 = true;
							_iteratorError3 = err;
						} finally {
							try {
								if (!_iteratorNormalCompletion3 && _iterator3.return) {
									_iterator3.return();
								}
							} finally {
								if (_didIteratorError3) {
									throw _iteratorError3;
								}
							}
						}
					}

					// Simulcast.
					if (localMediaObj.simulcast_03) {
						// eslint-disable-next-line camelcase
						remoteMediaObj.simulcast_03 = {
							value: localMediaObj.simulcast_03.value.replace(/send/g, 'recv')
						};

						remoteMediaObj.rids = [];

						var _iteratorNormalCompletion4 = true;
						var _didIteratorError4 = false;
						var _iteratorError4 = undefined;

						try {
							for (var _iterator4 = (0, _getIterator3.default)(localMediaObj.rids || []), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
								var rid = _step4.value;

								if (rid.direction !== 'send') continue;

								remoteMediaObj.rids.push({
									id: rid.id,
									direction: 'recv'
								});
							}
						} catch (err) {
							_didIteratorError4 = true;
							_iteratorError4 = err;
						} finally {
							try {
								if (!_iteratorNormalCompletion4 && _iterator4.return) {
									_iterator4.return();
								}
							} finally {
								if (_didIteratorError4) {
									throw _iteratorError4;
								}
							}
						}
					}

					remoteMediaObj.rtcpMux = 'rtcp-mux';
					remoteMediaObj.rtcpRsize = 'rtcp-rsize';

					// Push it.
					sdpObj.media.push(remoteMediaObj);
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}

			var sdp = _sdpform2.default.write(sdpObj);

			return sdp;
		}
	}]);
	return SendRemoteSdp;
}(RemoteSdp);

var RecvRemoteSdp = function (_RemoteSdp2) {
	(0, _inherits3.default)(RecvRemoteSdp, _RemoteSdp2);

	function RecvRemoteSdp(rtpParametersByKind) {
		(0, _classCallCheck3.default)(this, RecvRemoteSdp);
		return (0, _possibleConstructorReturn3.default)(this, (RecvRemoteSdp.__proto__ || (0, _getPrototypeOf2.default)(RecvRemoteSdp)).call(this, rtpParametersByKind));
	}

	/**
  * @param {Array<Object>} consumerInfos - Consumer informations.
  * @return {String}
  */


	(0, _createClass3.default)(RecvRemoteSdp, [{
		key: 'createOfferSdp',
		value: function createOfferSdp(consumerInfos) {
			logger.debug('createOfferSdp()');

			if (!this._transportRemoteParameters) throw new Error('no transport remote parameters');

			var remotePlainRtpParameters = this._transportRemoteParameters.plainRtpParameters;
			var sdpObj = {};
			var mids = consumerInfos.map(function (info) {
				return String(info.mid);
			});

			// Increase our SDP version.
			this._sdpGlobalFields.version++;

			sdpObj.version = 0;
			sdpObj.origin = {
				address: remotePlainRtpParameters.ip,
				ipVer: remotePlainRtpParameters.version,
				netType: 'IN',
				sessionId: this._sdpGlobalFields.id,
				sessionVersion: this._sdpGlobalFields.version,
				username: 'mediasoup-client'
			};
			sdpObj.name = '-';
			sdpObj.timing = { start: 0, stop: 0 };

			sdpObj.msidSemantic = {
				semantic: 'WMS',
				token: '*'
			};

			if (mids.length > 0) {
				sdpObj.groups = [{
					type: 'BUNDLE',
					mids: mids.join(' ')
				}];
			}

			sdpObj.media = [];

			var _iteratorNormalCompletion7 = true;
			var _didIteratorError7 = false;
			var _iteratorError7 = undefined;

			try {
				for (var _iterator7 = (0, _getIterator3.default)(consumerInfos), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
					var info = _step7.value;

					var closed = info.closed;
					var kind = info.kind;
					var codecs = this._rtpParametersByKind[kind].codecs;
					var headerExtensions = this._rtpParametersByKind[kind].headerExtensions;
					var remoteMediaObj = {};

					remoteMediaObj.type = kind;
					remoteMediaObj.mid = info.mid;
					remoteMediaObj.msid = info.streamId + ' ' + info.trackId;
					remoteMediaObj.port = remotePlainRtpParameters.port;
					remoteMediaObj.protocol = 'RTP/AVP';
					remoteMediaObj.connection = {
						ip: remotePlainRtpParameters.ip,
						version: remotePlainRtpParameters.version
					};

					if (!closed) remoteMediaObj.direction = 'sendonly';else remoteMediaObj.direction = 'inactive';

					remoteMediaObj.rtp = [];
					remoteMediaObj.rtcpFb = [];
					remoteMediaObj.fmtp = [];

					var _iteratorNormalCompletion8 = true;
					var _didIteratorError8 = false;
					var _iteratorError8 = undefined;

					try {
						for (var _iterator8 = (0, _getIterator3.default)(codecs), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
							var codec = _step8.value;

							var rtp = {
								payload: codec.payloadType,
								codec: codec.name,
								rate: codec.clockRate
							};

							if (codec.channels > 1) rtp.encoding = codec.channels;

							remoteMediaObj.rtp.push(rtp);

							if (codec.parameters) {
								var paramFmtp = {
									payload: codec.payloadType,
									config: ''
								};

								var _iteratorNormalCompletion10 = true;
								var _didIteratorError10 = false;
								var _iteratorError10 = undefined;

								try {
									for (var _iterator10 = (0, _getIterator3.default)((0, _keys2.default)(codec.parameters)), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
										var key = _step10.value;

										if (paramFmtp.config) paramFmtp.config += ';';

										paramFmtp.config += key + '=' + codec.parameters[key];
									}
								} catch (err) {
									_didIteratorError10 = true;
									_iteratorError10 = err;
								} finally {
									try {
										if (!_iteratorNormalCompletion10 && _iterator10.return) {
											_iterator10.return();
										}
									} finally {
										if (_didIteratorError10) {
											throw _iteratorError10;
										}
									}
								}

								if (paramFmtp.config) remoteMediaObj.fmtp.push(paramFmtp);
							}

							if (codec.rtcpFeedback) {
								var _iteratorNormalCompletion11 = true;
								var _didIteratorError11 = false;
								var _iteratorError11 = undefined;

								try {
									for (var _iterator11 = (0, _getIterator3.default)(codec.rtcpFeedback), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
										var fb = _step11.value;

										remoteMediaObj.rtcpFb.push({
											payload: codec.payloadType,
											type: fb.type,
											subtype: fb.parameter || ''
										});
									}
								} catch (err) {
									_didIteratorError11 = true;
									_iteratorError11 = err;
								} finally {
									try {
										if (!_iteratorNormalCompletion11 && _iterator11.return) {
											_iterator11.return();
										}
									} finally {
										if (_didIteratorError11) {
											throw _iteratorError11;
										}
									}
								}
							}
						}
					} catch (err) {
						_didIteratorError8 = true;
						_iteratorError8 = err;
					} finally {
						try {
							if (!_iteratorNormalCompletion8 && _iterator8.return) {
								_iterator8.return();
							}
						} finally {
							if (_didIteratorError8) {
								throw _iteratorError8;
							}
						}
					}

					remoteMediaObj.payloads = codecs.map(function (codec) {
						return codec.payloadType;
					}).join(' ');

					if (!closed) {
						remoteMediaObj.ext = [];

						var _iteratorNormalCompletion9 = true;
						var _didIteratorError9 = false;
						var _iteratorError9 = undefined;

						try {
							for (var _iterator9 = (0, _getIterator3.default)(headerExtensions), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
								var ext = _step9.value;

								// Ignore MID RTP extension for receiving media.
								if (ext.uri === 'urn:ietf:params:rtp-hdrext:sdes:mid') continue;

								remoteMediaObj.ext.push({
									uri: ext.uri,
									value: ext.id
								});
							}
						} catch (err) {
							_didIteratorError9 = true;
							_iteratorError9 = err;
						} finally {
							try {
								if (!_iteratorNormalCompletion9 && _iterator9.return) {
									_iterator9.return();
								}
							} finally {
								if (_didIteratorError9) {
									throw _iteratorError9;
								}
							}
						}
					}

					remoteMediaObj.rtcpMux = 'rtcp-mux';
					remoteMediaObj.rtcpRsize = 'rtcp-rsize';

					if (!closed) {
						remoteMediaObj.ssrcs = [];
						remoteMediaObj.ssrcGroups = [];

						remoteMediaObj.ssrcs.push({
							id: info.ssrc,
							attribute: 'cname',
							value: info.cname
						});

						if (info.rtxSsrc) {
							remoteMediaObj.ssrcs.push({
								id: info.rtxSsrc,
								attribute: 'cname',
								value: info.cname
							});

							// Associate original and retransmission SSRC.
							remoteMediaObj.ssrcGroups.push({
								semantics: 'FID',
								ssrcs: info.ssrc + ' ' + info.rtxSsrc
							});
						}
					}

					// Push it.
					sdpObj.media.push(remoteMediaObj);
				}
			} catch (err) {
				_didIteratorError7 = true;
				_iteratorError7 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion7 && _iterator7.return) {
						_iterator7.return();
					}
				} finally {
					if (_didIteratorError7) {
						throw _iteratorError7;
					}
				}
			}

			var sdp = _sdpform2.default.write(sdpObj);

			return sdp;
		}
	}]);
	return RecvRemoteSdp;
}(RemoteSdp);

var RemotePlainRtpSdp = function RemotePlainRtpSdp(direction, rtpParametersByKind) {
	(0, _classCallCheck3.default)(this, RemotePlainRtpSdp);

	logger.debug('constructor() [direction:%s, rtpParametersByKind:%o]', direction, rtpParametersByKind);

	switch (direction) {
		case 'send':
			return new SendRemoteSdp(rtpParametersByKind);
		case 'recv':
			return new RecvRemoteSdp(rtpParametersByKind);
	}
};

exports.default = RemotePlainRtpSdp;

/***/ }),

/***/ "./lib/mslib/handlers/sdp/RemotePlanBSdp.js":
/*!**************************************************!*\
  !*** ./lib/mslib/handlers/sdp/RemotePlanBSdp.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _keys = __webpack_require__(/*! babel-runtime/core-js/object/keys */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/keys.js");

var _keys2 = _interopRequireDefault(_keys);

var _getIterator2 = __webpack_require__(/*! babel-runtime/core-js/get-iterator */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/get-iterator.js");

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _sdpform = __webpack_require__(/*! ../../../sdpform */ "./lib/sdpform/index.js");

var _sdpform2 = _interopRequireDefault(_sdpform);

var _Logger = __webpack_require__(/*! ../../Logger */ "./lib/mslib/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

var _utils = __webpack_require__(/*! ../../utils */ "./lib/mslib/utils.js");

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = new _Logger2.default('RemotePlanBSdp');

var RemoteSdp = function () {
	function RemoteSdp(rtpParametersByKind) {
		(0, _classCallCheck3.default)(this, RemoteSdp);

		// Generic sending RTP parameters for audio and video.
		// @type {Object}
		this._rtpParametersByKind = rtpParametersByKind;

		// Transport local parameters, including DTLS parameteres.
		// @type {Object}
		this._transportLocalParameters = null;

		// Transport remote parameters, including ICE parameters, ICE candidates
		// and DTLS parameteres.
		// @type {Object}
		this._transportRemoteParameters = null;

		// SDP global fields.
		// @type {Object}
		this._sdpGlobalFields = {
			id: utils.randomNumber(),
			version: 0
		};
	}

	(0, _createClass3.default)(RemoteSdp, [{
		key: 'setTransportLocalParameters',
		value: function setTransportLocalParameters(transportLocalParameters) {
			logger.debug('setTransportLocalParameters() [transportLocalParameters:%o]', transportLocalParameters);

			this._transportLocalParameters = transportLocalParameters;
		}
	}, {
		key: 'setTransportRemoteParameters',
		value: function setTransportRemoteParameters(transportRemoteParameters) {
			logger.debug('setTransportRemoteParameters() [transportRemoteParameters:%o]', transportRemoteParameters);

			this._transportRemoteParameters = transportRemoteParameters;
		}
	}, {
		key: 'updateTransportRemoteIceParameters',
		value: function updateTransportRemoteIceParameters(remoteIceParameters) {
			logger.debug('updateTransportRemoteIceParameters() [remoteIceParameters:%o]', remoteIceParameters);

			this._transportRemoteParameters.iceParameters = remoteIceParameters;
		}
	}]);
	return RemoteSdp;
}();

var SendRemoteSdp = function (_RemoteSdp) {
	(0, _inherits3.default)(SendRemoteSdp, _RemoteSdp);

	function SendRemoteSdp(rtpParametersByKind) {
		(0, _classCallCheck3.default)(this, SendRemoteSdp);
		return (0, _possibleConstructorReturn3.default)(this, (SendRemoteSdp.__proto__ || (0, _getPrototypeOf2.default)(SendRemoteSdp)).call(this, rtpParametersByKind));
	}

	(0, _createClass3.default)(SendRemoteSdp, [{
		key: 'createAnswerSdp',
		value: function createAnswerSdp(localSdpObj) {
			logger.debug('createAnswerSdp()');

			if (!this._transportLocalParameters) throw new Error('no transport local parameters');else if (!this._transportRemoteParameters) throw new Error('no transport remote parameters');

			var remoteIceParameters = this._transportRemoteParameters.iceParameters;
			var remoteIceCandidates = this._transportRemoteParameters.iceCandidates;
			var remoteDtlsParameters = this._transportRemoteParameters.dtlsParameters;
			var sdpObj = {};
			var mids = (localSdpObj.media || []).map(function (m) {
				return String(m.mid);
			});

			// Increase our SDP version.
			this._sdpGlobalFields.version++;

			sdpObj.version = 0;
			sdpObj.origin = {
				address: '0.0.0.0',
				ipVer: 4,
				netType: 'IN',
				sessionId: this._sdpGlobalFields.id,
				sessionVersion: this._sdpGlobalFields.version,
				username: 'mediasoup-client'
			};
			sdpObj.name = '-';
			sdpObj.timing = { start: 0, stop: 0 };
			sdpObj.icelite = remoteIceParameters.iceLite ? 'ice-lite' : null;
			sdpObj.msidSemantic = {
				semantic: 'WMS',
				token: '*'
			};
			sdpObj.groups = [{
				type: 'BUNDLE',
				mids: mids.join(' ')
			}];
			sdpObj.media = [];

			// NOTE: We take the latest fingerprint.
			var numFingerprints = remoteDtlsParameters.fingerprints.length;

			sdpObj.fingerprint = {
				type: remoteDtlsParameters.fingerprints[numFingerprints - 1].algorithm,
				hash: remoteDtlsParameters.fingerprints[numFingerprints - 1].value
			};

			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = (0, _getIterator3.default)(localSdpObj.media || []), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var localMediaObj = _step.value;

					var kind = localMediaObj.type;
					var codecs = this._rtpParametersByKind[kind].codecs;
					var headerExtensions = this._rtpParametersByKind[kind].headerExtensions;
					var remoteMediaObj = {};

					remoteMediaObj.type = localMediaObj.type;
					remoteMediaObj.port = 7;
					remoteMediaObj.protocol = 'RTP/SAVPF';
					remoteMediaObj.connection = { ip: '127.0.0.1', version: 4 };
					remoteMediaObj.mid = localMediaObj.mid;

					remoteMediaObj.iceUfrag = remoteIceParameters.usernameFragment;
					remoteMediaObj.icePwd = remoteIceParameters.password;
					remoteMediaObj.candidates = [];

					var _iteratorNormalCompletion2 = true;
					var _didIteratorError2 = false;
					var _iteratorError2 = undefined;

					try {
						for (var _iterator2 = (0, _getIterator3.default)(remoteIceCandidates), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
							var candidate = _step2.value;

							var candidateObj = {};

							// mediasoup does not support non rtcp-mux so candidates component is
							// always RTP (1).
							candidateObj.component = 1;
							candidateObj.foundation = candidate.foundation;
							candidateObj.ip = candidate.ip;
							candidateObj.port = candidate.port;
							candidateObj.priority = candidate.priority;
							candidateObj.transport = candidate.protocol;
							candidateObj.type = candidate.type;
							if (candidate.tcpType) candidateObj.tcptype = candidate.tcpType;

							remoteMediaObj.candidates.push(candidateObj);
						}
					} catch (err) {
						_didIteratorError2 = true;
						_iteratorError2 = err;
					} finally {
						try {
							if (!_iteratorNormalCompletion2 && _iterator2.return) {
								_iterator2.return();
							}
						} finally {
							if (_didIteratorError2) {
								throw _iteratorError2;
							}
						}
					}

					remoteMediaObj.endOfCandidates = 'end-of-candidates';

					// Announce support for ICE renomination.
					// https://tools.ietf.org/html/draft-thatcher-ice-renomination
					remoteMediaObj.iceOptions = 'renomination';

					switch (remoteDtlsParameters.role) {
						case 'client':
							remoteMediaObj.setup = 'active';
							break;
						case 'server':
							remoteMediaObj.setup = 'passive';
							break;
					}

					switch (localMediaObj.direction) {
						case 'sendrecv':
						case 'sendonly':
							remoteMediaObj.direction = 'recvonly';
							break;
						case 'recvonly':
						case 'inactive':
							remoteMediaObj.direction = 'inactive';
							break;
					}

					// If video, be ready for simulcast.
					if (kind === 'video') remoteMediaObj.xGoogleFlag = 'conference';

					remoteMediaObj.rtp = [];
					remoteMediaObj.rtcpFb = [];
					remoteMediaObj.fmtp = [];

					var _iteratorNormalCompletion3 = true;
					var _didIteratorError3 = false;
					var _iteratorError3 = undefined;

					try {
						for (var _iterator3 = (0, _getIterator3.default)(codecs), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
							var codec = _step3.value;

							var rtp = {
								payload: codec.payloadType,
								codec: codec.name,
								rate: codec.clockRate
							};

							if (codec.channels > 1) rtp.encoding = codec.channels;

							remoteMediaObj.rtp.push(rtp);

							if (codec.parameters) {
								var paramFmtp = {
									payload: codec.payloadType,
									config: ''
								};

								var _iteratorNormalCompletion5 = true;
								var _didIteratorError5 = false;
								var _iteratorError5 = undefined;

								try {
									for (var _iterator5 = (0, _getIterator3.default)((0, _keys2.default)(codec.parameters)), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
										var key = _step5.value;

										if (paramFmtp.config) paramFmtp.config += ';';

										paramFmtp.config += key + '=' + codec.parameters[key];
									}
								} catch (err) {
									_didIteratorError5 = true;
									_iteratorError5 = err;
								} finally {
									try {
										if (!_iteratorNormalCompletion5 && _iterator5.return) {
											_iterator5.return();
										}
									} finally {
										if (_didIteratorError5) {
											throw _iteratorError5;
										}
									}
								}

								if (paramFmtp.config) remoteMediaObj.fmtp.push(paramFmtp);
							}

							if (codec.rtcpFeedback) {
								var _iteratorNormalCompletion6 = true;
								var _didIteratorError6 = false;
								var _iteratorError6 = undefined;

								try {
									for (var _iterator6 = (0, _getIterator3.default)(codec.rtcpFeedback), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
										var fb = _step6.value;

										remoteMediaObj.rtcpFb.push({
											payload: codec.payloadType,
											type: fb.type,
											subtype: fb.parameter || ''
										});
									}
								} catch (err) {
									_didIteratorError6 = true;
									_iteratorError6 = err;
								} finally {
									try {
										if (!_iteratorNormalCompletion6 && _iterator6.return) {
											_iterator6.return();
										}
									} finally {
										if (_didIteratorError6) {
											throw _iteratorError6;
										}
									}
								}
							}
						}
					} catch (err) {
						_didIteratorError3 = true;
						_iteratorError3 = err;
					} finally {
						try {
							if (!_iteratorNormalCompletion3 && _iterator3.return) {
								_iterator3.return();
							}
						} finally {
							if (_didIteratorError3) {
								throw _iteratorError3;
							}
						}
					}

					remoteMediaObj.payloads = codecs.map(function (codec) {
						return codec.payloadType;
					}).join(' ');

					remoteMediaObj.ext = [];

					var _loop = function _loop(ext) {
						// Don't add a header extension if not present in the offer.
						var matchedLocalExt = (localMediaObj.ext || []).find(function (localExt) {
							return localExt.uri === ext.uri;
						});

						if (!matchedLocalExt) return 'continue';

						remoteMediaObj.ext.push({
							uri: ext.uri,
							value: ext.id
						});
					};

					var _iteratorNormalCompletion4 = true;
					var _didIteratorError4 = false;
					var _iteratorError4 = undefined;

					try {
						for (var _iterator4 = (0, _getIterator3.default)(headerExtensions), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
							var ext = _step4.value;

							var _ret = _loop(ext);

							if (_ret === 'continue') continue;
						}
					} catch (err) {
						_didIteratorError4 = true;
						_iteratorError4 = err;
					} finally {
						try {
							if (!_iteratorNormalCompletion4 && _iterator4.return) {
								_iterator4.return();
							}
						} finally {
							if (_didIteratorError4) {
								throw _iteratorError4;
							}
						}
					}

					remoteMediaObj.rtcpMux = 'rtcp-mux';
					remoteMediaObj.rtcpRsize = 'rtcp-rsize';

					// Push it.
					sdpObj.media.push(remoteMediaObj);
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}

			var sdp = _sdpform2.default.write(sdpObj);

			return sdp;
		}
	}]);
	return SendRemoteSdp;
}(RemoteSdp);

var RecvRemoteSdp = function (_RemoteSdp2) {
	(0, _inherits3.default)(RecvRemoteSdp, _RemoteSdp2);

	function RecvRemoteSdp(rtpParametersByKind) {
		(0, _classCallCheck3.default)(this, RecvRemoteSdp);
		return (0, _possibleConstructorReturn3.default)(this, (RecvRemoteSdp.__proto__ || (0, _getPrototypeOf2.default)(RecvRemoteSdp)).call(this, rtpParametersByKind));
	}

	/**
  * @param {Array<String>} kinds - Media kinds.
  * @param {Array<Object>} consumerInfos - Consumer informations.
  * @return {String}
  */


	(0, _createClass3.default)(RecvRemoteSdp, [{
		key: 'createOfferSdp',
		value: function createOfferSdp(kinds, consumerInfos) {
			var _this3 = this;

			logger.debug('createOfferSdp()');

			if (!this._transportRemoteParameters) throw new Error('no transport remote parameters');

			var remoteIceParameters = this._transportRemoteParameters.iceParameters;
			var remoteIceCandidates = this._transportRemoteParameters.iceCandidates;
			var remoteDtlsParameters = this._transportRemoteParameters.dtlsParameters;
			var sdpObj = {};
			var mids = kinds;

			// Increase our SDP version.
			this._sdpGlobalFields.version++;

			sdpObj.version = 0;
			sdpObj.origin = {
				address: '0.0.0.0',
				ipVer: 4,
				netType: 'IN',
				sessionId: this._sdpGlobalFields.id,
				sessionVersion: this._sdpGlobalFields.version,
				username: 'mediasoup-client'
			};
			sdpObj.name = '-';
			sdpObj.timing = { start: 0, stop: 0 };
			sdpObj.icelite = remoteIceParameters.iceLite ? 'ice-lite' : null;
			sdpObj.msidSemantic = {
				semantic: 'WMS',
				token: '*'
			};
			sdpObj.groups = [{
				type: 'BUNDLE',
				mids: mids.join(' ')
			}];
			sdpObj.media = [];

			// NOTE: We take the latest fingerprint.
			var numFingerprints = remoteDtlsParameters.fingerprints.length;

			sdpObj.fingerprint = {
				type: remoteDtlsParameters.fingerprints[numFingerprints - 1].algorithm,
				hash: remoteDtlsParameters.fingerprints[numFingerprints - 1].value
			};

			var _loop2 = function _loop2(kind) {
				var codecs = _this3._rtpParametersByKind[kind].codecs;
				var headerExtensions = _this3._rtpParametersByKind[kind].headerExtensions;
				var remoteMediaObj = {};

				remoteMediaObj.type = kind;
				remoteMediaObj.port = 7;
				remoteMediaObj.protocol = 'RTP/SAVPF';
				remoteMediaObj.connection = { ip: '127.0.0.1', version: 4 };
				remoteMediaObj.mid = kind;

				remoteMediaObj.iceUfrag = remoteIceParameters.usernameFragment;
				remoteMediaObj.icePwd = remoteIceParameters.password;
				remoteMediaObj.candidates = [];

				var _iteratorNormalCompletion8 = true;
				var _didIteratorError8 = false;
				var _iteratorError8 = undefined;

				try {
					for (var _iterator8 = (0, _getIterator3.default)(remoteIceCandidates), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
						var candidate = _step8.value;

						var candidateObj = {};

						// mediasoup does not support non rtcp-mux so candidates component is
						// always RTP (1).
						candidateObj.component = 1;
						candidateObj.foundation = candidate.foundation;
						candidateObj.ip = candidate.ip;
						candidateObj.port = candidate.port;
						candidateObj.priority = candidate.priority;
						candidateObj.transport = candidate.protocol;
						candidateObj.type = candidate.type;
						if (candidate.tcpType) candidateObj.tcptype = candidate.tcpType;

						remoteMediaObj.candidates.push(candidateObj);
					}
				} catch (err) {
					_didIteratorError8 = true;
					_iteratorError8 = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion8 && _iterator8.return) {
							_iterator8.return();
						}
					} finally {
						if (_didIteratorError8) {
							throw _iteratorError8;
						}
					}
				}

				remoteMediaObj.endOfCandidates = 'end-of-candidates';

				// Announce support for ICE renomination.
				// https://tools.ietf.org/html/draft-thatcher-ice-renomination
				remoteMediaObj.iceOptions = 'renomination';

				remoteMediaObj.setup = 'actpass';

				if (consumerInfos.some(function (info) {
					return info.kind === kind;
				})) remoteMediaObj.direction = 'sendonly';else remoteMediaObj.direction = 'inactive';

				remoteMediaObj.rtp = [];
				remoteMediaObj.rtcpFb = [];
				remoteMediaObj.fmtp = [];

				var _iteratorNormalCompletion9 = true;
				var _didIteratorError9 = false;
				var _iteratorError9 = undefined;

				try {
					for (var _iterator9 = (0, _getIterator3.default)(codecs), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
						var codec = _step9.value;

						var rtp = {
							payload: codec.payloadType,
							codec: codec.name,
							rate: codec.clockRate
						};

						if (codec.channels > 1) rtp.encoding = codec.channels;

						remoteMediaObj.rtp.push(rtp);

						if (codec.parameters) {
							var paramFmtp = {
								payload: codec.payloadType,
								config: ''
							};

							var _iteratorNormalCompletion12 = true;
							var _didIteratorError12 = false;
							var _iteratorError12 = undefined;

							try {
								for (var _iterator12 = (0, _getIterator3.default)((0, _keys2.default)(codec.parameters)), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
									var key = _step12.value;

									if (paramFmtp.config) paramFmtp.config += ';';

									paramFmtp.config += key + '=' + codec.parameters[key];
								}
							} catch (err) {
								_didIteratorError12 = true;
								_iteratorError12 = err;
							} finally {
								try {
									if (!_iteratorNormalCompletion12 && _iterator12.return) {
										_iterator12.return();
									}
								} finally {
									if (_didIteratorError12) {
										throw _iteratorError12;
									}
								}
							}

							if (paramFmtp.config) remoteMediaObj.fmtp.push(paramFmtp);
						}

						if (codec.rtcpFeedback) {
							var _iteratorNormalCompletion13 = true;
							var _didIteratorError13 = false;
							var _iteratorError13 = undefined;

							try {
								for (var _iterator13 = (0, _getIterator3.default)(codec.rtcpFeedback), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
									var fb = _step13.value;

									remoteMediaObj.rtcpFb.push({
										payload: codec.payloadType,
										type: fb.type,
										subtype: fb.parameter || ''
									});
								}
							} catch (err) {
								_didIteratorError13 = true;
								_iteratorError13 = err;
							} finally {
								try {
									if (!_iteratorNormalCompletion13 && _iterator13.return) {
										_iterator13.return();
									}
								} finally {
									if (_didIteratorError13) {
										throw _iteratorError13;
									}
								}
							}
						}
					}
				} catch (err) {
					_didIteratorError9 = true;
					_iteratorError9 = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion9 && _iterator9.return) {
							_iterator9.return();
						}
					} finally {
						if (_didIteratorError9) {
							throw _iteratorError9;
						}
					}
				}

				remoteMediaObj.payloads = codecs.map(function (codec) {
					return codec.payloadType;
				}).join(' ');

				remoteMediaObj.ext = [];

				var _iteratorNormalCompletion10 = true;
				var _didIteratorError10 = false;
				var _iteratorError10 = undefined;

				try {
					for (var _iterator10 = (0, _getIterator3.default)(headerExtensions), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
						var ext = _step10.value;

						// Ignore MID RTP extension for receiving media.
						if (ext.uri === 'urn:ietf:params:rtp-hdrext:sdes:mid') continue;

						remoteMediaObj.ext.push({
							uri: ext.uri,
							value: ext.id
						});
					}
				} catch (err) {
					_didIteratorError10 = true;
					_iteratorError10 = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion10 && _iterator10.return) {
							_iterator10.return();
						}
					} finally {
						if (_didIteratorError10) {
							throw _iteratorError10;
						}
					}
				}

				remoteMediaObj.rtcpMux = 'rtcp-mux';
				remoteMediaObj.rtcpRsize = 'rtcp-rsize';

				remoteMediaObj.ssrcs = [];
				remoteMediaObj.ssrcGroups = [];

				var _iteratorNormalCompletion11 = true;
				var _didIteratorError11 = false;
				var _iteratorError11 = undefined;

				try {
					for (var _iterator11 = (0, _getIterator3.default)(consumerInfos), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
						var info = _step11.value;

						if (info.kind !== kind) continue;

						remoteMediaObj.ssrcs.push({
							id: info.ssrc,
							attribute: 'msid',
							value: info.streamId + ' ' + info.trackId
						});

						remoteMediaObj.ssrcs.push({
							id: info.ssrc,
							attribute: 'mslabel',
							value: info.streamId
						});

						remoteMediaObj.ssrcs.push({
							id: info.ssrc,
							attribute: 'label',
							value: info.trackId
						});

						remoteMediaObj.ssrcs.push({
							id: info.ssrc,
							attribute: 'cname',
							value: info.cname
						});

						if (info.rtxSsrc) {
							remoteMediaObj.ssrcs.push({
								id: info.rtxSsrc,
								attribute: 'msid',
								value: info.streamId + ' ' + info.trackId
							});

							remoteMediaObj.ssrcs.push({
								id: info.rtxSsrc,
								attribute: 'mslabel',
								value: info.streamId
							});

							remoteMediaObj.ssrcs.push({
								id: info.rtxSsrc,
								attribute: 'label',
								value: info.trackId
							});

							remoteMediaObj.ssrcs.push({
								id: info.rtxSsrc,
								attribute: 'cname',
								value: info.cname
							});

							// Associate original and retransmission SSRC.
							remoteMediaObj.ssrcGroups.push({
								semantics: 'FID',
								ssrcs: info.ssrc + ' ' + info.rtxSsrc
							});
						}
					}

					// Push it.
				} catch (err) {
					_didIteratorError11 = true;
					_iteratorError11 = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion11 && _iterator11.return) {
							_iterator11.return();
						}
					} finally {
						if (_didIteratorError11) {
							throw _iteratorError11;
						}
					}
				}

				sdpObj.media.push(remoteMediaObj);
			};

			var _iteratorNormalCompletion7 = true;
			var _didIteratorError7 = false;
			var _iteratorError7 = undefined;

			try {
				for (var _iterator7 = (0, _getIterator3.default)(kinds), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
					var kind = _step7.value;

					_loop2(kind);
				}
			} catch (err) {
				_didIteratorError7 = true;
				_iteratorError7 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion7 && _iterator7.return) {
						_iterator7.return();
					}
				} finally {
					if (_didIteratorError7) {
						throw _iteratorError7;
					}
				}
			}

			var sdp = _sdpform2.default.write(sdpObj);

			return sdp;
		}
	}]);
	return RecvRemoteSdp;
}(RemoteSdp);

var RemotePlanBSdp = function RemotePlanBSdp(direction, rtpParametersByKind) {
	(0, _classCallCheck3.default)(this, RemotePlanBSdp);

	logger.debug('constructor() [direction:%s, rtpParametersByKind:%o]', direction, rtpParametersByKind);

	switch (direction) {
		case 'send':
			return new SendRemoteSdp(rtpParametersByKind);
		case 'recv':
			return new RecvRemoteSdp(rtpParametersByKind);
	}
};

exports.default = RemotePlanBSdp;

/***/ }),

/***/ "./lib/mslib/handlers/sdp/RemoteUnifiedPlanSdp.js":
/*!********************************************************!*\
  !*** ./lib/mslib/handlers/sdp/RemoteUnifiedPlanSdp.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _keys = __webpack_require__(/*! babel-runtime/core-js/object/keys */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/keys.js");

var _keys2 = _interopRequireDefault(_keys);

var _getIterator2 = __webpack_require__(/*! babel-runtime/core-js/get-iterator */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/get-iterator.js");

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _sdpform = __webpack_require__(/*! ../../../sdpform */ "./lib/sdpform/index.js");

var _sdpform2 = _interopRequireDefault(_sdpform);

var _Logger = __webpack_require__(/*! ../../Logger */ "./lib/mslib/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

var _utils = __webpack_require__(/*! ../../utils */ "./lib/mslib/utils.js");

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = new _Logger2.default('RemoteUnifiedPlanSdp');

var RemoteSdp = function () {
	function RemoteSdp(rtpParametersByKind) {
		(0, _classCallCheck3.default)(this, RemoteSdp);

		// Generic sending RTP parameters for audio and video.
		// @type {Object}
		this._rtpParametersByKind = rtpParametersByKind;

		// Transport local parameters, including DTLS parameteres.
		// @type {Object}
		this._transportLocalParameters = null;

		// Transport remote parameters, including ICE parameters, ICE candidates
		// and DTLS parameteres.
		// @type {Object}
		this._transportRemoteParameters = null;

		// SDP global fields.
		// @type {Object}
		this._sdpGlobalFields = {
			id: utils.randomNumber(),
			version: 0
		};
	}

	(0, _createClass3.default)(RemoteSdp, [{
		key: 'setTransportLocalParameters',
		value: function setTransportLocalParameters(transportLocalParameters) {
			logger.debug('setTransportLocalParameters() [transportLocalParameters:%o]', transportLocalParameters);

			this._transportLocalParameters = transportLocalParameters;
		}
	}, {
		key: 'setTransportRemoteParameters',
		value: function setTransportRemoteParameters(transportRemoteParameters) {
			logger.debug('setTransportRemoteParameters() [transportRemoteParameters:%o]', transportRemoteParameters);

			this._transportRemoteParameters = transportRemoteParameters;
		}
	}, {
		key: 'updateTransportRemoteIceParameters',
		value: function updateTransportRemoteIceParameters(remoteIceParameters) {
			logger.debug('updateTransportRemoteIceParameters() [remoteIceParameters:%o]', remoteIceParameters);

			this._transportRemoteParameters.iceParameters = remoteIceParameters;
		}
	}]);
	return RemoteSdp;
}();

var SendRemoteSdp = function (_RemoteSdp) {
	(0, _inherits3.default)(SendRemoteSdp, _RemoteSdp);

	function SendRemoteSdp(rtpParametersByKind) {
		(0, _classCallCheck3.default)(this, SendRemoteSdp);
		return (0, _possibleConstructorReturn3.default)(this, (SendRemoteSdp.__proto__ || (0, _getPrototypeOf2.default)(SendRemoteSdp)).call(this, rtpParametersByKind));
	}

	(0, _createClass3.default)(SendRemoteSdp, [{
		key: 'createAnswerSdp',
		value: function createAnswerSdp(localSdpObj) {
			logger.debug('createAnswerSdp()');

			if (!this._transportLocalParameters) throw new Error('no transport local parameters');else if (!this._transportRemoteParameters) throw new Error('no transport remote parameters');

			var remoteIceParameters = this._transportRemoteParameters.iceParameters;
			var remoteIceCandidates = this._transportRemoteParameters.iceCandidates;
			var remoteDtlsParameters = this._transportRemoteParameters.dtlsParameters;
			var sdpObj = {};
			var bundleMids = (localSdpObj.media || []).filter(function (m) {
				return m.hasOwnProperty('mid');
			}).map(function (m) {
				return String(m.mid);
			});

			// Increase our SDP version.
			this._sdpGlobalFields.version++;

			sdpObj.version = 0;
			sdpObj.origin = {
				address: '0.0.0.0',
				ipVer: 4,
				netType: 'IN',
				sessionId: this._sdpGlobalFields.id,
				sessionVersion: this._sdpGlobalFields.version,
				username: 'mediasoup-client'
			};
			sdpObj.name = '-';
			sdpObj.timing = { start: 0, stop: 0 };
			sdpObj.icelite = remoteIceParameters.iceLite ? 'ice-lite' : null;
			sdpObj.msidSemantic = {
				semantic: 'WMS',
				token: '*'
			};

			if (bundleMids.length > 0) {
				sdpObj.groups = [{
					type: 'BUNDLE',
					mids: bundleMids.join(' ')
				}];
			}

			sdpObj.media = [];

			// NOTE: We take the latest fingerprint.
			var numFingerprints = remoteDtlsParameters.fingerprints.length;

			sdpObj.fingerprint = {
				type: remoteDtlsParameters.fingerprints[numFingerprints - 1].algorithm,
				hash: remoteDtlsParameters.fingerprints[numFingerprints - 1].value
			};

			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = (0, _getIterator3.default)(localSdpObj.media || []), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var localMediaObj = _step.value;

					var closed = localMediaObj.direction === 'inactive';
					var kind = localMediaObj.type;
					var codecs = this._rtpParametersByKind[kind].codecs;
					var headerExtensions = this._rtpParametersByKind[kind].headerExtensions;
					var remoteMediaObj = {};

					remoteMediaObj.type = localMediaObj.type;
					remoteMediaObj.port = 7;
					remoteMediaObj.protocol = 'RTP/SAVPF';
					remoteMediaObj.connection = { ip: '127.0.0.1', version: 4 };
					remoteMediaObj.mid = localMediaObj.mid;

					remoteMediaObj.iceUfrag = remoteIceParameters.usernameFragment;
					remoteMediaObj.icePwd = remoteIceParameters.password;
					remoteMediaObj.candidates = [];

					var _iteratorNormalCompletion2 = true;
					var _didIteratorError2 = false;
					var _iteratorError2 = undefined;

					try {
						for (var _iterator2 = (0, _getIterator3.default)(remoteIceCandidates), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
							var candidate = _step2.value;

							var candidateObj = {};

							// mediasoup does not support non rtcp-mux so candidates component is
							// always RTP (1).
							candidateObj.component = 1;
							candidateObj.foundation = candidate.foundation;
							candidateObj.ip = candidate.ip;
							candidateObj.port = candidate.port;
							candidateObj.priority = candidate.priority;
							candidateObj.transport = candidate.protocol;
							candidateObj.type = candidate.type;
							if (candidate.tcpType) candidateObj.tcptype = candidate.tcpType;

							remoteMediaObj.candidates.push(candidateObj);
						}
					} catch (err) {
						_didIteratorError2 = true;
						_iteratorError2 = err;
					} finally {
						try {
							if (!_iteratorNormalCompletion2 && _iterator2.return) {
								_iterator2.return();
							}
						} finally {
							if (_didIteratorError2) {
								throw _iteratorError2;
							}
						}
					}

					remoteMediaObj.endOfCandidates = 'end-of-candidates';

					// Announce support for ICE renomination.
					// https://tools.ietf.org/html/draft-thatcher-ice-renomination
					remoteMediaObj.iceOptions = 'renomination';

					switch (remoteDtlsParameters.role) {
						case 'client':
							remoteMediaObj.setup = 'active';
							break;
						case 'server':
							remoteMediaObj.setup = 'passive';
							break;
					}

					switch (localMediaObj.direction) {
						case 'sendrecv':
						case 'sendonly':
							remoteMediaObj.direction = 'recvonly';
							break;
						case 'recvonly':
						case 'inactive':
							remoteMediaObj.direction = 'inactive';
							break;
					}

					remoteMediaObj.rtp = [];
					remoteMediaObj.rtcpFb = [];
					remoteMediaObj.fmtp = [];

					var _iteratorNormalCompletion3 = true;
					var _didIteratorError3 = false;
					var _iteratorError3 = undefined;

					try {
						for (var _iterator3 = (0, _getIterator3.default)(codecs), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
							var codec = _step3.value;

							var rtp = {
								payload: codec.payloadType,
								codec: codec.name,
								rate: codec.clockRate
							};

							if (codec.channels > 1) rtp.encoding = codec.channels;

							remoteMediaObj.rtp.push(rtp);

							if (codec.parameters) {
								var paramFmtp = {
									payload: codec.payloadType,
									config: ''
								};

								var _iteratorNormalCompletion6 = true;
								var _didIteratorError6 = false;
								var _iteratorError6 = undefined;

								try {
									for (var _iterator6 = (0, _getIterator3.default)((0, _keys2.default)(codec.parameters)), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
										var key = _step6.value;

										if (paramFmtp.config) paramFmtp.config += ';';

										paramFmtp.config += key + '=' + codec.parameters[key];
									}
								} catch (err) {
									_didIteratorError6 = true;
									_iteratorError6 = err;
								} finally {
									try {
										if (!_iteratorNormalCompletion6 && _iterator6.return) {
											_iterator6.return();
										}
									} finally {
										if (_didIteratorError6) {
											throw _iteratorError6;
										}
									}
								}

								if (paramFmtp.config) remoteMediaObj.fmtp.push(paramFmtp);
							}

							if (codec.rtcpFeedback) {
								var _iteratorNormalCompletion7 = true;
								var _didIteratorError7 = false;
								var _iteratorError7 = undefined;

								try {
									for (var _iterator7 = (0, _getIterator3.default)(codec.rtcpFeedback), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
										var fb = _step7.value;

										remoteMediaObj.rtcpFb.push({
											payload: codec.payloadType,
											type: fb.type,
											subtype: fb.parameter || ''
										});
									}
								} catch (err) {
									_didIteratorError7 = true;
									_iteratorError7 = err;
								} finally {
									try {
										if (!_iteratorNormalCompletion7 && _iterator7.return) {
											_iterator7.return();
										}
									} finally {
										if (_didIteratorError7) {
											throw _iteratorError7;
										}
									}
								}
							}
						}
					} catch (err) {
						_didIteratorError3 = true;
						_iteratorError3 = err;
					} finally {
						try {
							if (!_iteratorNormalCompletion3 && _iterator3.return) {
								_iterator3.return();
							}
						} finally {
							if (_didIteratorError3) {
								throw _iteratorError3;
							}
						}
					}

					remoteMediaObj.payloads = codecs.map(function (codec) {
						return codec.payloadType;
					}).join(' ');

					// NOTE: Firefox does not like a=extmap lines if a=inactive.
					if (!closed) {
						remoteMediaObj.ext = [];

						var _loop = function _loop(ext) {
							// Don't add a header extension if not present in the offer.
							var matchedLocalExt = (localMediaObj.ext || []).find(function (localExt) {
								return localExt.uri === ext.uri;
							});

							if (!matchedLocalExt) return 'continue';

							remoteMediaObj.ext.push({
								uri: ext.uri,
								value: ext.id
							});
						};

						var _iteratorNormalCompletion4 = true;
						var _didIteratorError4 = false;
						var _iteratorError4 = undefined;

						try {
							for (var _iterator4 = (0, _getIterator3.default)(headerExtensions), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
								var ext = _step4.value;

								var _ret = _loop(ext);

								if (_ret === 'continue') continue;
							}
						} catch (err) {
							_didIteratorError4 = true;
							_iteratorError4 = err;
						} finally {
							try {
								if (!_iteratorNormalCompletion4 && _iterator4.return) {
									_iterator4.return();
								}
							} finally {
								if (_didIteratorError4) {
									throw _iteratorError4;
								}
							}
						}
					}

					// Simulcast.
					if (localMediaObj.simulcast_03) {
						// eslint-disable-next-line camelcase
						remoteMediaObj.simulcast_03 = {
							value: localMediaObj.simulcast_03.value.replace(/send/g, 'recv')
						};

						remoteMediaObj.rids = [];

						var _iteratorNormalCompletion5 = true;
						var _didIteratorError5 = false;
						var _iteratorError5 = undefined;

						try {
							for (var _iterator5 = (0, _getIterator3.default)(localMediaObj.rids || []), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
								var rid = _step5.value;

								if (rid.direction !== 'send') continue;

								remoteMediaObj.rids.push({
									id: rid.id,
									direction: 'recv'
								});
							}
						} catch (err) {
							_didIteratorError5 = true;
							_iteratorError5 = err;
						} finally {
							try {
								if (!_iteratorNormalCompletion5 && _iterator5.return) {
									_iterator5.return();
								}
							} finally {
								if (_didIteratorError5) {
									throw _iteratorError5;
								}
							}
						}
					}

					remoteMediaObj.rtcpMux = 'rtcp-mux';
					remoteMediaObj.rtcpRsize = 'rtcp-rsize';

					// Push it.
					sdpObj.media.push(remoteMediaObj);
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}

			var sdp = _sdpform2.default.write(sdpObj);

			return sdp;
		}
	}]);
	return SendRemoteSdp;
}(RemoteSdp);

var RecvRemoteSdp = function (_RemoteSdp2) {
	(0, _inherits3.default)(RecvRemoteSdp, _RemoteSdp2);

	function RecvRemoteSdp(rtpParametersByKind) {
		(0, _classCallCheck3.default)(this, RecvRemoteSdp);
		return (0, _possibleConstructorReturn3.default)(this, (RecvRemoteSdp.__proto__ || (0, _getPrototypeOf2.default)(RecvRemoteSdp)).call(this, rtpParametersByKind));
	}

	/**
  * @param {Array<Object>} consumerInfos - Consumer informations.
  * @return {String}
  */


	(0, _createClass3.default)(RecvRemoteSdp, [{
		key: 'createOfferSdp',
		value: function createOfferSdp(consumerInfos) {
			logger.debug('createOfferSdp()');

			if (!this._transportRemoteParameters) throw new Error('no transport remote parameters');

			var remoteIceParameters = this._transportRemoteParameters.iceParameters;
			var remoteIceCandidates = this._transportRemoteParameters.iceCandidates;
			var remoteDtlsParameters = this._transportRemoteParameters.dtlsParameters;
			var sdpObj = {};
			var mids = consumerInfos.map(function (info) {
				return String(info.mid);
			});

			// Increase our SDP version.
			this._sdpGlobalFields.version++;

			sdpObj.version = 0;
			sdpObj.origin = {
				address: '0.0.0.0',
				ipVer: 4,
				netType: 'IN',
				sessionId: this._sdpGlobalFields.id,
				sessionVersion: this._sdpGlobalFields.version,
				username: 'mediasoup-client'
			};
			sdpObj.name = '-';
			sdpObj.timing = { start: 0, stop: 0 };
			sdpObj.icelite = remoteIceParameters.iceLite ? 'ice-lite' : null;
			sdpObj.msidSemantic = {
				semantic: 'WMS',
				token: '*'
			};

			if (mids.length > 0) {
				sdpObj.groups = [{
					type: 'BUNDLE',
					mids: mids.join(' ')
				}];
			}

			sdpObj.media = [];

			// NOTE: We take the latest fingerprint.
			var numFingerprints = remoteDtlsParameters.fingerprints.length;

			sdpObj.fingerprint = {
				type: remoteDtlsParameters.fingerprints[numFingerprints - 1].algorithm,
				hash: remoteDtlsParameters.fingerprints[numFingerprints - 1].value
			};

			var _iteratorNormalCompletion8 = true;
			var _didIteratorError8 = false;
			var _iteratorError8 = undefined;

			try {
				for (var _iterator8 = (0, _getIterator3.default)(consumerInfos), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
					var info = _step8.value;

					var closed = info.closed;
					var kind = info.kind;
					var codecs = void 0;
					var headerExtensions = void 0;

					if (info.kind !== 'application') {
						codecs = this._rtpParametersByKind[kind].codecs;
						headerExtensions = this._rtpParametersByKind[kind].headerExtensions;
					}

					var remoteMediaObj = {};

					if (info.kind !== 'application') {
						remoteMediaObj.type = kind;
						remoteMediaObj.port = 7;
						remoteMediaObj.protocol = 'RTP/SAVPF';
						remoteMediaObj.connection = { ip: '127.0.0.1', version: 4 };
						remoteMediaObj.mid = info.mid;
						remoteMediaObj.msid = info.streamId + ' ' + info.trackId;
					} else {
						remoteMediaObj.type = kind;
						remoteMediaObj.port = 9;
						remoteMediaObj.protocol = 'DTLS/SCTP';
						remoteMediaObj.connection = { ip: '127.0.0.1', version: 4 };
						remoteMediaObj.mid = info.mid;
					}

					remoteMediaObj.iceUfrag = remoteIceParameters.usernameFragment;
					remoteMediaObj.icePwd = remoteIceParameters.password;
					remoteMediaObj.candidates = [];

					var _iteratorNormalCompletion9 = true;
					var _didIteratorError9 = false;
					var _iteratorError9 = undefined;

					try {
						for (var _iterator9 = (0, _getIterator3.default)(remoteIceCandidates), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
							var candidate = _step9.value;

							var candidateObj = {};

							// mediasoup does not support non rtcp-mux so candidates component is
							// always RTP (1).
							candidateObj.component = 1;
							candidateObj.foundation = candidate.foundation;
							candidateObj.ip = candidate.ip;
							candidateObj.port = candidate.port;
							candidateObj.priority = candidate.priority;
							candidateObj.transport = candidate.protocol;
							candidateObj.type = candidate.type;
							if (candidate.tcpType) candidateObj.tcptype = candidate.tcpType;

							remoteMediaObj.candidates.push(candidateObj);
						}
					} catch (err) {
						_didIteratorError9 = true;
						_iteratorError9 = err;
					} finally {
						try {
							if (!_iteratorNormalCompletion9 && _iterator9.return) {
								_iterator9.return();
							}
						} finally {
							if (_didIteratorError9) {
								throw _iteratorError9;
							}
						}
					}

					remoteMediaObj.endOfCandidates = 'end-of-candidates';

					// Announce support for ICE renomination.
					// https://tools.ietf.org/html/draft-thatcher-ice-renomination
					remoteMediaObj.iceOptions = 'renomination';

					remoteMediaObj.setup = 'actpass';

					if (info.kind !== 'application') {
						if (!closed) remoteMediaObj.direction = 'sendonly';else remoteMediaObj.direction = 'inactive';

						remoteMediaObj.rtp = [];
						remoteMediaObj.rtcpFb = [];
						remoteMediaObj.fmtp = [];

						var _iteratorNormalCompletion10 = true;
						var _didIteratorError10 = false;
						var _iteratorError10 = undefined;

						try {
							for (var _iterator10 = (0, _getIterator3.default)(codecs), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
								var codec = _step10.value;

								var rtp = {
									payload: codec.payloadType,
									codec: codec.name,
									rate: codec.clockRate
								};

								if (codec.channels > 1) rtp.encoding = codec.channels;

								remoteMediaObj.rtp.push(rtp);

								if (codec.parameters) {
									var paramFmtp = {
										payload: codec.payloadType,
										config: ''
									};

									var _iteratorNormalCompletion12 = true;
									var _didIteratorError12 = false;
									var _iteratorError12 = undefined;

									try {
										for (var _iterator12 = (0, _getIterator3.default)((0, _keys2.default)(codec.parameters)), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
											var key = _step12.value;

											if (paramFmtp.config) paramFmtp.config += ';';

											paramFmtp.config += key + '=' + codec.parameters[key];
										}
									} catch (err) {
										_didIteratorError12 = true;
										_iteratorError12 = err;
									} finally {
										try {
											if (!_iteratorNormalCompletion12 && _iterator12.return) {
												_iterator12.return();
											}
										} finally {
											if (_didIteratorError12) {
												throw _iteratorError12;
											}
										}
									}

									if (paramFmtp.config) remoteMediaObj.fmtp.push(paramFmtp);
								}

								if (codec.rtcpFeedback) {
									var _iteratorNormalCompletion13 = true;
									var _didIteratorError13 = false;
									var _iteratorError13 = undefined;

									try {
										for (var _iterator13 = (0, _getIterator3.default)(codec.rtcpFeedback), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
											var fb = _step13.value;

											remoteMediaObj.rtcpFb.push({
												payload: codec.payloadType,
												type: fb.type,
												subtype: fb.parameter || ''
											});
										}
									} catch (err) {
										_didIteratorError13 = true;
										_iteratorError13 = err;
									} finally {
										try {
											if (!_iteratorNormalCompletion13 && _iterator13.return) {
												_iterator13.return();
											}
										} finally {
											if (_didIteratorError13) {
												throw _iteratorError13;
											}
										}
									}
								}
							}
						} catch (err) {
							_didIteratorError10 = true;
							_iteratorError10 = err;
						} finally {
							try {
								if (!_iteratorNormalCompletion10 && _iterator10.return) {
									_iterator10.return();
								}
							} finally {
								if (_didIteratorError10) {
									throw _iteratorError10;
								}
							}
						}

						remoteMediaObj.payloads = codecs.map(function (codec) {
							return codec.payloadType;
						}).join(' ');

						// NOTE: Firefox does not like a=extmap lines if a=inactive.
						if (!closed) {
							remoteMediaObj.ext = [];

							var _iteratorNormalCompletion11 = true;
							var _didIteratorError11 = false;
							var _iteratorError11 = undefined;

							try {
								for (var _iterator11 = (0, _getIterator3.default)(headerExtensions), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
									var ext = _step11.value;

									// Ignore MID RTP extension for receiving media.
									if (ext.uri === 'urn:ietf:params:rtp-hdrext:sdes:mid') continue;

									remoteMediaObj.ext.push({
										uri: ext.uri,
										value: ext.id
									});
								}
							} catch (err) {
								_didIteratorError11 = true;
								_iteratorError11 = err;
							} finally {
								try {
									if (!_iteratorNormalCompletion11 && _iterator11.return) {
										_iterator11.return();
									}
								} finally {
									if (_didIteratorError11) {
										throw _iteratorError11;
									}
								}
							}
						}

						remoteMediaObj.rtcpMux = 'rtcp-mux';
						remoteMediaObj.rtcpRsize = 'rtcp-rsize';

						if (!closed) {
							remoteMediaObj.ssrcs = [];
							remoteMediaObj.ssrcGroups = [];

							remoteMediaObj.ssrcs.push({
								id: info.ssrc,
								attribute: 'cname',
								value: info.cname
							});

							if (info.rtxSsrc) {
								remoteMediaObj.ssrcs.push({
									id: info.rtxSsrc,
									attribute: 'cname',
									value: info.cname
								});

								// Associate original and retransmission SSRC.
								remoteMediaObj.ssrcGroups.push({
									semantics: 'FID',
									ssrcs: info.ssrc + ' ' + info.rtxSsrc
								});
							}
						}
					} else {
						remoteMediaObj.payloads = 5000;
						remoteMediaObj.sctpmap = {
							app: 'webrtc-datachannel',
							maxMessageSize: 256,
							sctpmapNumber: 5000
						};
					}

					// Push it.
					sdpObj.media.push(remoteMediaObj);
				}
			} catch (err) {
				_didIteratorError8 = true;
				_iteratorError8 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion8 && _iterator8.return) {
						_iterator8.return();
					}
				} finally {
					if (_didIteratorError8) {
						throw _iteratorError8;
					}
				}
			}

			var sdp = _sdpform2.default.write(sdpObj);

			return sdp;
		}
	}]);
	return RecvRemoteSdp;
}(RemoteSdp);

var RemoteUnifiedPlanSdp = function RemoteUnifiedPlanSdp(direction, rtpParametersByKind) {
	(0, _classCallCheck3.default)(this, RemoteUnifiedPlanSdp);

	logger.debug('constructor() [direction:%s, rtpParametersByKind:%o]', direction, rtpParametersByKind);

	switch (direction) {
		case 'send':
			return new SendRemoteSdp(rtpParametersByKind);
		case 'recv':
			return new RecvRemoteSdp(rtpParametersByKind);
	}
};

exports.default = RemoteUnifiedPlanSdp;

/***/ }),

/***/ "./lib/mslib/handlers/sdp/bandwidthHandler.js":
/*!****************************************************!*\
  !*** ./lib/mslib/handlers/sdp/bandwidthHandler.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _Logger = __webpack_require__(/*! ../../Logger */ "./lib/mslib/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

var _sdpform = __webpack_require__(/*! ../../../sdpform */ "./lib/sdpform/index.js");

var _sdpform2 = _interopRequireDefault(_sdpform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = new _Logger2.default('BandwidthHandler');

function setBAS(sdp, bandwidth, isScreen) {
	if (!!navigator.mozGetUserMedia || !bandwidth) {
		return sdp;
	}

	// logger.debug(`setBAS() bandwidth: ${JSON.stringify(bandwidth)}`);

	if (isScreen) {
		if (!bandwidth.screen) {
			console.warn('It seems that you are not using bandwidth for screen. Screen sharing is expected to fail.');
		} else if (bandwidth.screen < 300) {
			console.warn('It seems that you are using wrong bandwidth value for screen. Screen sharing is expected to fail.');
		}
	}

	// if screen; must use at least 300kbs
	if (bandwidth.screen && isScreen) {
		sdp = sdp.replace(/b=AS([^\r\n]+\r\n)/g, '');
		sdp = sdp.replace(/a=mid:video\r\n/g, 'a=mid:video\r\nb=AS:' + bandwidth.screen + '\r\n');
	}

	// remove existing bandwidth lines
	if (bandwidth.audio || bandwidth.video || bandwidth.data) {
		sdp = sdp.replace(/b=AS([^\r\n]+\r\n)/g, '');
	}

	if (bandwidth.audio) {
		sdp = sdp.replace(/a=mid:audio\r\n/g, 'a=mid:audio\r\nb=AS:' + bandwidth.audio + '\r\n');
	}

	if (bandwidth.video) {
		sdp = sdp.replace(/a=mid:video\r\n/g, 'a=mid:video\r\nb=AS:' + (isScreen ? bandwidth.screen : bandwidth.video) + '\r\n');
	}

	return sdp;
}

// Find the line in sdpLines that starts with |prefix|, and, if specified,
// contains |substr| (case-insensitive search).
function findLine(sdpLines, prefix, substr) {
	return findLineInRange(sdpLines, 0, -1, prefix, substr);
}

// Find the line in sdpLines[startLine...endLine - 1] that starts with |prefix|
// and, if specified, contains |substr| (case-insensitive search).
function findLineInRange(sdpLines, startLine, endLine, prefix, substr) {
	var realEndLine = endLine !== -1 ? endLine : sdpLines.length;
	for (var i = startLine; i < realEndLine; ++i) {
		if (sdpLines[i].indexOf(prefix) === 0) {
			if (!substr || sdpLines[i].toLowerCase().indexOf(substr.toLowerCase()) !== -1) {
				return i;
			}
		}
	}

	return null;
}

// Gets the codec payload type from an a=rtpmap:X line.
function getCodecPayloadType(sdpLine) {
	var pattern = new RegExp('a=rtpmap:(\\d+) \\w+\\/\\d+');
	var result = sdpLine.match(pattern);
	return result && result.length === 2 ? result[1] : null;
}

function setVideoBitrates(sdp, params) {
	if (typeof params === 'undefined' || params === null) return sdp;

	if (typeof params.videoGoogleMinBitrate === 'undefined' || typeof params.videoGoogleMaxBitrate === 'undefined') return sdp;

	// logger.debug(`setVideoBitrates() params: ${JSON.stringify(params)}`);

	params = params || {};
	var xgoogle_min_bitrate = params.videoGoogleMinBitrate;
	var xgoogle_max_bitrate = params.videoGoogleMaxBitrate;
	var xgoogle_start_bitrate = params.videoGoogleStartBitrate;

	var sdpLines = sdp.split('\r\n');

	// H264
	var h264Index = findLine(sdpLines, 'a=rtpmap', 'H264/90000');
	var h264Payload;
	if (h264Index) {
		h264Payload = getCodecPayloadType(sdpLines[h264Index]);
	}

	if (!h264Payload) {
		return sdp;
	}

	var rtxIndex = findLine(sdpLines, 'a=rtpmap', 'rtx/90000');
	var rtxPayload;
	if (rtxIndex) {
		rtxPayload = getCodecPayloadType(sdpLines[rtxIndex]);
	}

	if (!rtxIndex) {
		return sdp;
	}

	// var rtxFmtpLineIndex = findLine(sdpLines, 'a=fmtp:' + rtxPayload.toString());
	// if (rtxFmtpLineIndex !== null) {
	//     var appendrtxNext = '\r\n';
	//     appendrtxNext += 'a=fmtp:' + h264Payload + ' x-google-min-bitrate=' + (xgoogle_min_bitrate || '228') + ';x-google-max-bitrate=' + (xgoogle_max_bitrate || '228') + ';x-google-start-bitrate=' + (xgoogle_start_bitrate || '228');
	//     sdpLines[rtxFmtpLineIndex] = sdpLines[rtxFmtpLineIndex].concat(appendrtxNext);
	//     // sdp = sdpLines.join('\r\n');
	// }

	var rtxFmtpLineIndex = 0;
	while (rtxFmtpLineIndex !== null) {
		rtxFmtpLineIndex = findLineInRange(sdpLines, rtxFmtpLineIndex, -1, 'a=fmtp', 'profile-level-id=42001f');
		if (rtxFmtpLineIndex !== null) {
			sdpLines[rtxFmtpLineIndex] += ';x-google-min-bitrate=' + (xgoogle_min_bitrate || '228') + ';x-google-max-bitrate=' + (xgoogle_max_bitrate || '228') + ';x-google-start-bitrate=' + (xgoogle_start_bitrate || '228');
			sdp = sdpLines.join('\r\n');
		}

		if (rtxFmtpLineIndex === null) break;
		rtxFmtpLineIndex += 1;
	}

	rtxFmtpLineIndex = 0;
	while (rtxFmtpLineIndex !== null) {
		rtxFmtpLineIndex = findLineInRange(sdpLines, rtxFmtpLineIndex, -1, 'a=fmtp', 'profile-level-id=42e01f');
		if (rtxFmtpLineIndex !== null) {
			sdpLines[rtxFmtpLineIndex] += ';x-google-min-bitrate=' + (xgoogle_min_bitrate || '228') + ';x-google-max-bitrate=' + (xgoogle_max_bitrate || '228') + ';x-google-start-bitrate=' + (xgoogle_start_bitrate || '228');
			sdp = sdpLines.join('\r\n');
		}

		if (rtxFmtpLineIndex === null) break;
		rtxFmtpLineIndex += 1;
	}

	// logger.debug(`setVideoBitrates() OK - sdp: ${sdp}`);

	return sdp;
}

// a=fmtp:111 minptime=10;useinbandfec=1;stereo=1;maxaveragebitrate=24000;maxplaybackrate=48000;
// 
// params:
// {
//	stereo : 1, // 取值 1 / 0
//	maxaveragebitrate : 24 * 1024, // 数值型
//	maxplaybackrate   : 48000, // 数值型
//	cbr : 1, // 取值 1 / 0
//	useinbandfec : 1, // 取值 1 / 0
//	usedtx : 1, // 取值 1 / 0
//	maxptime : 20, // 最大打包时长
// }
function setOpusAttributes(sdp, params) {
	params = params || {};

	var sdpLines = sdp.split('\r\n');

	// logger.debug(`setOpusAttributes() params: ${JSON.stringify(params)}`);

	// Opus
	var opusIndex = findLine(sdpLines, 'a=rtpmap', 'opus/48000');
	var opusPayload;
	if (opusIndex) {
		opusPayload = getCodecPayloadType(sdpLines[opusIndex]);
	}

	if (!opusPayload) {
		return sdp;
	}

	var opusFmtpLineIndex = findLine(sdpLines, 'a=fmtp:' + opusPayload.toString());
	if (opusFmtpLineIndex === null) {
		return sdp;
	}

	var appendOpusNext = '';
	// 

	var pattern = void 0;
	var idx = 0;

	if (typeof params.stereo != 'undefined') {
		idx = sdpLines[opusFmtpLineIndex].indexOf('stereo=');
		if (idx === -1) {
			appendOpusNext += ';stereo=' + params.stereo;
		} else {
			pattern = new RegExp('stereo=(\\d)');
			appendOpusNext = appendOpusNext.replace(pattern, 'stereo=' + params.stereo);
		}
	}

	if (typeof params['sprop-stereo'] != 'undefined') {
		idx = sdpLines[opusFmtpLineIndex].indexOf('sprop-stereo=');
		if (idx === -1) {
			appendOpusNext += ';sprop-stereo=' + params['sprop-stereo'];
		} else {
			pattern = new RegExp('sprop-stereo=(\\d)');
			appendOpusNext = appendOpusNext.replace(pattern, 'sprop-stereo=' + params['sprop-stereo']);
		}
	}

	if (typeof params.maxaveragebitrate != 'undefined') {
		idx = sdpLines[opusFmtpLineIndex].indexOf('maxaveragebitrate=');
		if (idx == -1) {
			appendOpusNext += ';maxaveragebitrate=' + (params.maxaveragebitrate || 128 * 1024 * 8);
		} else {
			pattern = new RegExp('maxaveragebitrate=(\\d+)');
			appendOpusNext = appendOpusNext.replace(pattern, 'maxaveragebitrate=' + (params.maxaveragebitrate || 128 * 1024 * 8));
		}
	}

	if (typeof params.maxplaybackrate != 'undefined') {
		idx = sdpLines[opusFmtpLineIndex].indexOf('maxplaybackrate=');
		if (idx === -1) {
			appendOpusNext += ';maxplaybackrate=' + (params.maxplaybackrate || 48000);
		} else {
			pattern = new RegExp('maxplaybackrate=(\\d+)');
			appendOpusNext = appendOpusNext.replace(pattern, 'maxplaybackrate=' + (params.maxplaybackrate || 48000));
		}
	}

	if (typeof params.cbr != 'undefined') {
		appendOpusNext += ';cbr=' + (typeof params.cbr != 'undefined' ? params.cbr : '1');
	}

	if (typeof params.useinbandfec != 'undefined') {
		appendOpusNext += ';useinbandfec=' + params.useinbandfec;
	}

	if (typeof params.usedtx != 'undefined') {
		appendOpusNext += ';usedtx=' + params.usedtx;
	}

	if (typeof params.maxptime != 'undefined') {
		appendOpusNext += '\r\na=maxptime:' + params.maxptime;
	}

	sdpLines[opusFmtpLineIndex] = sdpLines[opusFmtpLineIndex].concat(appendOpusNext);

	sdp = sdpLines.join('\r\n');

	logger.debug('setOpusAttributes() OK - sdp: ' + sdp);

	return sdp;
}

// 
function setSpecialAudioCodec(sdp, codec) {
	var sdpObject = _sdpform2.default.parse(sdp);

	if (!sdpObject) {
		return sdp;
	}

	sdpObject.media.forEach(function (item, index) {
		if (item.type !== 'audio') return;

		// 
		if (!item.rtp) return;

		sdpObject.media[index].rtp = item.rtp.filter(function (ele) {
			return ele.codec == codec || ele.codec == 'CN' || ele.codec == 'telephone-event';
		});

		// 
		var codecPT = -1;
		item.rtp.forEach(function (ele, index) {
			if (ele.codec == codec) codecPT = ele.payload;
		});

		sdpObject.media[index].payloads = item.rtp.map(function (rtp) {
			return rtp.payload;
		}).join(' ');

		// 
		if (item.fmtp) {
			sdpObject.media[index].fmtp = item.fmtp.filter(function (ele) {
				return ele.payload == codecPT;
			});
		}

		// 
		if (item.rtcpFb) {
			sdpObject.media[index].rtcpFb = item.rtcpFb.filter(function (ele) {
				return ele.payload == codecPT;
			});
		}
	});

	// 
	sdp = _sdpform2.default.write(sdpObject);
	console.log('setSpecialAudioCodec -- sdp: ' + sdp, sdpObject);

	return sdp;
}

exports.default = {
	setBAS: setBAS,
	setVideoBitrates: setVideoBitrates,
	setOpusAttributes: setOpusAttributes,
	setSpecialAudioCodec: setSpecialAudioCodec
};

/***/ }),

/***/ "./lib/mslib/handlers/sdp/commonUtils.js":
/*!***********************************************!*\
  !*** ./lib/mslib/handlers/sdp/commonUtils.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _getIterator2 = __webpack_require__(/*! babel-runtime/core-js/get-iterator */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/get-iterator.js");

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _from = __webpack_require__(/*! babel-runtime/core-js/array/from */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/array/from.js");

var _from2 = _interopRequireDefault(_from);

var _map = __webpack_require__(/*! babel-runtime/core-js/map */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/map.js");

var _map2 = _interopRequireDefault(_map);

exports.extractRtpCapabilities = extractRtpCapabilities;
exports.extractDtlsParameters = extractDtlsParameters;

var _sdpform = __webpack_require__(/*! ../../../sdpform */ "./lib/sdpform/index.js");

var _sdpform2 = _interopRequireDefault(_sdpform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Extract RTP capabilities from a SDP.
 *
 * @param {Object} sdpObj - SDP Object generated by sdpform.
 * @return {RTCRtpCapabilities}
 */
function extractRtpCapabilities(sdpObj) {
	// Map of RtpCodecParameters indexed by payload type.
	var codecsMap = new _map2.default();

	// Array of RtpHeaderExtensions.
	var headerExtensions = [];

	// Whether a m=audio/video section has been already found.
	var gotAudio = false;
	var gotVideo = false;

	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {
		for (var _iterator = (0, _getIterator3.default)(sdpObj.media), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
			var m = _step.value;

			var kind = m.type;

			switch (kind) {
				case 'audio':
					{
						if (gotAudio) continue;

						gotAudio = true;

						break;
					}
				case 'video':
					{
						if (gotVideo) continue;

						gotVideo = true;

						break;
					}
				default:
					{
						continue;
					}
			}

			// Get codecs.
			var _iteratorNormalCompletion2 = true;
			var _didIteratorError2 = false;
			var _iteratorError2 = undefined;

			try {
				for (var _iterator2 = (0, _getIterator3.default)(m.rtp), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
					var rtp = _step2.value;

					var codec = {
						name: rtp.codec,
						mimeType: kind + '/' + rtp.codec,
						kind: kind,
						clockRate: rtp.rate,
						preferredPayloadType: rtp.payload,
						channels: rtp.encoding,
						rtcpFeedback: [],
						parameters: {}
					};

					if (codec.kind !== 'audio') delete codec.channels;else if (!codec.channels) codec.channels = 1;

					codecsMap.set(codec.preferredPayloadType, codec);
				}

				// Get codec parameters.
			} catch (err) {
				_didIteratorError2 = true;
				_iteratorError2 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion2 && _iterator2.return) {
						_iterator2.return();
					}
				} finally {
					if (_didIteratorError2) {
						throw _iteratorError2;
					}
				}
			}

			var _iteratorNormalCompletion3 = true;
			var _didIteratorError3 = false;
			var _iteratorError3 = undefined;

			try {
				for (var _iterator3 = (0, _getIterator3.default)(m.fmtp || []), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
					var fmtp = _step3.value;

					var parameters = _sdpform2.default.parseFmtpConfig(fmtp.config);
					var codec = codecsMap.get(fmtp.payload);

					if (!codec) continue;

					codec.parameters = parameters;
				}

				// Get RTCP feedback for each codec.
			} catch (err) {
				_didIteratorError3 = true;
				_iteratorError3 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion3 && _iterator3.return) {
						_iterator3.return();
					}
				} finally {
					if (_didIteratorError3) {
						throw _iteratorError3;
					}
				}
			}

			var _iteratorNormalCompletion4 = true;
			var _didIteratorError4 = false;
			var _iteratorError4 = undefined;

			try {
				for (var _iterator4 = (0, _getIterator3.default)(m.rtcpFb || []), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
					var fb = _step4.value;

					var codec = codecsMap.get(fb.payload);

					if (!codec) continue;

					var feedback = {
						type: fb.type,
						parameter: fb.subtype
					};

					if (!feedback.parameter) delete feedback.parameter;

					codec.rtcpFeedback.push(feedback);
				}

				// Get RTP header extensions.
			} catch (err) {
				_didIteratorError4 = true;
				_iteratorError4 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion4 && _iterator4.return) {
						_iterator4.return();
					}
				} finally {
					if (_didIteratorError4) {
						throw _iteratorError4;
					}
				}
			}

			var _iteratorNormalCompletion5 = true;
			var _didIteratorError5 = false;
			var _iteratorError5 = undefined;

			try {
				for (var _iterator5 = (0, _getIterator3.default)(m.ext || []), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
					var ext = _step5.value;

					var headerExtension = {
						kind: kind,
						uri: ext.uri,
						preferredId: ext.value
					};

					headerExtensions.push(headerExtension);
				}
			} catch (err) {
				_didIteratorError5 = true;
				_iteratorError5 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion5 && _iterator5.return) {
						_iterator5.return();
					}
				} finally {
					if (_didIteratorError5) {
						throw _iteratorError5;
					}
				}
			}
		}
	} catch (err) {
		_didIteratorError = true;
		_iteratorError = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion && _iterator.return) {
				_iterator.return();
			}
		} finally {
			if (_didIteratorError) {
				throw _iteratorError;
			}
		}
	}

	var rtpCapabilities = {
		codecs: (0, _from2.default)(codecsMap.values()),
		headerExtensions: headerExtensions,
		fecMechanisms: [] // TODO
	};

	return rtpCapabilities;
}

/**
 * Extract DTLS parameters from a SDP.
 *
 * @param {Object} sdpObj - SDP Object generated by sdpform.
 * @return {RTCDtlsParameters}
 */
function extractDtlsParameters(sdpObj) {
	var media = getFirstActiveMediaSection(sdpObj);
	var fingerprint = media.fingerprint || sdpObj.fingerprint;
	var role = void 0;

	switch (media.setup) {
		case 'active':
			role = 'client';
			break;
		case 'passive':
			role = 'server';
			break;
		case 'actpass':
			role = 'auto';
			break;
	}

	var dtlsParameters = {
		role: role,
		fingerprints: [{
			algorithm: fingerprint.type,
			value: fingerprint.hash
		}]
	};

	return dtlsParameters;
}

/**
 * Get the first acive media section.
 *
 * @private
 * @param {Object} sdpObj - SDP Object generated by sdpform.
 * @return {Object} SDP media section as parsed by sdpform.
 */
function getFirstActiveMediaSection(sdpObj) {
	return (sdpObj.media || []).find(function (m) {
		return m.iceUfrag && m.port !== 0;
	});
}

/***/ }),

/***/ "./lib/mslib/handlers/sdp/plainRtpUtils.js":
/*!*************************************************!*\
  !*** ./lib/mslib/handlers/sdp/plainRtpUtils.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.extractPlainRtpParametersByKind = extractPlainRtpParametersByKind;
exports.fillRtpParametersForKind = fillRtpParametersForKind;
/**
 * Extract plain RTP parameters from a SDP.
 *
 * @param {Object} sdpObj - SDP Object generated by sdpform.
 * @param {String} kind - media type.
 * @return {PlainRtpParameters}
 */
function extractPlainRtpParametersByKind(sdpObj, kind) {
	var mSection = (sdpObj.media || []).find(function (m) {
		return m.type === kind;
	});

	if (!mSection) throw new Error('m=' + kind + ' section not found');

	var plainRtpParameters = {
		ip: sdpObj.connection.ip,
		port: mSection.port
	};

	return plainRtpParameters;
}

/**
 * Fill the given RTP parameters for the given media type.
 *
 * @param {RTCRtpParameters} rtpParameters -  RTP parameters to be filled.
 * @param {Object} sdpObj - Local SDP Object generated by sdpform.
 * @param {String} kind - media type.
 */
function fillRtpParametersForKind(rtpParameters, sdpObj, kind) {
	var rtcp = {
		cname: null,
		reducedSize: true,
		mux: true
	};

	var mSection = (sdpObj.media || []).find(function (m) {
		return m.type === kind;
	});

	if (!mSection) throw new Error('m=' + kind + ' section not found');

	// Get the SSRC and CNAME.

	var ssrcCnameLine = (mSection.ssrcs || []).find(function (line) {
		return line.attribute === 'cname';
	});

	var ssrc = void 0;

	if (ssrcCnameLine) {
		ssrc = ssrcCnameLine.id;
		rtcp.cname = ssrcCnameLine.value;
	}

	// Fill RTP parameters.

	rtpParameters.rtcp = rtcp;
	rtpParameters.encodings = [];

	var encoding = { ssrc: ssrc };

	rtpParameters.encodings.push(encoding);
}

/***/ }),

/***/ "./lib/mslib/handlers/sdp/planBUtils.js":
/*!**********************************************!*\
  !*** ./lib/mslib/handlers/sdp/planBUtils.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _getIterator2 = __webpack_require__(/*! babel-runtime/core-js/get-iterator */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/get-iterator.js");

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _slicedToArray2 = __webpack_require__(/*! babel-runtime/helpers/slicedToArray */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/slicedToArray.js");

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _map = __webpack_require__(/*! babel-runtime/core-js/map */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/map.js");

var _map2 = _interopRequireDefault(_map);

var _set = __webpack_require__(/*! babel-runtime/core-js/set */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/set.js");

var _set2 = _interopRequireDefault(_set);

exports.fillRtpParametersForTrack = fillRtpParametersForTrack;
exports.addSimulcastForTrack = addSimulcastForTrack;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Fill the given RTP parameters for the given track.
 *
 * @param {RTCRtpParameters} rtpParameters -  RTP parameters to be filled.
 * @param {Object} sdpObj - Local SDP Object generated by sdpform.
 * @param {MediaStreamTrack} track
 */
function fillRtpParametersForTrack(rtpParameters, sdpObj, track) {
	var kind = track.kind;
	var rtcp = {
		cname: null,
		reducedSize: true,
		mux: true
	};

	var mSection = (sdpObj.media || []).find(function (m) {
		return m.type === kind;
	});

	if (!mSection) throw new Error('m=' + kind + ' section not found');

	// First media SSRC (or the only one).
	var firstSsrc = void 0;

	// Get all the SSRCs.

	var ssrcs = new _set2.default();

	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {
		for (var _iterator = (0, _getIterator3.default)(mSection.ssrcs || []), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
			var line = _step.value;

			if (line.attribute !== 'msid') continue;

			var trackId = line.value.split(' ')[1];

			if (trackId === track.id) {
				var _ssrc2 = line.id;

				ssrcs.add(_ssrc2);

				if (!firstSsrc) firstSsrc = _ssrc2;
			}
		}
	} catch (err) {
		_didIteratorError = true;
		_iteratorError = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion && _iterator.return) {
				_iterator.return();
			}
		} finally {
			if (_didIteratorError) {
				throw _iteratorError;
			}
		}
	}

	if (ssrcs.size === 0) throw new Error('a=ssrc line not found for local track [track.id:' + track.id + ']');

	// Get media and RTX SSRCs.

	var ssrcToRtxSsrc = new _map2.default();

	// First assume RTX is used.
	var _iteratorNormalCompletion2 = true;
	var _didIteratorError2 = false;
	var _iteratorError2 = undefined;

	try {
		for (var _iterator2 = (0, _getIterator3.default)(mSection.ssrcGroups || []), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
			var _line = _step2.value;

			if (_line.semantics !== 'FID') continue;

			var _line$ssrcs$split = _line.ssrcs.split(/\s+/),
			    _line$ssrcs$split2 = (0, _slicedToArray3.default)(_line$ssrcs$split, 2),
			    ssrc = _line$ssrcs$split2[0],
			    rtxSsrc = _line$ssrcs$split2[1];

			ssrc = Number(ssrc);
			rtxSsrc = Number(rtxSsrc);

			if (ssrcs.has(ssrc)) {
				// Remove both the SSRC and RTX SSRC from the Set so later we know that they
				// are already handled.
				ssrcs.delete(ssrc);
				ssrcs.delete(rtxSsrc);

				// Add to the map.
				ssrcToRtxSsrc.set(ssrc, rtxSsrc);
			}
		}

		// If the Set of SSRCs is not empty it means that RTX is not being used, so take
		// media SSRCs from there.
	} catch (err) {
		_didIteratorError2 = true;
		_iteratorError2 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion2 && _iterator2.return) {
				_iterator2.return();
			}
		} finally {
			if (_didIteratorError2) {
				throw _iteratorError2;
			}
		}
	}

	var _iteratorNormalCompletion3 = true;
	var _didIteratorError3 = false;
	var _iteratorError3 = undefined;

	try {
		for (var _iterator3 = (0, _getIterator3.default)(ssrcs), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
			var ssrc = _step3.value;

			// Add to the map.
			ssrcToRtxSsrc.set(ssrc, null);
		}

		// Get RTCP info.
	} catch (err) {
		_didIteratorError3 = true;
		_iteratorError3 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion3 && _iterator3.return) {
				_iterator3.return();
			}
		} finally {
			if (_didIteratorError3) {
				throw _iteratorError3;
			}
		}
	}

	var ssrcCnameLine = mSection.ssrcs.find(function (line) {
		return line.attribute === 'cname' && line.id === firstSsrc;
	});

	if (ssrcCnameLine) rtcp.cname = ssrcCnameLine.value;

	// Fill RTP parameters.

	rtpParameters.rtcp = rtcp;
	rtpParameters.encodings = [];

	var simulcast = ssrcToRtxSsrc.size > 1;
	var simulcastProfiles = ['low', 'medium', 'high'];

	var _iteratorNormalCompletion4 = true;
	var _didIteratorError4 = false;
	var _iteratorError4 = undefined;

	try {
		for (var _iterator4 = (0, _getIterator3.default)(ssrcToRtxSsrc), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
			var _ref = _step4.value;

			var _ref2 = (0, _slicedToArray3.default)(_ref, 2);

			var _ssrc = _ref2[0];
			var rtxSsrc = _ref2[1];

			var encoding = { ssrc: _ssrc };

			if (rtxSsrc) encoding.rtx = { ssrc: rtxSsrc };

			if (simulcast) encoding.profile = simulcastProfiles.shift();

			rtpParameters.encodings.push(encoding);
		}
	} catch (err) {
		_didIteratorError4 = true;
		_iteratorError4 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion4 && _iterator4.return) {
				_iterator4.return();
			}
		} finally {
			if (_didIteratorError4) {
				throw _iteratorError4;
			}
		}
	}
}

/**
 * Adds simulcast into the given SDP for the given track.
 *
 * @param {Object} sdpObj - Local SDP Object generated by sdpform.
 * @param {MediaStreamTrack} track
 */
function addSimulcastForTrack(sdpObj, track) {
	var kind = track.kind;

	var mSection = (sdpObj.media || []).find(function (m) {
		return m.type === kind;
	});

	if (!mSection) throw new Error('m=' + kind + ' section not found');

	var ssrc = void 0;
	var rtxSsrc = void 0;
	var msid = void 0;

	// Get the SSRC.

	var ssrcMsidLine = (mSection.ssrcs || []).find(function (line) {
		if (line.attribute !== 'msid') return false;

		var trackId = line.value.split(' ')[1];

		if (trackId === track.id) {
			ssrc = line.id;
			msid = line.value.split(' ')[0];

			return true;
		}
	});

	if (!ssrcMsidLine) throw new Error('a=ssrc line not found for local track [track.id:' + track.id + ']');

	// Get the SSRC for RTX.

	(mSection.ssrcGroups || []).some(function (line) {
		if (line.semantics !== 'FID') return;

		var ssrcs = line.ssrcs.split(/\s+/);

		if (Number(ssrcs[0]) === ssrc) {
			rtxSsrc = Number(ssrcs[1]);

			return true;
		}
	});

	var ssrcCnameLine = mSection.ssrcs.find(function (line) {
		return line.attribute === 'cname' && line.id === ssrc;
	});

	if (!ssrcCnameLine) throw new Error('CNAME line not found for local track [track.id:' + track.id + ']');

	var cname = ssrcCnameLine.value;
	var ssrc2 = ssrc + 1;
	var ssrc3 = ssrc + 2;

	mSection.ssrcGroups = mSection.ssrcGroups || [];

	mSection.ssrcGroups.push({
		semantics: 'SIM',
		ssrcs: ssrc + ' ' + ssrc2 + ' ' + ssrc3
	});

	mSection.ssrcs.push({
		id: ssrc2,
		attribute: 'cname',
		value: cname
	});

	mSection.ssrcs.push({
		id: ssrc2,
		attribute: 'msid',
		value: msid + ' ' + track.id
	});

	mSection.ssrcs.push({
		id: ssrc3,
		attribute: 'cname',
		value: cname
	});

	mSection.ssrcs.push({
		id: ssrc3,
		attribute: 'msid',
		value: msid + ' ' + track.id
	});

	if (rtxSsrc) {
		var rtxSsrc2 = rtxSsrc + 1;
		var rtxSsrc3 = rtxSsrc + 2;

		mSection.ssrcGroups.push({
			semantics: 'FID',
			ssrcs: ssrc2 + ' ' + rtxSsrc2
		});

		mSection.ssrcs.push({
			id: rtxSsrc2,
			attribute: 'cname',
			value: cname
		});

		mSection.ssrcs.push({
			id: rtxSsrc2,
			attribute: 'msid',
			value: msid + ' ' + track.id
		});

		mSection.ssrcGroups.push({
			semantics: 'FID',
			ssrcs: ssrc3 + ' ' + rtxSsrc3
		});

		mSection.ssrcs.push({
			id: rtxSsrc3,
			attribute: 'cname',
			value: cname
		});

		mSection.ssrcs.push({
			id: rtxSsrc3,
			attribute: 'msid',
			value: msid + ' ' + track.id
		});
	}
}

/***/ }),

/***/ "./lib/mslib/handlers/sdp/unifiedPlanUtils.js":
/*!****************************************************!*\
  !*** ./lib/mslib/handlers/sdp/unifiedPlanUtils.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _slicedToArray2 = __webpack_require__(/*! babel-runtime/helpers/slicedToArray */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/slicedToArray.js");

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _map = __webpack_require__(/*! babel-runtime/core-js/map */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/map.js");

var _map2 = _interopRequireDefault(_map);

var _set = __webpack_require__(/*! babel-runtime/core-js/set */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/set.js");

var _set2 = _interopRequireDefault(_set);

var _getIterator2 = __webpack_require__(/*! babel-runtime/core-js/get-iterator */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/get-iterator.js");

var _getIterator3 = _interopRequireDefault(_getIterator2);

exports.fillRtpParametersForTrack = fillRtpParametersForTrack;
exports.addPlanBSimulcast = addPlanBSimulcast;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Fill the given RTP parameters for the given mid or sending track.
 *
 * @param {RTCRtpParameters} rtpParameters -  RTP parameters to be filled.
 * @param {Object} sdpObj - Local SDP Object generated by sdpform.
 * @param {MediaStreamTrack} track
 * @param {String} [mid]
 * @param {Boolean} [planBSimulcast]
 */
function fillRtpParametersForTrack(rtpParameters, sdpObj, track) {
	var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
	    _ref$mid = _ref.mid,
	    mid = _ref$mid === undefined ? null : _ref$mid,
	    _ref$planBSimulcast = _ref.planBSimulcast,
	    planBSimulcast = _ref$planBSimulcast === undefined ? false : _ref$planBSimulcast;

	var mSection = findMediaSection(sdpObj, track, mid);

	if (mid !== null && mid !== undefined) rtpParameters.muxId = String(mid);

	rtpParameters.rtcp = {
		cname: null,
		reducedSize: true,
		mux: true
	};

	// Get the SSRC and CNAME.

	var ssrcCnameLine = (mSection.ssrcs || []).find(function (line) {
		return line.attribute === 'cname';
	});

	if (!ssrcCnameLine) throw new Error('CNAME value not found');

	rtpParameters.rtcp.cname = ssrcCnameLine.value;

	// Standard simylcast based on a=simulcast and RID.
	if (!planBSimulcast) {
		// Get first (and may be the only one) ssrc.
		var ssrc = ssrcCnameLine.id;

		// Get a=rid lines.

		// Array of Objects with rid and profile keys.
		var simulcastStreams = [];

		var _iteratorNormalCompletion = true;
		var _didIteratorError = false;
		var _iteratorError = undefined;

		try {
			for (var _iterator = (0, _getIterator3.default)(mSection.rids || []), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
				var rid = _step.value;

				if (rid.direction !== 'send') continue;

				if (/^low/.test(rid.id)) simulcastStreams.push({ rid: rid.id, profile: 'low' });else if (/^medium/.test(rid.id)) simulcastStreams.push({ rid: rid.id, profile: 'medium' });
				if (/^high/.test(rid.id)) simulcastStreams.push({ rid: rid.id, profile: 'high' });
			}

			// Fill RTP parameters.
		} catch (err) {
			_didIteratorError = true;
			_iteratorError = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion && _iterator.return) {
					_iterator.return();
				}
			} finally {
				if (_didIteratorError) {
					throw _iteratorError;
				}
			}
		}

		rtpParameters.encodings = [];

		if (simulcastStreams.length === 0) {
			var encoding = { ssrc: ssrc };

			rtpParameters.encodings.push(encoding);
		} else {
			var _iteratorNormalCompletion2 = true;
			var _didIteratorError2 = false;
			var _iteratorError2 = undefined;

			try {
				for (var _iterator2 = (0, _getIterator3.default)(simulcastStreams), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
					var simulcastStream = _step2.value;

					var _encoding = {
						encodingId: simulcastStream.rid,
						profile: simulcastStream.profile
					};

					rtpParameters.encodings.push(_encoding);
				}
			} catch (err) {
				_didIteratorError2 = true;
				_iteratorError2 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion2 && _iterator2.return) {
						_iterator2.return();
					}
				} finally {
					if (_didIteratorError2) {
						throw _iteratorError2;
					}
				}
			}
		}
	}
	// Simulcast based on PlanB.
	else {
			// First media SSRC (or the only one).
			var firstSsrc = void 0;

			// Get all the SSRCs.

			var ssrcs = new _set2.default();

			var _iteratorNormalCompletion3 = true;
			var _didIteratorError3 = false;
			var _iteratorError3 = undefined;

			try {
				for (var _iterator3 = (0, _getIterator3.default)(mSection.ssrcs || []), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
					var line = _step3.value;

					if (line.attribute !== 'msid') continue;

					var _ssrc = line.id;

					ssrcs.add(_ssrc);

					if (!firstSsrc) firstSsrc = _ssrc;
				}
			} catch (err) {
				_didIteratorError3 = true;
				_iteratorError3 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion3 && _iterator3.return) {
						_iterator3.return();
					}
				} finally {
					if (_didIteratorError3) {
						throw _iteratorError3;
					}
				}
			}

			if (ssrcs.size === 0) throw new Error('no a=ssrc lines found');

			// Get media and RTX SSRCs.

			var ssrcToRtxSsrc = new _map2.default();

			// First assume RTX is used.
			var _iteratorNormalCompletion4 = true;
			var _didIteratorError4 = false;
			var _iteratorError4 = undefined;

			try {
				for (var _iterator4 = (0, _getIterator3.default)(mSection.ssrcGroups || []), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
					var _line = _step4.value;

					if (_line.semantics !== 'FID') continue;

					var _line$ssrcs$split = _line.ssrcs.split(/\s+/),
					    _line$ssrcs$split2 = (0, _slicedToArray3.default)(_line$ssrcs$split, 2),
					    _ssrc2 = _line$ssrcs$split2[0],
					    rtxSsrc = _line$ssrcs$split2[1];

					_ssrc2 = Number(_ssrc2);
					rtxSsrc = Number(rtxSsrc);

					if (ssrcs.has(_ssrc2)) {
						// Remove both the SSRC and RTX SSRC from the Set so later we know that they
						// are already handled.
						ssrcs.delete(_ssrc2);
						ssrcs.delete(rtxSsrc);

						// Add to the map.
						ssrcToRtxSsrc.set(_ssrc2, rtxSsrc);
					}
				}

				// If the Set of SSRCs is not empty it means that RTX is not being used, so take
				// media SSRCs from there.
			} catch (err) {
				_didIteratorError4 = true;
				_iteratorError4 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion4 && _iterator4.return) {
						_iterator4.return();
					}
				} finally {
					if (_didIteratorError4) {
						throw _iteratorError4;
					}
				}
			}

			var _iteratorNormalCompletion5 = true;
			var _didIteratorError5 = false;
			var _iteratorError5 = undefined;

			try {
				for (var _iterator5 = (0, _getIterator3.default)(ssrcs), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
					var _ssrc3 = _step5.value;

					// Add to the map.
					ssrcToRtxSsrc.set(_ssrc3, null);
				}

				// Fill RTP parameters.
			} catch (err) {
				_didIteratorError5 = true;
				_iteratorError5 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion5 && _iterator5.return) {
						_iterator5.return();
					}
				} finally {
					if (_didIteratorError5) {
						throw _iteratorError5;
					}
				}
			}

			rtpParameters.encodings = [];

			var simulcast = ssrcToRtxSsrc.size > 1;
			var simulcastProfiles = ['low', 'medium', 'high'];

			var _iteratorNormalCompletion6 = true;
			var _didIteratorError6 = false;
			var _iteratorError6 = undefined;

			try {
				for (var _iterator6 = (0, _getIterator3.default)(ssrcToRtxSsrc), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
					var _ref2 = _step6.value;

					var _ref3 = (0, _slicedToArray3.default)(_ref2, 2);

					var _ssrc4 = _ref3[0];
					var rtxSsrc = _ref3[1];

					var _encoding2 = { ssrc: _ssrc4 };

					if (rtxSsrc) _encoding2.rtx = { ssrc: rtxSsrc };

					if (simulcast) _encoding2.profile = simulcastProfiles.shift();

					rtpParameters.encodings.push(_encoding2);
				}
			} catch (err) {
				_didIteratorError6 = true;
				_iteratorError6 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion6 && _iterator6.return) {
						_iterator6.return();
					}
				} finally {
					if (_didIteratorError6) {
						throw _iteratorError6;
					}
				}
			}
		}
}

/**
 * Adds multi-ssrc based simulcast (PlanB) into the given SDP for the given mid
 * or track.
 * NOTE: This is for Chrome/Safari using Unified-Plan with legacy simulcast.
 *
 * @param {Object} sdpObj - Local SDP Object generated by sdpform.
 * @param {MediaStreamTrack} track
 * @param {String} [mid]
 */
function addPlanBSimulcast(sdpObj, track) {
	var _ref4 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
	    _ref4$mid = _ref4.mid,
	    mid = _ref4$mid === undefined ? null : _ref4$mid;

	var mSection = findMediaSection(sdpObj, track, mid);

	// Get the SSRC.

	var ssrcMsidLine = (mSection.ssrcs || []).find(function (line) {
		return line.attribute === 'msid';
	});

	if (!ssrcMsidLine) throw new Error('a=ssrc line with msid information not found');

	var ssrc = ssrcMsidLine.id;
	var msid = ssrcMsidLine.value.split(' ')[0];
	var rtxSsrc = void 0;

	// Get the SSRC for RTX.

	(mSection.ssrcGroups || []).some(function (line) {
		if (line.semantics !== 'FID') return;

		var ssrcs = line.ssrcs.split(/\s+/);

		if (Number(ssrcs[0]) === ssrc) {
			rtxSsrc = Number(ssrcs[1]);

			return true;
		}
	});

	var ssrcCnameLine = mSection.ssrcs.find(function (line) {
		return line.attribute === 'cname' && line.id === ssrc;
	});

	if (!ssrcCnameLine) throw new Error('CNAME line not found');

	var cname = ssrcCnameLine.value;
	var ssrc2 = ssrc + 1;
	var ssrc3 = ssrc + 2;

	// mSection.ssrcGroups = mSection.ssrcGroups || [];
	mSection.ssrcGroups = [];
	mSection.ssrcs = [];

	mSection.ssrcGroups.push({
		semantics: 'SIM',
		ssrcs: ssrc + ' ' + ssrc2 + ' ' + ssrc3
	});

	mSection.ssrcs.push({
		id: ssrc,
		attribute: 'cname',
		value: cname
	});

	mSection.ssrcs.push({
		id: ssrc,
		attribute: 'msid',
		value: msid + ' ' + track.id
	});

	mSection.ssrcs.push({
		id: ssrc2,
		attribute: 'cname',
		value: cname
	});

	mSection.ssrcs.push({
		id: ssrc2,
		attribute: 'msid',
		value: msid + ' ' + track.id
	});

	mSection.ssrcs.push({
		id: ssrc3,
		attribute: 'cname',
		value: cname
	});

	mSection.ssrcs.push({
		id: ssrc3,
		attribute: 'msid',
		value: msid + ' ' + track.id
	});

	if (rtxSsrc) {
		var rtxSsrc2 = rtxSsrc + 1;
		var rtxSsrc3 = rtxSsrc + 2;

		mSection.ssrcGroups.push({
			semantics: 'FID',
			ssrcs: ssrc + ' ' + rtxSsrc
		});

		mSection.ssrcs.push({
			id: rtxSsrc,
			attribute: 'cname',
			value: cname
		});

		mSection.ssrcs.push({
			id: rtxSsrc,
			attribute: 'msid',
			value: msid + ' ' + track.id
		});

		mSection.ssrcGroups.push({
			semantics: 'FID',
			ssrcs: ssrc2 + ' ' + rtxSsrc2
		});

		mSection.ssrcs.push({
			id: rtxSsrc2,
			attribute: 'cname',
			value: cname
		});

		mSection.ssrcs.push({
			id: rtxSsrc2,
			attribute: 'msid',
			value: msid + ' ' + track.id
		});

		mSection.ssrcGroups.push({
			semantics: 'FID',
			ssrcs: ssrc3 + ' ' + rtxSsrc3
		});

		mSection.ssrcs.push({
			id: rtxSsrc3,
			attribute: 'cname',
			value: cname
		});

		mSection.ssrcs.push({
			id: rtxSsrc3,
			attribute: 'msid',
			value: msid + ' ' + track.id
		});
	}
}

function findMediaSection(sdpObj, track, mid) {
	var mSection = void 0;

	if (mid !== null && mid !== undefined) {
		mid = String(mid);

		mSection = (sdpObj.media || []).find(function (m) {
			return String(m.mid) === mid;
		});

		if (!mSection) throw new Error('SDP section with mid=' + mid + ' not found');
	} else {
		mSection = (sdpObj.media || []).find(function (m) {
			return m.type === track.kind && m.msid && m.msid.split(' ')[1] === track.id;
		});

		if (!mSection) throw new Error('SDP section with a=msid containing track.id=' + track.id + ' not found');
	}

	return mSection;
}

/***/ }),

/***/ "./lib/mslib/index.js":
/*!****************************!*\
  !*** ./lib/mslib/index.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.internals = exports.Room = undefined;

var _promise = __webpack_require__(/*! babel-runtime/core-js/promise */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js");

var _promise2 = _interopRequireDefault(_promise);

exports.setDeviceHandler = setDeviceHandler;
exports.isDeviceSupported = isDeviceSupported;
exports.getDeviceInfo = getDeviceInfo;
exports.checkCapabilitiesForRoom = checkCapabilitiesForRoom;

var _ortc = __webpack_require__(/*! ./ortc */ "./lib/mslib/ortc.js");

var ortc = _interopRequireWildcard(_ortc);

var _Device = __webpack_require__(/*! ./Device */ "./lib/mslib/Device.js");

var _Device2 = _interopRequireDefault(_Device);

var _Room = __webpack_require__(/*! ./Room */ "./lib/mslib/Room.js");

var _Room2 = _interopRequireDefault(_Room);

var _internals = __webpack_require__(/*! ./internals */ "./lib/mslib/internals.js");

var internals = _interopRequireWildcard(_internals);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * mediasoup-client v2.4.9.
 *
 * Provides a custom RTC handler class and avoid auto-detection. Useful
 * for making mediasoup-client work with custom devices.
 *
 * NOTE: This function must be called upon library load.
 *
 * @param {Class} handler - A handler class.
 * @param {Object} [metadata] - Handler metadata.
 * @param {String} [metadata.flag] - Handler flag.
 * @param {String} [metadata.name] - Handler name.
 * @param {String} [metadata.version] - Handler version.
 * @param {Object} [metadata.bowser] - Handler bowser Object.
 */
function setDeviceHandler(handler, metadata) {
  _Device2.default.setHandler(handler, metadata);
}

/**
 * Whether the current browser or device is supported.
 *
 * @return {Boolean}
 *
 * @example
 * isDeviceSupported()
 * // => true
 */
function isDeviceSupported() {
  return _Device2.default.isSupported();
}

/**
 * Get information regarding the current browser or device.
 *
 * @return {Object} - Object with `name` (String) and version {String}.
 *
 * @example
 * getDeviceInfo()
 * // => { flag: 'chrome', name: 'Chrome', version: '59.0', bowser: {} }
 */
function getDeviceInfo() {
  return {
    flag: _Device2.default.getFlag(),
    name: _Device2.default.getName(),
    version: _Device2.default.getVersion(),
    bowser: _Device2.default.getBowser()
  };
}

/**
 * Check whether this device/browser can send/receive audio/video in a room
 * whose RTP capabilities are given.
 *
 * @param {Object} Room RTP capabilities.
 *
 * @return {Promise} Resolves to an Object with 'audio' and 'video' Booleans.
 */
function checkCapabilitiesForRoom(roomRtpCapabilities) {
  if (!_Device2.default.isSupported()) return _promise2.default.reject(new Error('current browser/device not supported'));

  return _Device2.default.Handler.getNativeRtpCapabilities().then(function (nativeRtpCapabilities) {
    var extendedRtpCapabilities = ortc.getExtendedRtpCapabilities(nativeRtpCapabilities, roomRtpCapabilities);

    return {
      audio: ortc.canSend('audio', extendedRtpCapabilities),
      video: ortc.canSend('video', extendedRtpCapabilities)
    };
  });
}

/**
 * Expose the Room class.
 *
 * @example
 * const room = new Room();`
 */
exports.Room = _Room2.default;

/**
 * Expose internals.
 */

exports.internals = internals;

/**
 * REF: Base upon the stabile release es5-lib's version of mediasoup-client 2.4.9.
 * NOTE: Carefully modify there folder files especially in heandlers/ for Full Compatibility broswers
 * Changelogs:
 * Get peerconnect sates. date:
 * Get sender. date: 8/20/2019
 * Remove Sender. date: 8/20/2019
 * Use ES6. date: 10/10/2019
 */

/***/ }),

/***/ "./lib/mslib/internals.js":
/*!********************************!*\
  !*** ./lib/mslib/internals.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.RemotePlainRtpSdp = exports.RemotePlanBSdp = exports.RemoteUnifiedPlanSdp = exports.sdpPlainRtpUtils = exports.sdpPlanBUtils = exports.sdpUnifiedPlanUtils = exports.sdpCommonUtils = exports.ortc = exports.utils = exports.EnhancedEventEmitter = exports.Logger = undefined;

var _Logger = __webpack_require__(/*! ./Logger */ "./lib/mslib/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

var _EnhancedEventEmitter = __webpack_require__(/*! ./EnhancedEventEmitter */ "./lib/mslib/EnhancedEventEmitter.js");

var _EnhancedEventEmitter2 = _interopRequireDefault(_EnhancedEventEmitter);

var _utils = __webpack_require__(/*! ./utils */ "./lib/mslib/utils.js");

var utils = _interopRequireWildcard(_utils);

var _ortc = __webpack_require__(/*! ./ortc */ "./lib/mslib/ortc.js");

var ortc = _interopRequireWildcard(_ortc);

var _commonUtils = __webpack_require__(/*! ./handlers/sdp/commonUtils */ "./lib/mslib/handlers/sdp/commonUtils.js");

var sdpCommonUtils = _interopRequireWildcard(_commonUtils);

var _unifiedPlanUtils = __webpack_require__(/*! ./handlers/sdp/unifiedPlanUtils */ "./lib/mslib/handlers/sdp/unifiedPlanUtils.js");

var sdpUnifiedPlanUtils = _interopRequireWildcard(_unifiedPlanUtils);

var _planBUtils = __webpack_require__(/*! ./handlers/sdp/planBUtils */ "./lib/mslib/handlers/sdp/planBUtils.js");

var sdpPlanBUtils = _interopRequireWildcard(_planBUtils);

var _plainRtpUtils = __webpack_require__(/*! ./handlers/sdp/plainRtpUtils */ "./lib/mslib/handlers/sdp/plainRtpUtils.js");

var sdpPlainRtpUtils = _interopRequireWildcard(_plainRtpUtils);

var _RemoteUnifiedPlanSdp = __webpack_require__(/*! ./handlers/sdp/RemoteUnifiedPlanSdp */ "./lib/mslib/handlers/sdp/RemoteUnifiedPlanSdp.js");

var _RemoteUnifiedPlanSdp2 = _interopRequireDefault(_RemoteUnifiedPlanSdp);

var _RemotePlanBSdp = __webpack_require__(/*! ./handlers/sdp/RemotePlanBSdp */ "./lib/mslib/handlers/sdp/RemotePlanBSdp.js");

var _RemotePlanBSdp2 = _interopRequireDefault(_RemotePlanBSdp);

var _RemotePlainRtpSdp = __webpack_require__(/*! ./handlers/sdp/RemotePlainRtpSdp */ "./lib/mslib/handlers/sdp/RemotePlainRtpSdp.js");

var _RemotePlainRtpSdp2 = _interopRequireDefault(_RemotePlainRtpSdp);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.Logger = _Logger2.default;
exports.EnhancedEventEmitter = _EnhancedEventEmitter2.default;
exports.utils = utils;
exports.ortc = ortc;
exports.sdpCommonUtils = sdpCommonUtils;
exports.sdpUnifiedPlanUtils = sdpUnifiedPlanUtils;
exports.sdpPlanBUtils = sdpPlanBUtils;
exports.sdpPlainRtpUtils = sdpPlainRtpUtils;
exports.RemoteUnifiedPlanSdp = _RemoteUnifiedPlanSdp2.default;
exports.RemotePlanBSdp = _RemotePlanBSdp2.default;
exports.RemotePlainRtpSdp = _RemotePlainRtpSdp2.default; /**
                                                          * This module is intended for custom handler developers and exposes internal
                                                          * API and utilities. No public documentation is provided.
                                                          */

/***/ }),

/***/ "./lib/mslib/ortc.js":
/*!***************************!*\
  !*** ./lib/mslib/ortc.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _getIterator2 = __webpack_require__(/*! babel-runtime/core-js/get-iterator */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/get-iterator.js");

var _getIterator3 = _interopRequireDefault(_getIterator2);

exports.getExtendedRtpCapabilities = getExtendedRtpCapabilities;
exports.getRtpCapabilities = getRtpCapabilities;
exports.getUnsupportedCodecs = getUnsupportedCodecs;
exports.canSend = canSend;
exports.canReceive = canReceive;
exports.getSendingRtpParameters = getSendingRtpParameters;
exports.getReceivingFullRtpParameters = getReceivingFullRtpParameters;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Generate extended RTP capabilities for sending and receiving.
 *
 * @param {RTCRtpCapabilities} localCaps - Local capabilities.
 * @param {RTCRtpCapabilities} remoteCaps - Remote capabilities.
 *
 * @return {RTCExtendedRtpCapabilities}
 */
function getExtendedRtpCapabilities(localCaps, remoteCaps) {
	var extendedCaps = {
		codecs: [],
		headerExtensions: [],
		fecMechanisms: []
	};

	// Match media codecs and keep the order preferred by remoteCaps.

	var _loop = function _loop(remoteCodec) {
		// TODO: Ignore pseudo-codecs and feature codecs.
		if (remoteCodec.name === 'rtx') return 'continue';

		var matchingLocalCodec = (localCaps.codecs || []).find(function (localCodec) {
			return matchCapCodecs(localCodec, remoteCodec);
		});

		if (matchingLocalCodec) {
			var extendedCodec = {
				name: remoteCodec.name,
				mimeType: remoteCodec.mimeType,
				kind: remoteCodec.kind,
				clockRate: remoteCodec.clockRate,
				sendPayloadType: matchingLocalCodec.preferredPayloadType,
				sendRtxPayloadType: null,
				recvPayloadType: remoteCodec.preferredPayloadType,
				recvRtxPayloadType: null,
				channels: remoteCodec.channels,
				rtcpFeedback: reduceRtcpFeedback(matchingLocalCodec, remoteCodec),
				parameters: remoteCodec.parameters
			};

			if (!extendedCodec.channels) delete extendedCodec.channels;

			extendedCaps.codecs.push(extendedCodec);
		}
	};

	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {
		for (var _iterator = (0, _getIterator3.default)(remoteCaps.codecs || []), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
			var remoteCodec = _step.value;

			var _ret = _loop(remoteCodec);

			if (_ret === 'continue') continue;
		}

		// Match RTX codecs.
	} catch (err) {
		_didIteratorError = true;
		_iteratorError = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion && _iterator.return) {
				_iterator.return();
			}
		} finally {
			if (_didIteratorError) {
				throw _iteratorError;
			}
		}
	}

	var _loop2 = function _loop2(extendedCodec) {
		var matchingLocalRtxCodec = (localCaps.codecs || []).find(function (localCodec) {
			return localCodec.name === 'rtx' && localCodec.parameters.apt === extendedCodec.sendPayloadType;
		});

		var matchingRemoteRtxCodec = (remoteCaps.codecs || []).find(function (remoteCodec) {
			return remoteCodec.name === 'rtx' && remoteCodec.parameters.apt === extendedCodec.recvPayloadType;
		});

		if (matchingLocalRtxCodec && matchingRemoteRtxCodec) {
			extendedCodec.sendRtxPayloadType = matchingLocalRtxCodec.preferredPayloadType;
			extendedCodec.recvRtxPayloadType = matchingRemoteRtxCodec.preferredPayloadType;
		}
	};

	var _iteratorNormalCompletion2 = true;
	var _didIteratorError2 = false;
	var _iteratorError2 = undefined;

	try {
		for (var _iterator2 = (0, _getIterator3.default)(extendedCaps.codecs || []), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
			var extendedCodec = _step2.value;

			_loop2(extendedCodec);
		}

		// Match header extensions.
	} catch (err) {
		_didIteratorError2 = true;
		_iteratorError2 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion2 && _iterator2.return) {
				_iterator2.return();
			}
		} finally {
			if (_didIteratorError2) {
				throw _iteratorError2;
			}
		}
	}

	var _loop3 = function _loop3(remoteExt) {
		var matchingLocalExt = (localCaps.headerExtensions || []).find(function (localExt) {
			return matchCapHeaderExtensions(localExt, remoteExt);
		});

		if (matchingLocalExt) {
			var extendedExt = {
				kind: remoteExt.kind,
				uri: remoteExt.uri,
				sendId: matchingLocalExt.preferredId,
				recvId: remoteExt.preferredId
			};

			extendedCaps.headerExtensions.push(extendedExt);
		}
	};

	var _iteratorNormalCompletion3 = true;
	var _didIteratorError3 = false;
	var _iteratorError3 = undefined;

	try {
		for (var _iterator3 = (0, _getIterator3.default)(remoteCaps.headerExtensions || []), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
			var remoteExt = _step3.value;

			_loop3(remoteExt);
		}
	} catch (err) {
		_didIteratorError3 = true;
		_iteratorError3 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion3 && _iterator3.return) {
				_iterator3.return();
			}
		} finally {
			if (_didIteratorError3) {
				throw _iteratorError3;
			}
		}
	}

	return extendedCaps;
}

/**
 * Generate RTP capabilities for receiving media based on the given extended
 * RTP capabilities.
 *
 * @param {RTCExtendedRtpCapabilities} extendedRtpCapabilities
 *
 * @return {RTCRtpCapabilities}
 */
function getRtpCapabilities(extendedRtpCapabilities) {
	var caps = {
		codecs: [],
		headerExtensions: [],
		fecMechanisms: []
	};

	var _iteratorNormalCompletion4 = true;
	var _didIteratorError4 = false;
	var _iteratorError4 = undefined;

	try {
		for (var _iterator4 = (0, _getIterator3.default)(extendedRtpCapabilities.codecs), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
			var capCodec = _step4.value;

			var codec = {
				name: capCodec.name,
				mimeType: capCodec.mimeType,
				kind: capCodec.kind,
				clockRate: capCodec.clockRate,
				preferredPayloadType: capCodec.recvPayloadType,
				channels: capCodec.channels,
				rtcpFeedback: capCodec.rtcpFeedback,
				parameters: capCodec.parameters
			};

			if (!codec.channels) delete codec.channels;

			caps.codecs.push(codec);

			// Add RTX codec.
			if (capCodec.recvRtxPayloadType) {
				var rtxCapCodec = {
					name: 'rtx',
					mimeType: capCodec.kind + '/rtx',
					kind: capCodec.kind,
					clockRate: capCodec.clockRate,
					preferredPayloadType: capCodec.recvRtxPayloadType,
					parameters: {
						apt: capCodec.recvPayloadType
					}
				};

				caps.codecs.push(rtxCapCodec);
			}

			// TODO: In the future, we need to add FEC, CN, etc, codecs.
		}
	} catch (err) {
		_didIteratorError4 = true;
		_iteratorError4 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion4 && _iterator4.return) {
				_iterator4.return();
			}
		} finally {
			if (_didIteratorError4) {
				throw _iteratorError4;
			}
		}
	}

	var _iteratorNormalCompletion5 = true;
	var _didIteratorError5 = false;
	var _iteratorError5 = undefined;

	try {
		for (var _iterator5 = (0, _getIterator3.default)(extendedRtpCapabilities.headerExtensions), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
			var capExt = _step5.value;

			var ext = {
				kind: capExt.kind,
				uri: capExt.uri,
				preferredId: capExt.recvId
			};

			caps.headerExtensions.push(ext);
		}
	} catch (err) {
		_didIteratorError5 = true;
		_iteratorError5 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion5 && _iterator5.return) {
				_iterator5.return();
			}
		} finally {
			if (_didIteratorError5) {
				throw _iteratorError5;
			}
		}
	}

	caps.fecMechanisms = extendedRtpCapabilities.fecMechanisms;

	return caps;
}

/**
 * Get unsupported remote codecs.
 *
 * @param {RTCRtpCapabilities} remoteCaps - Remote capabilities.
 * @param {Array<Number>} mandatoryCodecPayloadTypes - List of codec PT values.
 * @param {RTCExtendedRtpCapabilities} extendedRtpCapabilities
 *
 * @return {Boolean}
 */
function getUnsupportedCodecs(remoteCaps, mandatoryCodecPayloadTypes, extendedRtpCapabilities) {
	// If not given just ignore.
	if (!Array.isArray(mandatoryCodecPayloadTypes)) return [];

	var unsupportedCodecs = [];
	var remoteCodecs = remoteCaps.codecs;
	var supportedCodecs = extendedRtpCapabilities.codecs;

	var _loop4 = function _loop4(pt) {
		if (!supportedCodecs.some(function (codec) {
			return codec.recvPayloadType === pt;
		})) {
			var unsupportedCodec = remoteCodecs.find(function (codec) {
				return codec.preferredPayloadType === pt;
			});

			if (!unsupportedCodec) throw new Error('mandatory codec PT ' + pt + ' not found in remote codecs');

			unsupportedCodecs.push(unsupportedCodec);
		}
	};

	var _iteratorNormalCompletion6 = true;
	var _didIteratorError6 = false;
	var _iteratorError6 = undefined;

	try {
		for (var _iterator6 = (0, _getIterator3.default)(mandatoryCodecPayloadTypes), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
			var pt = _step6.value;

			_loop4(pt);
		}
	} catch (err) {
		_didIteratorError6 = true;
		_iteratorError6 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion6 && _iterator6.return) {
				_iterator6.return();
			}
		} finally {
			if (_didIteratorError6) {
				throw _iteratorError6;
			}
		}
	}

	return unsupportedCodecs;
}

/**
 * Whether media can be sent based on the given RTP capabilities.
 *
 * @param {String} kind
 * @param {RTCExtendedRtpCapabilities} extendedRtpCapabilities
 *
 * @return {Boolean}
 */
function canSend(kind, extendedRtpCapabilities) {
	return extendedRtpCapabilities.codecs.some(function (codec) {
		return codec.kind === kind;
	});
}

/**
 * Whether the given RTP parameters can be received with the given RTP
 * capabilities.
 *
 * @param {RTCRtpParameters} rtpParameters
 * @param {RTCExtendedRtpCapabilities} extendedRtpCapabilities
 *
 * @return {Boolean}
 */
function canReceive(rtpParameters, extendedRtpCapabilities) {
	if (rtpParameters.codecs.length === 0) return false;

	var firstMediaCodec = rtpParameters.codecs[0];

	return extendedRtpCapabilities.codecs.some(function (codec) {
		return codec.recvPayloadType === firstMediaCodec.payloadType;
	});
}

/**
 * Generate RTP parameters of the given kind for sending media.
 * Just the first media codec per kind is considered.
 * NOTE: muxId, encodings and rtcp fields are left empty.
 *
 * @param {kind} kind
 * @param {RTCExtendedRtpCapabilities} extendedRtpCapabilities
 *
 * @return {RTCRtpParameters}
 */
function getSendingRtpParameters(kind, extendedRtpCapabilities) {
	var params = {
		muxId: null,
		codecs: [],
		headerExtensions: [],
		encodings: [],
		rtcp: {}
	};

	var _iteratorNormalCompletion7 = true;
	var _didIteratorError7 = false;
	var _iteratorError7 = undefined;

	try {
		for (var _iterator7 = (0, _getIterator3.default)(extendedRtpCapabilities.codecs), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
			var capCodec = _step7.value;

			if (capCodec.kind !== kind) continue;

			var codec = {
				name: capCodec.name,
				mimeType: capCodec.mimeType,
				clockRate: capCodec.clockRate,
				payloadType: capCodec.sendPayloadType,
				channels: capCodec.channels,
				rtcpFeedback: capCodec.rtcpFeedback,
				parameters: capCodec.parameters
			};

			if (!codec.channels) delete codec.channels;

			params.codecs.push(codec);

			// Add RTX codec.
			if (capCodec.sendRtxPayloadType) {
				var rtxCodec = {
					name: 'rtx',
					mimeType: capCodec.kind + '/rtx',
					clockRate: capCodec.clockRate,
					payloadType: capCodec.sendRtxPayloadType,
					parameters: {
						apt: capCodec.sendPayloadType
					}
				};

				params.codecs.push(rtxCodec);
			}

			// NOTE: We assume a single media codec plus an optional RTX codec for now.
			// TODO: In the future, we need to add FEC, CN, etc, codecs.
			// jove 2020/2/24 break;
		}
	} catch (err) {
		_didIteratorError7 = true;
		_iteratorError7 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion7 && _iterator7.return) {
				_iterator7.return();
			}
		} finally {
			if (_didIteratorError7) {
				throw _iteratorError7;
			}
		}
	}

	var _iteratorNormalCompletion8 = true;
	var _didIteratorError8 = false;
	var _iteratorError8 = undefined;

	try {
		for (var _iterator8 = (0, _getIterator3.default)(extendedRtpCapabilities.headerExtensions), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
			var capExt = _step8.value;

			if (capExt.kind && capExt.kind !== kind) continue;

			var ext = {
				uri: capExt.uri,
				id: capExt.sendId
			};

			params.headerExtensions.push(ext);
		}
	} catch (err) {
		_didIteratorError8 = true;
		_iteratorError8 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion8 && _iterator8.return) {
				_iterator8.return();
			}
		} finally {
			if (_didIteratorError8) {
				throw _iteratorError8;
			}
		}
	}

	return params;
}

/**
 * Generate RTP parameters of the given kind for receiving media.
 * All the media codecs per kind are considered. This is useful for generating
 * a SDP remote offer.
 * NOTE: muxId, encodings and rtcp fields are left empty.
 *
 * @param {String} kind
 * @param {RTCExtendedRtpCapabilities} extendedRtpCapabilities
 *
 * @return {RTCRtpParameters}
 */
function getReceivingFullRtpParameters(kind, extendedRtpCapabilities) {
	var params = {
		muxId: null,
		codecs: [],
		headerExtensions: [],
		encodings: [],
		rtcp: {}
	};

	var _iteratorNormalCompletion9 = true;
	var _didIteratorError9 = false;
	var _iteratorError9 = undefined;

	try {
		for (var _iterator9 = (0, _getIterator3.default)(extendedRtpCapabilities.codecs), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
			var capCodec = _step9.value;

			if (capCodec.kind !== kind) continue;

			var codec = {
				name: capCodec.name,
				mimeType: capCodec.mimeType,
				clockRate: capCodec.clockRate,
				payloadType: capCodec.recvPayloadType,
				channels: capCodec.channels,
				rtcpFeedback: capCodec.rtcpFeedback,
				parameters: capCodec.parameters
			};

			if (!codec.channels) delete codec.channels;

			params.codecs.push(codec);

			// Add RTX codec.
			if (capCodec.recvRtxPayloadType) {
				var rtxCodec = {
					name: 'rtx',
					mimeType: capCodec.kind + '/rtx',
					clockRate: capCodec.clockRate,
					payloadType: capCodec.recvRtxPayloadType,
					parameters: {
						apt: capCodec.recvPayloadType
					}
				};

				params.codecs.push(rtxCodec);
			}

			// TODO: In the future, we need to add FEC, CN, etc, codecs.
		}
	} catch (err) {
		_didIteratorError9 = true;
		_iteratorError9 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion9 && _iterator9.return) {
				_iterator9.return();
			}
		} finally {
			if (_didIteratorError9) {
				throw _iteratorError9;
			}
		}
	}

	var _iteratorNormalCompletion10 = true;
	var _didIteratorError10 = false;
	var _iteratorError10 = undefined;

	try {
		for (var _iterator10 = (0, _getIterator3.default)(extendedRtpCapabilities.headerExtensions), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
			var capExt = _step10.value;

			if (capExt.kind && capExt.kind !== kind) continue;

			var ext = {
				uri: capExt.uri,
				id: capExt.recvId
			};

			params.headerExtensions.push(ext);
		}
	} catch (err) {
		_didIteratorError10 = true;
		_iteratorError10 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion10 && _iterator10.return) {
				_iterator10.return();
			}
		} finally {
			if (_didIteratorError10) {
				throw _iteratorError10;
			}
		}
	}

	return params;
}

function matchCapCodecs(aCodec, bCodec) {
	var aMimeType = aCodec.mimeType.toLowerCase();
	var bMimeType = bCodec.mimeType.toLowerCase();

	if (aMimeType !== bMimeType) return false;

	if (aCodec.clockRate !== bCodec.clockRate) return false;

	if (aCodec.channels !== bCodec.channels) return false;

	// Match H264 parameters.
	if (aMimeType === 'video/h264') {
		var aPacketizationMode = (aCodec.parameters || {})['packetization-mode'] || 0;
		var bPacketizationMode = (bCodec.parameters || {})['packetization-mode'] || 0;

		if (aPacketizationMode !== bPacketizationMode) return false;
	}

	return true;
}

function matchCapHeaderExtensions(aExt, bExt) {
	if (aExt.kind && bExt.kind && aExt.kind !== bExt.kind) return false;

	if (aExt.uri !== bExt.uri) return false;

	return true;
}

function reduceRtcpFeedback(codecA, codecB) {
	var reducedRtcpFeedback = [];

	var _loop5 = function _loop5(aFb) {
		var matchingBFb = (codecB.rtcpFeedback || []).find(function (bFb) {
			return bFb.type === aFb.type && bFb.parameter === aFb.parameter;
		});

		if (matchingBFb) reducedRtcpFeedback.push(matchingBFb);
	};

	var _iteratorNormalCompletion11 = true;
	var _didIteratorError11 = false;
	var _iteratorError11 = undefined;

	try {
		for (var _iterator11 = (0, _getIterator3.default)(codecA.rtcpFeedback || []), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
			var aFb = _step11.value;

			_loop5(aFb);
		}
	} catch (err) {
		_didIteratorError11 = true;
		_iteratorError11 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion11 && _iterator11.return) {
				_iterator11.return();
			}
		} finally {
			if (_didIteratorError11) {
				throw _iteratorError11;
			}
		}
	}

	return reducedRtcpFeedback;
}

/***/ }),

/***/ "./lib/mslib/utils.js":
/*!****************************!*\
  !*** ./lib/mslib/utils.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = __webpack_require__(/*! babel-runtime/core-js/json/stringify */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/json/stringify.js");

var _stringify2 = _interopRequireDefault(_stringify);

exports.randomNumber = randomNumber;
exports.clone = clone;

var _randomNumber = __webpack_require__(/*! random-number */ "./node_modules/_random-number@0.0.9@random-number/index.js");

var _randomNumber2 = _interopRequireDefault(_randomNumber);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var randomNumberGenerator = _randomNumber2.default.generator({
  min: 10000000,
  max: 99999999,
  integer: true
});

/**
 * Generates a random positive number between 10000000 and 99999999.
 *
 * @return {Number}
 */
function randomNumber() {
  return randomNumberGenerator();
}

/**
 * Clones the given Object/Array.
 *
 * @param {Object|Array} obj
 *
 * @return {Object|Array}
 */
function clone(obj) {
  return JSON.parse((0, _stringify2.default)(obj));
}

/***/ }),

/***/ "./lib/protoo/Message.js":
/*!*******************************!*\
  !*** ./lib/protoo/Message.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(/*! babel-runtime/helpers/typeof */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/typeof.js");

var _typeof3 = _interopRequireDefault(_typeof2);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = __webpack_require__(/*! ../logger */ "./lib/logger.js")('protooMessage');
var utils = __webpack_require__(/*! ./utils */ "./lib/protoo/utils.js");

var Message = function () {
	function Message() {
		(0, _classCallCheck3.default)(this, Message);
	}

	(0, _createClass3.default)(Message, null, [{
		key: 'parse',
		value: function parse(raw) {
			var object = void 0;
			var message = {};

			try {
				object = JSON.parse(raw);
			} catch (error) {
				logger.error('parse() | invalid JSON: %s', error);

				return;
			}

			if ((typeof object === 'undefined' ? 'undefined' : (0, _typeof3.default)(object)) !== 'object' || Array.isArray(object)) {
				logger.error('parse() | not an object');

				return;
			}

			// Request.
			if (object.request) {
				message.request = true;

				if (typeof object.method !== 'string') {
					logger.error('parse() | missing/invalid method field');

					return;
				}

				if (typeof object.id !== 'number') {
					logger.error('parse() | missing/invalid id field');

					return;
				}

				message.id = object.id;

				message.method = object.method;
				message.data = object.data || {};
			}
			// Response.
			else if (object.response) {
					message.response = true;

					if (typeof object.id !== 'number') {
						logger.error('parse() | missing/invalid id field');

						return;
					}

					message.id = object.id;

					// Success.
					if (object.ok) {
						message.ok = true;
						message.data = object.data || {};
					}
					// Error.
					else {
							message.errorCode = object.errorCode;
							message.errorReason = object.errorReason;
						}
				}
				// Notification.
				else if (object.notification) {
						message.notification = true;

						if (typeof object.method !== 'string') {
							logger.error('parse() | missing/invalid method field');

							return;
						}

						message.method = object.method;
						message.data = object.data || {};
					}
					// Invalid.
					else {
							logger.error('parse() | missing request/response field');

							return;
						}

			return message;
		}
	}, {
		key: 'requestFactory',
		value: function requestFactory(method, data) {
			var request = {
				request: true,
				id: utils.randomNumber(),
				method: method,
				data: data || {}
			};

			return request;
		}
	}, {
		key: 'successResponseFactory',
		value: function successResponseFactory(request, data) {
			var response = {
				response: true,
				id: request.id,
				ok: true,
				data: data || {}
			};

			return response;
		}
	}, {
		key: 'errorResponseFactory',
		value: function errorResponseFactory(request, errorCode, errorReason) {
			var response = {
				response: true,
				id: request.id,
				errorCode: errorCode,
				errorReason: errorReason
			};

			return response;
		}
	}, {
		key: 'notificationFactory',
		value: function notificationFactory(method, data) {
			var notification = {
				notification: true,
				method: method,
				data: data || {}
			};

			return notification;
		}
	}]);
	return Message;
}();

module.exports = Message;

/***/ }),

/***/ "./lib/protoo/Peer.js":
/*!****************************!*\
  !*** ./lib/protoo/Peer.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _stringify = __webpack_require__(/*! babel-runtime/core-js/json/stringify */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/json/stringify.js");

var _stringify2 = _interopRequireDefault(_stringify);

var _promise = __webpack_require__(/*! babel-runtime/core-js/promise */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js");

var _promise2 = _interopRequireDefault(_promise);

var _map = __webpack_require__(/*! babel-runtime/core-js/map */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/map.js");

var _map2 = _interopRequireDefault(_map);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EventEmitter = __webpack_require__(/*! events */ "./node_modules/_events@3.1.0@events/events.js").EventEmitter;
var logger = __webpack_require__(/*! ../logger */ "./lib/logger.js")('protooPeer');
var Message = __webpack_require__(/*! ./Message */ "./lib/protoo/Message.js");
var transports = __webpack_require__(/*! ./transports */ "./lib/protoo/transports/index.js");

// Max time waiting for a response.
var REQUEST_TIMEOUT = 20000;

var Peer = function (_EventEmitter) {
	(0, _inherits3.default)(Peer, _EventEmitter);

	function Peer(protooUrl) {
		(0, _classCallCheck3.default)(this, Peer);

		logger.debug('constructor() protooUrl: ' + protooUrl);

		var _this = (0, _possibleConstructorReturn3.default)(this, (Peer.__proto__ || (0, _getPrototypeOf2.default)(Peer)).call(this));

		_this.setMaxListeners(Infinity);

		_this._protooUrl = protooUrl;

		// Transport.
		_this._transport = new transports.WebSocketTransport(protooUrl);

		// Closed flag.
		_this._closed = false;

		// Connected flag.
		// @type {Boolean}
		_this._connected = false;

		// Custom data object.
		_this._data = {};

		// Map of sent requests' handlers indexed by request.id.
		_this._requestHandlers = new _map2.default();

		// Handle transport.
		_this._handleTransport();
		return _this;
	}

	(0, _createClass3.default)(Peer, [{
		key: 'send',
		value: function send(method, data) {
			var _this2 = this;

			if (!this.connected) {
				return;
			}

			// 
			var request = Message.requestFactory(method, data);

			return this._transport.send(request).then(function () {
				return new _promise2.default(function (pResolve, pReject) {
					var handler = {
						resolve: function resolve(data2) {
							if (!_this2._requestHandlers.delete(request.id)) return;

							clearTimeout(handler.timer);
							pResolve(data2);
						},

						reject: function reject(error) {
							if (!_this2._requestHandlers.delete(request.id)) return;

							clearTimeout(handler.timer);
							pReject(error);
						},

						timer: setTimeout(function () {
							if (!_this2._requestHandlers.delete(request.id)) return;

							pReject(new Error('request timeout'));
						}, REQUEST_TIMEOUT),

						close: function close() {
							clearTimeout(handler.timer);
							pReject(new Error('peer closed'));
						}
					};

					// Add handler stuff to the Map.
					_this2._requestHandlers.set(request.id, handler);
				});
			});
		}
	}, {
		key: 'notify',
		value: function notify(method, data) {
			var notification = Message.notificationFactory(method, data);

			return this._transport.send(notification);
		}
	}, {
		key: 'close',
		value: function close() {
			logger.debug('close()');

			if (this._closed) return;

			this._closed = true;

			// Close transport.
			this._transport.close();

			// Close every pending request handler.
			this._requestHandlers.forEach(function (handler) {
				return handler.close();
			});

			// Emit 'close' event.
			this.emit('close');
		}
	}, {
		key: '_handleTransport',
		value: function _handleTransport() {
			var _this3 = this;

			if (this._transport.closed) {
				this._closed = true;
				setTimeout(function () {
					return _this3.emit('close');
				});

				return;
			}

			this._transport.on('connecting', function (currentAttempt) {
				logger.debug('_handleTransport() _transport event [connecting] - [currentAttempt: ' + currentAttempt + ']');

				_this3.emit('connecting', currentAttempt);
			});

			this._transport.on('open', function () {
				if (_this3._closed) return;

				logger.debug('_handleTransport() _transport event [open]');

				_this3._connected = true;

				// Emit 'open' event.
				_this3.emit('open');
			});

			this._transport.on('conn-interrupt', function () {
				if (_this3._closed) return;

				logger.debug('_handleTransport() _transport event [conn-interrupt]');

				_this3._connected = false;

				// Emit 'conn-interrupt' event.
				_this3.emit('conn-interrupt');
			});

			this._transport.on('reinit', function () {
				if (_this3._closed) return;

				logger.debug('_handleTransport(0 _transport event [reinit]');

				_this3._connected = true;

				// Emit 'reinit' event.
				_this3.emit('reinit');
			});

			this._transport.on('conn-reconn', function () {
				if (_this3._closed) return;

				logger.debug('_handleTransport() _transport event [conn-reconn]');

				_this3._connected = true;

				// Emit 'conn-reconn' event.
				_this3.emit('conn-reconn');
			});

			// 从 WebSocketTransport 层上报的 disconnected 事件，表示当前已彻底断链（已经过多次重试，最终失败）
			this._transport.on('disconnected', function () {
				logger.debug('_handleTransport() _transport [disconnected]');

				_this3._connected = false;

				_this3.emit('disconnected');
			});

			this._transport.on('failed', function (currentAttempt) {
				logger.debug('_handleTransport() _transport event [failed] - [currentAttempt: ' + currentAttempt + ']');

				_this3._connected = false;

				_this3.emit('failed', currentAttempt);
			});

			this._transport.on('close', function () {
				if (_this3._closed) return;

				_this3._closed = true;

				_this3._connected = false;

				logger.debug('_handleTransport() _transport event [close]');

				// Emit 'close' event.
				_this3.emit('close');
			});

			this._transport.on('message', function (message) {
				if (message.request) {
					_this3._handleRequest(message);
				} else if (message.response) {
					_this3._handleResponse(message);
				} else if (message.notification) {
					_this3._handleNotification(message);
				}
			});
		}
	}, {
		key: '_handleRequest',
		value: function _handleRequest(request) {
			var _this4 = this;

			this.emit('request',
			// Request.
			request,
			// accept() function.
			function (data) {
				var response = Message.successResponseFactory(request, data);

				_this4._transport.send(response).catch(function (error) {
					logger.warn('_handleRequest() accept() _transport.send error - ' + (0, _stringify2.default)(error));
				});
			},
			// reject() function.
			function (errorCode, errorReason) {
				if (errorCode instanceof Error) {
					errorReason = errorCode.toString();
					errorCode = 500;
				} else if (typeof errorCode === 'number' && errorReason instanceof Error) {
					errorReason = errorReason.toString();
				}

				var response = Message.errorResponseFactory(request, errorCode, errorReason);

				_this4._transport.send(response).catch(function (error) {
					logger.warn('_handleRequest() reject() error - ' + (0, _stringify2.default)(error));
				});
			});
		}
	}, {
		key: '_handleResponse',
		value: function _handleResponse(response) {
			var handler = this._requestHandlers.get(response.id);

			if (!handler) {
				logger.error('_handleResponse() received response does not match any sent request');

				return;
			}

			if (response.ok) {
				handler.resolve(response.data);
			} else {
				var error = new Error(response.errorReason);

				error.code = response.errorCode;
				handler.reject(error);
			}
		}
	}, {
		key: '_handleNotification',
		value: function _handleNotification(notification) {
			this.emit('notification', notification);
		}
	}, {
		key: 'data',
		get: function get() {
			return this._data;
		},
		set: function set(obj) {
			this._data = obj || {};
		}
	}, {
		key: 'closed',
		get: function get() {
			return this._closed;
		}

		/**
   * Whether the Peer is connected.
   *
   * @returns {Boolean}
   */

	}, {
		key: 'connected',
		get: function get() {
			return this._connected;
		}
	}]);
	return Peer;
}(EventEmitter);

module.exports = Peer;

/***/ }),

/***/ "./lib/protoo/index.js":
/*!*****************************!*\
  !*** ./lib/protoo/index.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Peer = __webpack_require__(/*! ./Peer */ "./lib/protoo/Peer.js");
var transports = __webpack_require__(/*! ./transports */ "./lib/protoo/transports/index.js");

module.exports = {
	/**
  * Expose Peer.
  */
	Peer: Peer,

	/**
  * Expose the built-in WebSocketTransport.
  */
	WebSocketTransport: transports.WebSocketTransport
};
/**
 * REF: Base upon Protoo-client 3.0.0.
 * Changelogs:
 */

/***/ }),

/***/ "./lib/protoo/transports/WebSocketTransport.js":
/*!*****************************************************!*\
  !*** ./lib/protoo/transports/WebSocketTransport.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _promise = __webpack_require__(/*! babel-runtime/core-js/promise */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js");

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _stringify = __webpack_require__(/*! babel-runtime/core-js/json/stringify */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/json/stringify.js");

var _stringify2 = _interopRequireDefault(_stringify);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EventEmitter = __webpack_require__(/*! events */ "./node_modules/_events@3.1.0@events/events.js").EventEmitter;
var W3CWebSocket = __webpack_require__(/*! websocket */ "./node_modules/_websocket@1.0.31@websocket/lib/browser.js").w3cwebsocket;
var retry = __webpack_require__(/*! retry */ "./node_modules/_retry@0.12.0@retry/index.js");
var logger = __webpack_require__(/*! ../../logger */ "./lib/logger.js")('protooWebSocketTransport');
var Message = __webpack_require__(/*! ../Message */ "./lib/protoo/Message.js");

var WS_SUBPROTOCOL = 'protoo';
var DEFAULT_RETRY_OPTIONS = {
	retries: 10,
	factor: 2,
	minTimeout: 1 * 1000,
	maxTimeout: 4 * 1000
};

var WebSocketTransport = function (_EventEmitter) {
	(0, _inherits3.default)(WebSocketTransport, _EventEmitter);

	function WebSocketTransport(url, options) {
		(0, _classCallCheck3.default)(this, WebSocketTransport);

		logger.debug('constructor() - url: ' + url + ' options: ' + (0, _stringify2.default)(options));

		var _this = (0, _possibleConstructorReturn3.default)(this, (WebSocketTransport.__proto__ || (0, _getPrototypeOf2.default)(WebSocketTransport)).call(this));

		_this.setMaxListeners(Infinity);

		// Save URL and options.
		// 在 url 后追加 sid，用于 服务器端标识本客户端的该会话 （主要用于本客户端断网重连时标识用）
		var timestamp = Date.parse(new Date());
		var randNum = Math.round(Math.random() * 1000000000);

		_this._origUrl = url + '&sid=' + timestamp + '-' + randNum;
		_this._url = _this._origUrl;
		// 
		_this._options = options || {};

		// WebSocket instance.
		_this._ws = null;

		// 
		_this._xNeedReInit = false;

		// Closed flag.
		_this._closed = false;

		// 当前的连接状态
		_this._connected = false;

		// Set WebSocket
		_this._setWebSocket();
		return _this;
	}

	(0, _createClass3.default)(WebSocketTransport, [{
		key: 'send',
		value: function send(message) {
			if (this._closed) return _promise2.default.reject(new Error('transport closed'));

			try {
				this._ws.send((0, _stringify2.default)(message));

				return _promise2.default.resolve();
			} catch (error) {
				logger.warn('send() messge: ' + (0, _stringify2.default)(message) + ' error - ' + error.toString());

				return _promise2.default.reject(error);
			}
		}
	}, {
		key: 'close',
		value: function close() {
			logger.debug('close()');

			if (this._closed) return;

			this._xNeedReInit = false;

			// Don't wait for the WebSocket 'close' event, do it now.
			this._closed = true;
			this.emit('close', { code: 3000, reason: 'active close' });

			try {
				this._ws.onopen = null;
				this._ws.onclose = null;
				this._ws.onerror = null;
				this._ws.onmessage = null;
				this._ws.close();
			} catch (error) {
				logger.error('close() error - closing the WebSocket: ' + error.toString());
			}
		}
	}, {
		key: '_setWebSocket',
		value: function _setWebSocket() {
			var _this2 = this;

			var options = this._options;
			var operation = retry.operation(this._options.retry || DEFAULT_RETRY_OPTIONS);
			this._connected = false;

			operation.attempt(function (currentAttempt) {
				if (_this2._closed) {
					operation.stop();

					return;
				}

				// 
				if (_this2._ws != null) {
					_this2._ws.close();
					_this2._ws = null;
				}

				logger.debug('_setWebSocket() - currentAttempt: ' + currentAttempt);

				_this2._ws = new W3CWebSocket(_this2._url, WS_SUBPROTOCOL, options.origin, options.headers, options.requestOptions, options.clientConfig);

				_this2.emit('connecting', currentAttempt);

				_this2._ws.onopen = function (e) {
					if (_this2._closed) return;

					_this2._connected = true;

					// Emit 'open' event.
					var suffix = 'retry=true';
					if (_this2._url.indexOf(suffix, _this2._url.length - suffix.length) !== -1) {
						logger.debug('WebSocket event - [conn-reconn] - this._url: ' + _this2._url);

						_this2.emit('conn-reconn');
					} else {
						var evt = _this2._xNeedReInit ? 'reinit' : 'open';

						logger.debug('WebSocket event - [' + evt + '] - this._url: ' + _this2._url);

						// 将 _xNeedReInit 复位
						_this2._xNeedReInit = false;

						_this2.emit(evt);
					}
				};

				_this2._ws.onclose = function (event) {
					if (_this2._closed) return;

					// Emit 'conn-interrupt' event.
					_this2.emit('conn-interrupt', event);

					logger.warn('WebSocket event - [close] wasClean: ' + event.wasClean + ' code: ' + event.code + ' reason: ' + event.reason);

					// Don't retry if code is 4000 (closed by the server).
					if (event.code !== 4000) {
						// TODO : 未来再考虑对 3003 这种情况的重连恢复 -- 目前仅仅是彻底close
						_this2._xNeedReInit = event.code === 3003; // 如果关闭码为 3003 ，则要求客户端完全重新开始（设置retry）

						// If it was not connected, try again.
						if (!_this2._connected && !_this2._xNeedReInit) {
							// this.emit('failed', currentAttempt);

							if (_this2._closed) return;

							if (operation.retry(true)) return;
						} else {
							// If it was connected, start from scratch.
							operation.stop();

							if (_this2._closed) return;

							// 由于本次是 retry ，则在 url 后追加 retry=true
							// There have some issues on server then comments it now.
							_this2._url = _this2._xNeedReInit ? _this2._origUrl + '&timestamp=' + +new Date() : _this2._origUrl + '&timestamp=' + +new Date() + '&retry=true';

							logger.debug('WebSocket event - [close] event.code !== 4000 - retry websocket transport: ' + _this2._url);

							_this2._setWebSocket();

							return;
						}
					} else {
						_this2._xNeedReInit = false;

						// 消除 url 中的 retry=true
						_this2._url = _this2._origUrl + '&timestamp=' + +new Date();

						// 不再尝试重试，当前已进入最终断开状态，向上层抛出 [close] 事件
						_this2._closed = true;

						logger.debug('WebSocket event - [close] event.code === 4000 - Emit [close]');
						// Emit 'close' event.
						_this2.emit('close', event);
					}
				};

				_this2._ws.onerror = function (e) {
					if (_this2._closed) return;

					logger.error('WebSocket event [error] - ' + e.toString() + ' - nothing todo.');
				};

				_this2._ws.onmessage = function (event) {
					if (_this2._closed) return;

					var message = Message.parse(event.data);

					if (!message) return;

					if (_this2.listenerCount('message') === 0) {
						logger.warn('no listeners for WebSocket event [message] - ignoring received message');

						return;
					}

					// Emit 'message' event.
					_this2.emit('message', message);
				};
			});
		}
	}, {
		key: 'connected',
		get: function get() {
			return this._connected;
		}
	}, {
		key: 'closed',
		get: function get() {
			return this._closed;
		}
	}]);
	return WebSocketTransport;
}(EventEmitter);

module.exports = WebSocketTransport;

/***/ }),

/***/ "./lib/protoo/transports/index.js":
/*!****************************************!*\
  !*** ./lib/protoo/transports/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var WebSocketTransport = __webpack_require__(/*! ./WebSocketTransport */ "./lib/protoo/transports/WebSocketTransport.js");

module.exports = {
	WebSocketTransport: WebSocketTransport
};

/***/ }),

/***/ "./lib/protoo/utils.js":
/*!*****************************!*\
  !*** ./lib/protoo/utils.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var randomNumber = __webpack_require__(/*! random-number */ "./node_modules/_random-number@0.0.9@random-number/index.js");

var randomNumberGenerator = randomNumber.generator({
	min: 1000000,
	max: 9999999,
	integer: true
});

module.exports = {
	randomNumber: randomNumberGenerator
};

/***/ }),

/***/ "./lib/sdpform/grammar.js":
/*!********************************!*\
  !*** ./lib/sdpform/grammar.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _keys = __webpack_require__(/*! babel-runtime/core-js/object/keys */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/keys.js");

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var grammar = module.exports = {
  v: [{
    name: 'version',
    reg: /^(\d*)$/
  }],
  o: [{ //o=- 20518 0 IN IP4 203.0.113.1
    // NB: sessionId will be a String in most cases because it is huge
    name: 'origin',
    reg: /^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,
    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],
    format: '%s %s %d %s IP%d %s'
  }],
  // default parsing of these only (though some of these feel outdated)
  s: [{ name: 'name' }],
  i: [{ name: 'description' }],
  u: [{ name: 'uri' }],
  e: [{ name: 'email' }],
  p: [{ name: 'phone' }],
  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..
  r: [{ name: 'repeats' }], // TODO: this one can also be parsed properly
  //k: [{}], // outdated thing ignored
  t: [{ //t=0 0
    name: 'timing',
    reg: /^(\d*) (\d*)/,
    names: ['start', 'stop'],
    format: '%d %d'
  }],
  c: [{ //c=IN IP4 10.47.197.26
    name: 'connection',
    reg: /^IN IP(\d) (\S*)/,
    names: ['version', 'ip'],
    format: 'IN IP%d %s'
  }],
  b: [{ //b=AS:4000
    push: 'bandwidth',
    reg: /^(TIAS|AS|CT|RR|RS):(\d*)/,
    names: ['type', 'limit'],
    format: '%s:%s'
  }],
  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31
    // NB: special - pushes to session
    // TODO: rtp/fmtp should be filtered by the payloads found here?
    reg: /^(\w*) (\d*) ([\w\/]*)(?: (.*))?/,
    names: ['type', 'port', 'protocol', 'payloads'],
    format: '%s %d %s %s'
  }],
  a: [{ //a=rtpmap:110 opus/48000/2
    push: 'rtp',
    reg: /^rtpmap:(\d*) ([\w\-\.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,
    names: ['payload', 'codec', 'rate', 'encoding'],
    format: function format(o) {
      return o.encoding ? 'rtpmap:%d %s/%s/%s' : o.rate ? 'rtpmap:%d %s/%s' : 'rtpmap:%d %s';
    }
  }, { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000
    //a=fmtp:111 minptime=10; useinbandfec=1
    push: 'fmtp',
    reg: /^fmtp:(\d*) ([\S| ]*)/,
    names: ['payload', 'config'],
    format: 'fmtp:%d %s'
  }, { //a=control:streamid=0
    name: 'control',
    reg: /^control:(.*)/,
    format: 'control:%s'
  }, { //a=rtcp:65179 IN IP4 193.84.77.194
    name: 'rtcp',
    reg: /^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,
    names: ['port', 'netType', 'ipVer', 'address'],
    format: function format(o) {
      return o.address != null ? 'rtcp:%d %s IP%d %s' : 'rtcp:%d';
    }
  }, { //a=rtcp-fb:98 trr-int 100
    push: 'rtcpFbTrrInt',
    reg: /^rtcp-fb:(\*|\d*) trr-int (\d*)/,
    names: ['payload', 'value'],
    format: 'rtcp-fb:%d trr-int %d'
  }, { //a=rtcp-fb:98 nack rpsi
    push: 'rtcpFb',
    reg: /^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,
    names: ['payload', 'type', 'subtype'],
    format: function format(o) {
      return o.subtype != null ? 'rtcp-fb:%s %s %s' : 'rtcp-fb:%s %s';
    }
  }, { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
    //a=extmap:1/recvonly URI-gps-string
    push: 'ext',
    reg: /^extmap:(\d+)(?:\/(\w+))? (\S*)(?: (\S*))?/,
    names: ['value', 'direction', 'uri', 'config'],
    format: function format(o) {
      return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');
    }
  }, { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32
    push: 'crypto',
    reg: /^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,
    names: ['id', 'suite', 'config', 'sessionConfig'],
    format: function format(o) {
      return o.sessionConfig != null ? 'crypto:%d %s %s %s' : 'crypto:%d %s %s';
    }
  }, { //a=setup:actpass
    name: 'setup',
    reg: /^setup:(\w*)/,
    format: 'setup:%s'
  }, { //a=mid:1
    name: 'mid',
    reg: /^mid:([^\s]*)/,
    format: 'mid:%s'
  }, { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a
    name: 'msid',
    reg: /^msid:(.*)/,
    format: 'msid:%s'
  }, { //a=ptime:20
    name: 'ptime',
    reg: /^ptime:(\d*)/,
    format: 'ptime:%d'
  }, { //a=maxptime:60
    name: 'maxptime',
    reg: /^maxptime:(\d*)/,
    format: 'maxptime:%d'
  }, { //a=sendrecv
    name: 'direction',
    reg: /^(sendrecv|recvonly|sendonly|inactive)/
  }, { //a=ice-lite
    name: 'icelite',
    reg: /^(ice-lite)/
  }, { //a=ice-ufrag:F7gI
    name: 'iceUfrag',
    reg: /^ice-ufrag:(\S*)/,
    format: 'ice-ufrag:%s'
  }, { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g
    name: 'icePwd',
    reg: /^ice-pwd:(\S*)/,
    format: 'ice-pwd:%s'
  }, { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33
    name: 'fingerprint',
    reg: /^fingerprint:(\S*) (\S*)/,
    names: ['type', 'hash'],
    format: 'fingerprint:%s %s'
  }, { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host
    //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10
    //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10
    //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10
    //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10
    push: 'candidates',
    reg: /^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,
    names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],
    format: function format(o) {
      var str = 'candidate:%s %d %s %d %s %d typ %s';

      str += o.raddr != null ? ' raddr %s rport %d' : '%v%v';

      // NB: candidate has three optional chunks, so %void middles one if it's missing
      str += o.tcptype != null ? ' tcptype %s' : '%v';

      if (o.generation != null) {
        str += ' generation %d';
      }

      str += o['network-id'] != null ? ' network-id %d' : '%v';
      str += o['network-cost'] != null ? ' network-cost %d' : '%v';
      return str;
    }
  }, { //a=end-of-candidates (keep after the candidates line for readability)
    name: 'endOfCandidates',
    reg: /^(end-of-candidates)/
  }, { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...
    name: 'remoteCandidates',
    reg: /^remote-candidates:(.*)/,
    format: 'remote-candidates:%s'
  }, { //a=ice-options:google-ice
    name: 'iceOptions',
    reg: /^ice-options:(\S*)/,
    format: 'ice-options:%s'
  }, { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1
    push: 'ssrcs',
    reg: /^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,
    names: ['id', 'attribute', 'value'],
    format: function format(o) {
      var str = 'ssrc:%d';
      if (o.attribute != null) {
        str += ' %s';
        if (o.value != null) {
          str += ':%s';
        }
      }
      return str;
    }
  }, { //a=ssrc-group:FEC 1 2
    //a=ssrc-group:FEC-FR 3004364195 1080772241
    push: 'ssrcGroups',
    // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E
    reg: /^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,
    names: ['semantics', 'ssrcs'],
    format: 'ssrc-group:%s %s'
  }, { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV
    name: 'msidSemantic',
    reg: /^msid-semantic:\s?(\w*) (\S*)/,
    names: ['semantic', 'token'],
    format: 'msid-semantic: %s %s' // space after ':' is not accidental
  }, { //a=group:BUNDLE audio video
    push: 'groups',
    reg: /^group:(\w*) (.*)/,
    names: ['type', 'mids'],
    format: 'group:%s %s'
  }, { //a=rtcp-mux
    name: 'rtcpMux',
    reg: /^(rtcp-mux)/
  }, { //a=rtcp-rsize
    name: 'rtcpRsize',
    reg: /^(rtcp-rsize)/
  }, { //a=sctpmap:5000 webrtc-datachannel 1024
    name: 'sctpmap',
    reg: /^sctpmap:([\w_\/]*) (\S*)(?: (\S*))?/,
    names: ['sctpmapNumber', 'app', 'maxMessageSize'],
    format: function format(o) {
      return o.maxMessageSize != null ? 'sctpmap:%s %s %s' : 'sctpmap:%s %s';
    }
  }, { //a=x-google-flag:conference
    name: 'xGoogleFlag',
    reg: /^x-google-flag:([^\s]*)/,
    format: 'x-google-flag:%s'
  }, { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0
    push: 'rids',
    reg: /^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,
    names: ['id', 'direction', 'params'],
    format: function format(o) {
      return o.params ? 'rid:%s %s %s' : 'rid:%s %s';
    }
  }, { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]
    //a=imageattr:* send [x=800,y=640] recv *
    //a=imageattr:100 recv [x=320,y=240]
    push: 'imageattrs',
    reg: new RegExp(
    //a=imageattr:97
    '^imageattr:(\\d+|\\*)' +
    //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]
    '[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)' +
    //recv [x=330,y=250]
    '(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?'),
    names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],
    format: function format(o) {
      return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');
    }
  }, { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8
    //a=simulcast:recv 1;4,5 send 6;7
    name: 'simulcast',
    reg: new RegExp(
    //a=simulcast:
    '^simulcast:' +
    //send 1,2,3;~4,~5
    '(send|recv) ([a-zA-Z0-9\\-_~;,]+)' +
    //space + recv 6;~7,~8
    '(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?' +
    //end
    '$'),
    names: ['dir1', 'list1', 'dir2', 'list2'],
    format: function format(o) {
      return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');
    }
  }, { //Old simulcast draft 03 (implemented by Firefox)
    //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03
    //a=simulcast: recv pt=97;98 send pt=97
    //a=simulcast: send rid=5;6;7 paused=6,7
    name: 'simulcast_03',
    reg: /^simulcast:[\s\t]+([\S+\s\t]+)$/,
    names: ['value'],
    format: 'simulcast: %s'
  }, {
    //a=framerate:25
    //a=framerate:29.97
    name: 'framerate',
    reg: /^framerate:(\d+(?:$|\.\d+))/,
    format: 'framerate:%s'
  }, { // RFC4570
    //a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5
    name: 'sourceFilter',
    reg: /^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,
    names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],
    format: 'source-filter: %s %s %s %s %s'
  }, { //a=bundle-only
    name: 'bundleOnly',
    reg: /^(bundle-only)/
  }, { //a=label:1
    name: 'label',
    reg: /^label:(.+)/,
    format: 'label:%s'
  }, {
    // RFC version 26 for SCTP over DTLS
    // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5
    name: 'sctpPort',
    reg: /^sctp-port:(\d+)$/,
    format: 'sctp-port:%s'
  }, {
    // RFC version 26 for SCTP over DTLS
    // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6
    name: 'maxMessageSize',
    reg: /^max-message-size:(\d+)$/,
    format: 'max-message-size:%s'
  }, { // any a= that we don't understand is kepts verbatim on media.invalid
    push: 'invalid',
    names: ['value']
  }]
};

// set sensible defaults to avoid polluting the grammar with boring details
(0, _keys2.default)(grammar).forEach(function (key) {
  var objs = grammar[key];
  objs.forEach(function (obj) {
    if (!obj.reg) {
      obj.reg = /(.*)/;
    }
    if (!obj.format) {
      obj.format = '%s';
    }
  });
});

/***/ }),

/***/ "./lib/sdpform/index.js":
/*!******************************!*\
  !*** ./lib/sdpform/index.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var parser = __webpack_require__(/*! ./parser */ "./lib/sdpform/parser.js");
var writer = __webpack_require__(/*! ./writer */ "./lib/sdpform/writer.js");

exports.write = writer;
exports.parse = parser.parse;
exports.parseFmtpConfig = parser.parseFmtpConfig;
exports.parseParams = parser.parseParams;
exports.parsePayloads = parser.parsePayloads;
exports.parseRemoteCandidates = parser.parseRemoteCandidates;
exports.parseImageAttributes = parser.parseImageAttributes;
exports.parseSimulcastStreamList = parser.parseSimulcastStreamList;
/**
 * REF: Base upon sdp-transform 2.7.0
 */

/***/ }),

/***/ "./lib/sdpform/parser.js":
/*!*******************************!*\
  !*** ./lib/sdpform/parser.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toIntIfInt = function toIntIfInt(v) {
  return String(Number(v)) === v ? Number(v) : v;
};

var attachProperties = function attachProperties(match, location, names, rawName) {
  if (rawName && !names) {
    location[rawName] = toIntIfInt(match[1]);
  } else {
    for (var i = 0; i < names.length; i += 1) {
      if (match[i + 1] != null) {
        location[names[i]] = toIntIfInt(match[i + 1]);
      }
    }
  }
};

var parseReg = function parseReg(obj, location, content) {
  var needsBlank = obj.name && obj.names;
  if (obj.push && !location[obj.push]) {
    location[obj.push] = [];
  } else if (needsBlank && !location[obj.name]) {
    location[obj.name] = {};
  }
  var keyLocation = obj.push ? {} : // blank object that will be pushed
  needsBlank ? location[obj.name] : location; // otherwise, named location or root

  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);

  if (obj.push) {
    location[obj.push].push(keyLocation);
  }
};

var grammar = __webpack_require__(/*! ./grammar */ "./lib/sdpform/grammar.js");
var validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);

exports.parse = function (sdp) {
  var session = {},
      media = [],
      location = session; // points at where properties go under (one of the above)

  // parse lines we understand
  sdp.split(/(\r\n|\r|\n)/).filter(validLine).forEach(function (l) {
    var type = l[0];
    var content = l.slice(2);
    if (type === 'm') {
      media.push({ rtp: [], fmtp: [] });
      location = media[media.length - 1]; // point at latest media line
    }

    for (var j = 0; j < (grammar[type] || []).length; j += 1) {
      var obj = grammar[type][j];
      if (obj.reg.test(content)) {
        return parseReg(obj, location, content);
      }
    }
  });

  session.media = media; // link it up
  return session;
};

var paramReducer = function paramReducer(acc, expr) {
  var s = expr.split(/=(.+)/, 2);
  if (s.length === 2) {
    acc[s[0]] = toIntIfInt(s[1]);
  } else if (s.length === 1 && expr.length > 1) {
    acc[s[0]] = undefined;
  }
  return acc;
};

exports.parseParams = function (str) {
  return str.split(/\;\s?/).reduce(paramReducer, {});
};

// For backward compatibility - alias will be removed in 3.0.0
exports.parseFmtpConfig = exports.parseParams;

exports.parsePayloads = function (str) {
  return str.split(' ').map(Number);
};

exports.parseRemoteCandidates = function (str) {
  var candidates = [];
  var parts = str.split(' ').map(toIntIfInt);
  for (var i = 0; i < parts.length; i += 3) {
    candidates.push({
      component: parts[i],
      ip: parts[i + 1],
      port: parts[i + 2]
    });
  }
  return candidates;
};

exports.parseImageAttributes = function (str) {
  return str.split(' ').map(function (item) {
    return item.substring(1, item.length - 1).split(',').reduce(paramReducer, {});
  });
};

exports.parseSimulcastStreamList = function (str) {
  return str.split(';').map(function (stream) {
    return stream.split(',').map(function (format) {
      var scid,
          paused = false;

      if (format[0] !== '~') {
        scid = toIntIfInt(format);
      } else {
        scid = toIntIfInt(format.substring(1, format.length));
        paused = true;
      }

      return {
        scid: scid,
        paused: paused
      };
    });
  });
};

/***/ }),

/***/ "./lib/sdpform/writer.js":
/*!*******************************!*\
  !*** ./lib/sdpform/writer.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var grammar = __webpack_require__(/*! ./grammar */ "./lib/sdpform/grammar.js");

// customized util.format - discards excess arguments and can void middle ones
var formatRegExp = /%[sdv%]/g;
var format = function format(formatStr) {
  var i = 1;
  var args = arguments;
  var len = args.length;
  return formatStr.replace(formatRegExp, function (x) {
    if (i >= len) {
      return x; // missing argument
    }
    var arg = args[i];
    i += 1;
    switch (x) {
      case '%%':
        return '%';
      case '%s':
        return String(arg);
      case '%d':
        return Number(arg);
      case '%v':
        return '';
    }
  });
  // NB: we discard excess arguments - they are typically undefined from makeLine
};

var makeLine = function makeLine(type, obj, location) {
  var str = obj.format instanceof Function ? obj.format(obj.push ? location : location[obj.name]) : obj.format;

  var args = [type + '=' + str];
  if (obj.names) {
    for (var i = 0; i < obj.names.length; i += 1) {
      var n = obj.names[i];
      if (obj.name) {
        args.push(location[obj.name][n]);
      } else {
        // for mLine and push attributes
        args.push(location[obj.names[i]]);
      }
    }
  } else {
    args.push(location[obj.name]);
  }
  return format.apply(null, args);
};

// RFC specified order
// TODO: extend this with all the rest
var defaultOuterOrder = ['v', 'o', 's', 'i', 'u', 'e', 'p', 'c', 'b', 't', 'r', 'z', 'a'];
var defaultInnerOrder = ['i', 'c', 'b', 'a'];

module.exports = function (session, opts) {
  opts = opts || {};
  // ensure certain properties exist
  if (session.version == null) {
    session.version = 0; // 'v=0' must be there (only defined version atm)
  }
  if (session.name == null) {
    session.name = ' '; // 's= ' must be there if no meaningful name set
  }
  session.media.forEach(function (mLine) {
    if (mLine.payloads == null) {
      mLine.payloads = '';
    }
  });

  var outerOrder = opts.outerOrder || defaultOuterOrder;
  var innerOrder = opts.innerOrder || defaultInnerOrder;
  var sdp = [];

  // loop through outerOrder for matching properties on session
  outerOrder.forEach(function (type) {
    grammar[type].forEach(function (obj) {
      if (obj.name in session && session[obj.name] != null) {
        sdp.push(makeLine(type, obj, session));
      } else if (obj.push in session && session[obj.push] != null) {
        session[obj.push].forEach(function (el) {
          sdp.push(makeLine(type, obj, el));
        });
      }
    });
  });

  // then for each media line, follow the innerOrder
  session.media.forEach(function (mLine) {
    sdp.push(makeLine('m', grammar.m[0], mLine));

    innerOrder.forEach(function (type) {
      grammar[type].forEach(function (obj) {
        if (obj.name in mLine && mLine[obj.name] != null) {
          sdp.push(makeLine(type, obj, mLine));
        } else if (obj.push in mLine && mLine[obj.push] != null) {
          mLine[obj.push].forEach(function (el) {
            sdp.push(makeLine(type, obj, el));
          });
        }
      });
    });
  });

  return sdp.join('\r\n') + '\r\n';
};

/***/ }),

/***/ "./lib/stats.js":
/*!**********************!*\
  !*** ./lib/stats.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _stringify = __webpack_require__(/*! babel-runtime/core-js/json/stringify */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/json/stringify.js");

var _stringify2 = _interopRequireDefault(_stringify);

var _map = __webpack_require__(/*! babel-runtime/core-js/map */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/map.js");

var _map2 = _interopRequireDefault(_map);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _freeze = __webpack_require__(/*! babel-runtime/core-js/object/freeze */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/freeze.js");

var _freeze2 = _interopRequireDefault(_freeze);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = __webpack_require__(/*! ./logger */ "./lib/logger.js")('Stats');
var config = __webpack_require__(/*! ./config */ "./lib/config.js");
var pkg = __webpack_require__(/*! ../package.json */ "./package.json");

var _require = __webpack_require__(/*! ./utils */ "./lib/utils.js"),
    uuid = _require.uuid;

var EventType = (0, _freeze2.default)({
	HEART_BEAT: 'event=sdkHeartbeat',
	ENTER_FAIL: 'event=ENTER_FAIL',
	ENTER_TIMEOUT: 'event=ENTER_TIMEOUT'
});

var STAT_REPORT_INTERVAL = 10 * 1000;

var Stats = function () {
	function Stats() {
		(0, _classCallCheck3.default)(this, Stats);

		this._appId = '';
		this._roomId = '';
		this._sessionId = '';
		this._userId = '';
		this._connectionId = '';
		this._roleType = '';
		this._logType = '';
		this._domain = '';

		this._netType = '';

		this._isMobile = /mobile/i.test(navigator.userAgent);

		// 
		this._isAudioOpen = false;
		this._isVideoOpen = false;

		// 保存 webrtc internal stats -- 用于上报时集合
		this._webrtcInternalSendStats = new Array();
		this._webrtcInternalRecvStats = new Array();

		this._reportInterval = null;

		// 
		this._webrtcStats = [];

		/*
  this.stats = [{
  	appId: '',
  	roomId: '',
  	sessionId: '',
  	userId: '',
  	logtype: '1',
  	connectionId: '',
  	roleType: '',
  	logTime: '',
  	equipInfo: {
  		sdkVersion: 'ver3.7.3_Sep_28_2019',
  		netType: '0',
  		equipModel: 'web',
  		publicVersion: pkg.version
  	},
  	videoInfo: {
  		V_SENT: [
  			{
  				DEVID: '',
  				V_SSRC: 0,
  				V_VBR: 0,
  				V_RBR: 0,
  				V_FPS: 0,
  				V_SENDBYTES: 0,
  				V_SENDCOUNT: 0,
  				V_SENDFRACTIONLOST: 0,
  				V_RTT: 0,
  				V_BUF: 0,
  				V_RECV: 0,
  				V_ENCERROR: 0,
  				V_ENC: 0,
  				V_RECONNECT: 0,
  				V_MUTED: 0,
  				V_DYNAMICS: 0,
  				V_QP: 0,
  				V_SFPS: 0
  			}
  		],
  		V_RECV: [
  			{
  				RECVUID: '',
  				RECVID: '',
  				SSRC: 0,
  				V_FPS: 0,
  				V_WIDTH: 0,
  				V_HEIGHT: 0,
  				V_RECVBR: 0,
  				V_RECVBYTES: 0,
  				V_RECVCOUNT: 0,
  				V_LOSTRATE: 0,
  				V_RTT: 0,
  				V_JITTER: 0,
  				V_RDELAY: 0,
  				V_LOSTDELAY: 0,
  				V_CARTON: 0,
  				V_RECVFRAMECOUNT: 0,
  				V_LOSTFRAMECOUNT: 0,
  				V_DELAY: 0,
  				V_BUF: 0,
  				V_FRACTIONLOST: 0,
  				V_MUTED: 0
  			}
  		]
  	},
  	audioInfo: {
  		A_SENT: {
  			A_BR: 0,
  			A_SSRC: 0,
  			A_RBR: 0,
  			A_RTT: 0,
  			A_MUTED: 0,
  			A_CAP: 0,
  			A_ENC: 0,
  			A_LOSTRATE: 0,
  			A_RECV: 0,
  			A_SENT: 0,
  			A_RECONNECT: 0,
  			A_RECVERROR: 0
  		},
  		A_RECV: [
  			{
  				RECVUID: '',
  				A_DEVID: '',
  				A_RECVBR: 0,
  				A_SSRC: 0,
  				A_RECVBYTES: 0,
  				A_LOSTRATE: 0,
  				A_BUFFERDURATION: 0,
  				A_RCARTON: 0,
  				A_RECVFRACTIONLOST: 0,
  				A_RTT: 0,
  				A_DELAY: 0,
  				A_DECODELENGTH: 0,
  				A_AVJMS: 0,
  				A_MAXJMS: 0
  			}
  		]
  	},
  	systemEnvironments: {
  		sysCpu: 2,
  		appCpu: 1,
  		sysRam: 1024,
  		appRam: 1024
  	}
  }];
  */

		// key : streamId
		// value : stat infos
		this._audioRecvStats = new _map2.default();
		this._videoRecvStats = new _map2.default();

		// key : streamId
		// value : stat infos
		this._audioSendStats = new _map2.default();
		this._videoSendStats = new _map2.default();

		//
		// availableRecvBW: 0,
		// availableSendBW: 0,
		this._summarize = {
			rtt: 0,
			networkType: '',
			upSpeed: 0,
			downSpeed: 0
		};
		// 
		this._netstat = {
			fractionLost: 0,
			roundTripTime: 0,
			quality: 0,
			wsState: '',
			sendIceState: '',
			recvIceState: '',
			audioUp: {
				timestamp: 0,
				bitrate: 0,
				packetCount: 0,
				packetsLost: 0,
				nackCount: 0,
				jitter: 0,
				pliCount: 0,
				sliCount: 0,
				fractionLost: 0,
				roundTripTime: 0
			},
			audioDown: {
				timestamp: 0,
				bitrate: 0,
				packetCount: 0,
				packetsLost: 0,
				nackCount: 0,
				pliCount: 0,
				sliCount: 0,
				fractionLost: 0,
				roundTripTime: 0
			},
			videoUp: {
				timestamp: 0,
				bitrate: 0,
				packetCount: 0,
				packetsLost: 0,
				nackCount: 0,
				jitter: 0,
				pliCount: 0,
				sliCount: 0,
				fractionLost: 0,
				roundTripTime: 0
			},
			videoDown: {
				timestamp: 0,
				bitrate: 0,
				packetCount: 0,
				packetsLost: 0,
				nackCount: 0,
				pliCount: 0,
				sliCount: 0,
				fractionLost: 0,
				roundTripTime: 0
			}
		};

		this._cstat = {
			peerId: '',
			appId: '',
			connectionId: '',
			roomId: '',
			consumer: '',
			stat: []
		};

		this.streamSsrcPairs = new _map2.default();

		this.STATS_INTERVAL = 4000;
		this.STATS_INTERVAL_S = 2000;
		this._gwInfo = {};
		this._iplocationInfo = {};
		this.setNetworkType();
	}

	(0, _createClass3.default)(Stats, [{
		key: 'stop',
		value: function stop() {
			if (!!this._reportInterval) {
				clearInterval(this._reportInterval);
				this._reportInterval = null;
			}

			this._webrtcInternalSendStats.clear();
			this._webrtcInternalRecvStats.clear();
		}

		// 

	}, {
		key: 'getAudioUpStat',
		value: function getAudioUpStat(streamId) {
			if (!!this._audioSendStats) {
				return this._audioSendStats.get(streamId);
			}

			return null;
		}
	}, {
		key: 'getVideoUpStat',
		value: function getVideoUpStat(streamId) {
			if (!!this._videoSendStats) {
				return this._videoSendStats.get(streamId);
			}

			return null;
		}
	}, {
		key: 'getAudioDownStat',
		value: function getAudioDownStat(streamId) {
			if (!!this._audioRecvStats) {
				return this._audioRecvStats.get(streamId);
			}

			return null;
		}
	}, {
		key: 'getVideoDownStat',
		value: function getVideoDownStat(streamId) {
			if (!!this._videoRecvStats) {
				return this._videoRecvStats.get(streamId);
			}

			return null;
		}
	}, {
		key: 'setStreamSSRCPairs',
		value: function setStreamSSRCPairs(id, ssrc, stream, act) {
			var item = {
				ssrc: ssrc,
				active: act,
				stream: stream
			};
			this.streamSsrcPairs.set(id, item);
		}
	}, {
		key: 'actStreamSSRCPairs',
		value: function actStreamSSRCPairs(id, act) {
			var item = this.streamSsrcPairs.get(id);

			if (item) {
				item.active = act;
			}
		}
	}, {
		key: 'isActStreamSSRCPairs',
		value: function isActStreamSSRCPairs(id) {
			var item = this.streamSsrcPairs.get(id);

			if (item) {
				return item.active;
			}
			return false;
		}
	}, {
		key: 'getStreamPropertyBySSRC',
		value: function getStreamPropertyBySSRC(ssrc, property) {
			var id = '';
			var found = false;
			var value = '';

			this.streamSsrcPairs.forEach(function (item, key) {
				if (!found && item && '' + item.ssrc === '' + ssrc) {
					id = key;
					value = item.stream[property];

					found = true;
				}
			});

			return {
				id: id,
				value: value
			};
		}
	}, {
		key: 'removeStreamById',
		value: function removeStreamById(id) {
			this.streamSsrcPairs.delete(id);
		}

		/**
   * CONNECTING, OPEN, CLOSING, disconnected, CLOSED.
   * @param {string} state 
   */

	}, {
		key: 'setWsState',
		value: function setWsState(state) {
			this._netstat.wsState = state;
		}

		/**
   * new, checking, connected, completed, disconnected, failed, closed
   * @param {string} state
   */

	}, {
		key: 'setSendIceState',
		value: function setSendIceState(state) {
			this._netstat.sendIceState = state;
		}

		/**
   * new, checking, connected, completed, disconnected, failed, closed
   * @param {string} state
   */

	}, {
		key: 'setRecvIceState',
		value: function setRecvIceState(state) {
			this._netstat.recvIceState = state;
		}
	}, {
		key: 'setAppid',
		value: function setAppid(appId) {
			this._appId = appId;

			// this.stats[0].appId = `${appId}`;
			this._cstat.appId = appId;
		}
	}, {
		key: 'setRoomId',
		value: function setRoomId(roomId) {
			this._roomId = roomId;

			// this.stats[0].roomId = `${roomId}`;
			this._cstat.roomId = roomId;
		}
	}, {
		key: 'setSessionId',
		value: function setSessionId(sessionId) {
			this._sessionId = sessionId;

			// this.stats[0].sessionId = `${sessionId}`;
		}
	}, {
		key: 'setUserId',
		value: function setUserId(userId) {
			this._userId = userId;

			// this.stats[0].userId = `${userId}`;
			this._cstat.peerId = userId;
		}
	}, {
		key: 'setLogType',
		value: function setLogType(logType) {
			this._logType = logType;

			// this.stats[0].logtype = `${logType}`;
		}
	}, {
		key: 'setConnectionId',
		value: function setConnectionId(connectionId) {
			this._connectionId = connectionId;

			// this.stats[0].connectionId = `${connectionId}`;
			this._cstat.connectionId = connectionId;
		}
	}, {
		key: 'setRoleType',
		value: function setRoleType(roleType) {
			this._roleType = '' + roleType;

			// this.stats[0].roleType = `${roleType}`;
		}
	}, {
		key: 'setDeviceInfo',
		value: function setDeviceInfo(info) {
			// logger.debug({ 'clientInfo': info });

			// Comment this line for attend to logger server's issue.
			// this.stats[0].equipInfo.equipModel = `{'Web': ${JSON.stringify(info)}}`;

			// Comment this line for attend to logger server's issue. 
			// this.stats[0].equipInfo.equipModel = `Web: ${info.name}-${info.version}-${info.bowser.osname}-${info.bowser.osversion}`;
		}
	}, {
		key: 'setDomain',
		value: function setDomain(domain) {
			this._domain = domain;
		}
	}, {
		key: 'setGWInfo',
		value: function setGWInfo(gwInfo) {
			this._gwInfo = gwInfo[0];
		}
	}, {
		key: 'setIPlocationInfo',
		value: function setIPlocationInfo(info) {
			this._iplocationInfo = info;
		}
	}, {
		key: 'setNetworkType',
		value: function setNetworkType() {
			try {
				var connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
				switch (connection.type) {
					case 'wifi':
						this._netType = '0';
						break;
					case 'ethernet':
						this._netType = '4';
						break;
					default:
						this._netType = '4';
						break;
				}
			} catch (e) {}
		}

		// 
		// 向日志服务器上报 stat 信息 （HeartBeat）

	}, {
		key: '_reportWebrtcStats',
		value: function _reportWebrtcStats() {
			var _this = this;

			// 
			if (!this._webrtcInternalSendStats && !this._webrtcInternalRecvStats) {
				return;
			}

			var sendStatLen = this._webrtcInternalSendStats.length;
			var recvStatLen = this._webrtcInternalRecvStats.length;

			// logger.debug(`_reportWebrtcStats -- sendStatLen: ${sendStatLen} recvStatLen: ${recvStatLen}`);

			var cnt = Math.min(Math.max(sendStatLen, recvStatLen), 10);
			this._webrtcStats = [];

			var _loop = function _loop(i) {
				// 
				var oStat = {};

				// 
				oStat.appId = _this._appId;
				oStat.roomId = _this._roomId;
				oStat.sessionId = _this._sessionId;
				oStat.userId = _this._userId;
				oStat.connectionId = _this._connectionId;
				// oStat.logTime = `${Math.floor(Date.now())}`;
				oStat.roleType = _this._roleType;
				oStat.equipInfo = {
					sdkVersion: pkg.version + '_' + pkg.buildDate, // 'ver3.7.3_Sep_28_2019',
					netType: _this._netType,
					equipModel: _this._isMobile ? 'web_mobile' : 'web',
					inBackground: 0,
					systemVersion: 'web',
					publicVersion: pkg.version
				};

				// 
				oStat.audioInfo = {};
				oStat.audioInfo.A_SENT = [];
				oStat.audioInfo.A_RECV = [];

				oStat.videoInfo = {};
				oStat.videoInfo.V_SENT = [];
				oStat.videoInfo.V_RECV = [];

				// 
				// for recv stat
				var recvStat = _this._webrtcInternalRecvStats.shift();

				if (recvStat) {
					// 
					oStat.logTime = recvStat.statTimeTick;

					// 
					var recvVideoCnt = 0;
					var recvAudioCnt = 0;

					// rtt from stat
					var rtt = 0;

					// 
					recvStat.results.forEach(function (v) {
						if (v.type === 'VideoBwe') {
							;
						} else if (v.type === 'googCandidatePair') {
							if (v.googActiveConnection === 'true') {
								rtt = parseInt(v.googRtt, 10);
							}
						} else if (v.type === 'ssrc') {
							var ssrc = parseInt(v.ssrc, 10);
							if (v.mediaType === 'audio') {
								// 
								var _getStreamPropertyByS = _this.getStreamPropertyBySSRC(ssrc, "userID"),
								    id = _getStreamPropertyByS.id,
								    value = _getStreamPropertyByS.value;

								if (!_this.isActStreamSSRCPairs(id)) return;

								var uid = value;
								if (uid === '') //
									return;

								oStat.audioInfo.A_RECV[recvAudioCnt] = {};

								// 
								oStat.audioInfo.A_RECV[recvAudioCnt].RECVUID = uid;
								oStat.audioInfo.A_RECV[recvAudioCnt].A_SSRC = ssrc;
								oStat.audioInfo.A_RECV[recvAudioCnt].A_RECVBR = parseInt(!recvStat.audio[ssrc].bytesReceived ? 0 : recvStat.audio[ssrc].bytesReceived, 10);
								oStat.audioInfo.A_RECV[recvAudioCnt].A_RECVBYTES = parseInt(v.bytesReceived, 10);

								var audioLost = parseInt(!recvStat.audio[ssrc].packetsLost ? 0 : recvStat.audio[ssrc].packetsLost, 10);
								var audioPkts = parseInt(!recvStat.audio[ssrc].packetsReceived ? 0 : recvStat.audio[ssrc].packetsReceived, 10);
								var audioPacketsLost = audioPkts > 0 ? audioLost / audioPkts : 0;

								oStat.audioInfo.A_RECV[recvAudioCnt].A_LOSTRATE = parseFloat(audioPacketsLost.toFixed(1));
								oStat.audioInfo.A_RECV[recvAudioCnt].A_BUFFERDURATION = parseInt(v.googJitterBufferMs, 10);
								// oStat.audioInfo.A_RECV[recvAudioCnt].A_RCARTON = ;
								// oStat.audioInfo.A_RECV[recvAudioCnt].A_RCARTON_DIFF = ;
								// oStat.audioInfo.A_RECV[recvAudioCnt].A_RCARTONCOUNT = ;
								oStat.audioInfo.A_RECV[recvAudioCnt].A_RECVFRACTIONLOST = parseFloat(audioPacketsLost.toFixed(1));
								oStat.audioInfo.A_RECV[recvAudioCnt].A_RTT = rtt;
								oStat.audioInfo.A_RECV[recvAudioCnt].A_DELAY = parseInt(!recvStat.audio[ssrc].latency ? 0 : recvStat.audio[ssrc].latency, 10);
								// oStat.audioInfo.A_RECV[recvAudioCnt].A_DECODELENGTH = ;
								// oStat.audioInfo.A_RECV[recvAudioCnt].A_AVJMS = ;
								// oStat.audioInfo.A_RECV[recvAudioCnt].A_MAXJMS = ; 
								oStat.audioInfo.A_RECV[recvAudioCnt].A_DISCARDEDPKTS = parseInt(v.packetsLost, 10);
								// 
								recvAudioCnt++;
								// 
							} else if (v.mediaType === 'video') {
								// 
								var _uid = '';

								{
									var _getStreamPropertyByS2 = _this.getStreamPropertyBySSRC(ssrc, "userID"),
									    _id = _getStreamPropertyByS2.id,
									    _value = _getStreamPropertyByS2.value;

									if (!_this.isActStreamSSRCPairs(_id)) return;

									_uid = _value;

									if (_uid === '') return;
								}

								var sid = '';
								{
									var _getStreamPropertyByS3 = _this.getStreamPropertyBySSRC(ssrc, "streamID"),
									    _id2 = _getStreamPropertyByS3.id,
									    _value2 = _getStreamPropertyByS3.value;

									sid = _value2;
								}

								oStat.videoInfo.V_RECV[recvVideoCnt] = {};
								oStat.videoInfo.V_RECV[recvVideoCnt].RECVUID = _uid;
								oStat.videoInfo.V_RECV[recvVideoCnt].RECVID = sid;
								oStat.videoInfo.V_RECV[recvVideoCnt].V_SSRC = ssrc;
								oStat.videoInfo.V_RECV[recvVideoCnt].V_RECVBR = parseInt(!recvStat.video[ssrc].bytesReceived ? 0 : recvStat.video[ssrc].bytesReceived, 10);
								oStat.videoInfo.V_RECV[recvVideoCnt].V_FPS = parseInt(v.googFrameRateOutput, 10);
								oStat.videoInfo.V_RECV[recvVideoCnt].V_WIDTH = parseInt(v.googFrameWidthReceived, 10);
								oStat.videoInfo.V_RECV[recvVideoCnt].V_HEIGHT = parseInt(v.googFrameHeightReceived, 10);
								oStat.videoInfo.V_RECV[recvVideoCnt].V_RECVBYTES = parseInt(v.bytesReceived, 10);
								oStat.videoInfo.V_RECV[recvVideoCnt].V_RECVCOUNT = parseInt(v.packetsReceived, 10);

								var videoLost = parseInt(!recvStat.video[ssrc].packetsLost ? 0 : recvStat.video[ssrc].packetsLost, 10);
								var videoPkts = parseInt(!recvStat.video[ssrc].packetsReceived ? 0 : recvStat.video[ssrc].packetsReceived, 10);
								var videoPacketsLost = videoPkts > 0 ? videoLost / videoPkts : 0;

								oStat.videoInfo.V_RECV[recvVideoCnt].V_LOSTRATE = parseFloat(videoPacketsLost.toFixed(1));
								oStat.videoInfo.V_RECV[recvVideoCnt].V_RTT = rtt;
								oStat.videoInfo.V_RECV[recvVideoCnt].V_JITTER = parseInt(v.googJitterBufferMs, 10);
								// oStat.videoInfo.V_RECV[recvVideoCnt].V_RDELAY = parseInt(v., 10);
								// oStat.videoInfo.V_RECV[recvVideoCnt].V_LOSTDELAY = parseInt(v., 10);
								// oStat.videoInfo.V_RECV[recvVideoCnt].V_CARTON = parseInt(v., 10);
								oStat.videoInfo.V_RECV[recvVideoCnt].V_RECVFRAMECOUNT = parseInt(v.framesDecoded, 10);
								// oStat.videoInfo.V_RECV[recvVideoCnt].V_LOSTFRAMECOUNT = parseInt(v., 10);
								oStat.videoInfo.V_RECV[recvVideoCnt].V_DELAY = parseInt(!recvStat.video[ssrc].latency ? 0 : recvStat.video[ssrc].latency, 10);
								// oStat.videoInfo.V_RECV[recvVideoCnt].V_BUF = parseInt(v., 10);
								oStat.videoInfo.V_RECV[recvVideoCnt].V_FRACTIONLOST = parseFloat(videoPacketsLost.toFixed(1));
								// oStat.videoInfo.V_RECV[recvVideoCnt].V_MUTED = ;
								// 
								recvVideoCnt++;
							} else {
								;
							}
							// 
						} else {
							;
						}
					});
				}

				// for send stat
				var sendStat = _this._webrtcInternalSendStats.shift();

				if (sendStat) {
					// 
					oStat.logTime = sendStat.statTimeTick;

					// 
					var sendVideoCnt = 0;
					var sendAudioCnt = 0;

					// rtt from stat
					var _rtt = 0;

					sendStat.results.forEach(function (v) {
						if (v.type === 'VideoBwe') {
							;
						} else if (v.type === 'googCandidatePair') {
							if (v.googActiveConnection === 'true') {
								_rtt = parseInt(v.googRtt, 10);
							}
						} else if (v.type === 'ssrc') {
							var ssrc = parseInt(v.ssrc, 10);
							if (v.mediaType === 'audio') {
								oStat.audioInfo.A_SENT[sendAudioCnt] = {};
								//
								oStat.audioInfo.A_SENT[sendAudioCnt].A_SSRC = ssrc;
								oStat.audioInfo.A_SENT[sendAudioCnt].A_BR = parseInt(!sendStat.audio[ssrc].bytesSent ? 0 : sendStat.audio[ssrc].bytesSent, 10);
								// oStat.audioInfo.A_SENT[sendAudioCnt].A_RBR = ;
								oStat.audioInfo.A_SENT[sendAudioCnt].A_RTT = parseInt(v.googRtt, 10);
								oStat.audioInfo.A_SENT[sendAudioCnt].A_MUTED = _this._isAudioOpen ? 0 : 1;
								// oStat.audioInfo.A_SENT[sendAudioCnt].A_CAP = ;
								// oStat.audioInfo.A_SENT[sendAudioCnt].A_ENC = ;

								var audioLost = parseInt(!sendStat.audio[ssrc].packetsLost ? 0 : sendStat.audio[ssrc].packetsLost, 10);
								var audioPkts = parseInt(!sendStat.audio[ssrc].packetsSent ? 0 : sendStat.audio[ssrc].packetsSent, 10);
								var audioPacketsLost = audioPkts > 0 ? audioLost / audioPkts : 0;

								oStat.audioInfo.A_SENT[sendAudioCnt].A_FRACTIONLOST = parseFloat(audioPacketsLost.toFixed(1));
								// oStat.audioInfo.A_SENT[sendAudioCnt].A_RECV = audioBytesReceivedTotal; // TODO : 
								oStat.audioInfo.A_SENT[sendAudioCnt].A_SENT = parseInt(v.bytesSent, 10);
								// oStat.audioInfo.A_SENT[sendAudioCnt].A_RECONNECT = ;
								// oStat.audioInfo.A_SENT[sendAudioCnt].A_RECVERROR = ;
								// oStat.audioInfo.A_SENT[sendAudioCnt].A_MAXERRORUID = ;
								// oStat.audioInfo.A_SENT[sendAudioCnt].A_RECVERRORTIME = ;
								// oStat.audioInfo.A_SENT[sendAudioCnt].A_MUTEFRAME = ;
								// oStat.audioInfo.A_SENT[sendAudioCnt].A_MUTEALL = ;
								// oStat.audioInfo.A_SENT[sendAudioCnt].A_LEVELSUM = ;
								// oStat.audioInfo.A_SENT[sendAudioCnt].A_PRELEVELSUM = ;
								// oStat.audioInfo.A_SENT[sendAudioCnt].A_MIC_VOL = ;
								// oStat.audioInfo.A_SENT[sendAudioCnt].A_CAP_STAT = ;
								// oStat.audioInfo.A_SENT[sendAudioCnt].A_SPEAKING = ;
								// oStat.audioInfo.A_SENT[sendAudioCnt].A_BITRATE = ;

								// 
								sendAudioCnt++;
								// 
							} else if (v.mediaType === 'video') {
								var sid = '';

								var _getStreamPropertyByS4 = _this.getStreamPropertyBySSRC(ssrc, "innerStreamID"),
								    id = _getStreamPropertyByS4.id,
								    value = _getStreamPropertyByS4.value;

								if (!_this.isActStreamSSRCPairs(id)) return;

								sid = value;

								// 
								oStat.videoInfo.V_SENT[sendVideoCnt] = {};
								// 
								oStat.videoInfo.V_SENT[sendVideoCnt].DEVID = sid;
								oStat.videoInfo.V_SENT[sendVideoCnt].V_SSRC = ssrc;
								oStat.videoInfo.V_SENT[sendVideoCnt].V_VBR = parseInt(!sendStat.video[ssrc].bytesSent ? 0 : sendStat.video[ssrc].bytesSent, 10);
								// oStat.videoInfo.V_SENT[sendVideoCnt].V_RBR = ;
								oStat.videoInfo.V_SENT[sendVideoCnt].V_FPS = parseInt(v.googFrameRateInput, 10);
								oStat.videoInfo.V_SENT[sendVideoCnt].V_SENDBYTES = parseInt(v.bytesSent, 10);
								oStat.videoInfo.V_SENT[sendVideoCnt].V_SENDCOUNT = parseInt(v.packetsSent, 10);

								var videoLost = parseInt(!sendStat.video[ssrc].packetsLost ? 0 : sendStat.video[ssrc].packetsLost, 10);
								var videoPkts = parseInt(!sendStat.video[ssrc].packetsSent ? 0 : sendStat.video[ssrc].packetsSent, 10);
								var videoPacketsLost = videoPkts > 0 ? videoLost / videoPkts : 0;

								oStat.videoInfo.V_SENT[sendVideoCnt].V_SENDFRACTIONLOST = parseFloat(videoPacketsLost.toFixed(1));
								oStat.videoInfo.V_SENT[sendVideoCnt].V_RTT = parseInt(v.googRtt, 10);
								// oStat.videoInfo.V_SENT[sendVideoCnt].V_BUF = ;
								// oStat.videoInfo.V_SENT[sendVideoCnt].V_RECV = videoBytesReceivedTotal; // TODO : 
								oStat.videoInfo.V_SENT[sendVideoCnt].V_SEND = parseInt(v.bytesSent, 10);
								// oStat.videoInfo.V_SENT[sendVideoCnt].V_LOSS = ;
								// oStat.videoInfo.V_SENT[sendVideoCnt].V_ENCERROR = ;
								// oStat.videoInfo.V_SENT[sendVideoCnt].V_ENC = parseInt(v., 10);
								// oStat.videoInfo.V_SENT[sendVideoCnt].V_RECONNECT = parseInt(v., 10);
								oStat.videoInfo.V_SENT[sendVideoCnt].V_MUTED = _this._isVideoOpen ? 0 : 1;
								// oStat.videoInfo.V_SENT[sendVideoCnt].V_DYNAMICS = parseInt(v., 10);
								// oStat.videoInfo.V_SENT[sendVideoCnt].V_QP = parseInt(v., 10);
								oStat.videoInfo.V_SENT[sendVideoCnt].V_SFPS = parseInt(v.googFrameRateSent, 10);
								// 
								sendVideoCnt++;
								//
							} else {
								;
							}
							// 
						} else {
							;
						}
					});
				}

				// 
				_this._webrtcStats.push(oStat);
			};

			for (var i = 0; i < cnt; i++) {
				_loop(i);
			}
			// 
			if (cnt > 0) {
				//... web api send stats to log server.
				this.pushLoggerToServer(EventType.HEART_BEAT, this._webrtcStats);
			}

			if (Math.max(sendStatLen, recvStatLen) > 10) {
				this._reportWebrtcStats();
			}
		}

		// stat info 入队，用于后续定时上报 HeartBeat 信息

	}, {
		key: 'setWebrtcInternalSendStats',
		value: function setWebrtcInternalSendStats(statInfo) {
			// 
			this._summarize.rtt = statInfo.bandwidth.rtt;
			// this._summarize.availableRecvBW = statInfo.bandwidth.googAvailableReceiveBandwidth;
			// this._summarize.availableSendBW = statInfo.bandwidth.googAvailableSendBandwidth;
			var upSpeed = statInfo.bandwidth.upSpeed / 1024;
			this._summarize.upSpeed = upSpeed.toFixed(2);
			this._summarize.networkType = statInfo.connectionType.local.networkType;

			// 
			if (!this._webrtcInternalSendStats) return;

			// logger.debug(`setWebrtcInternalSendStats -- this._webrtcInternalSendStats.length: ${this._webrtcInternalSendStats.length}`);

			var d = new Date();
			var curTS = d.getTime();

			statInfo.statTimeTick = curTS;

			this._webrtcInternalSendStats.push(statInfo);
		}

		// stat info 入队，用于后续定时上报 HeartBeat 信息

	}, {
		key: 'setWebrtcInternalRecvStats',
		value: function setWebrtcInternalRecvStats(statInfo) {
			// 
			this._summarize.rtt = statInfo.bandwidth.rtt;
			// this._summarize.availableRecvBW = statInfo.bandwidth.googAvailableReceiveBandwidth;
			// this._summarize.availableSendBW = statInfo.bandwidth.googAvailableSendBandwidth;
			var downSpeed = statInfo.bandwidth.downSpeed / 1024;
			this._summarize.downSpeed = downSpeed.toFixed(2);
			this._summarize.networkType = statInfo.connectionType.local.networkType;

			if (!this._webrtcInternalRecvStats) return;

			// logger.debug(`setWebrtcInternalRecvStats -- this._webrtcInternalRecvStats.length: ${this._webrtcInternalRecvStats.length}`);

			var d = new Date();
			var curTS = d.getTime();

			statInfo.statTimeTick = curTS;

			this._webrtcInternalRecvStats.push(statInfo);
		}

		// stats : 从 mediasoup 得到的 consumer stat 信息

	}, {
		key: 'setConsumeStats',
		value: function setConsumeStats(stats, resolution, peerId, consumerId, streamId) {
			var _this2 = this;

			// logger.debug(`<STAT> setConsumeStats streamId: ${streamId} ${JSON.stringify(stats)}`);

			this._cstat.consumer = consumerId;
			this._cstat.stat = stats;

			// 
			var d = new Date();
			var curTS = d.getTime();

			// 
			var isVideoDownStat = false;
			var videoDownStat = {};
			var isAudioDownStat = false;
			var audioDownStat = {};

			stats.forEach(function (element) {
				// NOTE: only care outbound-rtp.
				if (element.type !== 'outbound-rtp') {
					return;
				}

				// this.stats[0].videoInfo.V_RECV[0].RECVUID = `${peerId}`;

				if (element.kind === 'video') {
					/*
     this.stats[0].videoInfo.V_RECV[0].RECVUID = `${peerId}`;
     this.stats[0].videoInfo.V_RECV[0].RECVID = `${element.inboundRtpId}`;
     this.stats[0].videoInfo.V_RECV[0].V_RECVBR = parseInt(element.bitrate / 1000.0, 10);
     this.stats[0].videoInfo.V_RECV[0].V_LOSTRATE = element.fractionLost;
     this.stats[0].videoInfo.V_RECV[0].V_RTT = parseInt(element.roundTripTime, 10);
     this.stats[0].videoInfo.V_RECV[0].V_RECVBYTES = parseInt(element.byteCount, 10);
     this.stats[0].videoInfo.V_RECV[0].V_RECVCOUNT = parseInt(element.packetCount, 10);
     this.stats[0].videoInfo.V_RECV[0].V_WIDTH = parseInt(resolution.frameWidth, 10);
     this.stats[0].videoInfo.V_RECV[0].V_HEIGHT = parseInt(resolution.frameHeight, 10);
     */

					videoDownStat.statTS = curTS; // 记录 统计时的时戳，用于失效清理（超时3s，认为失效）
					videoDownStat.ssrc = element.ssrc;

					videoDownStat.timestamp = element.timestamp;
					_this2._netstat.videoDown.timestamp = element.timestamp;
					videoDownStat.bitrate = element.bitrate;
					_this2._netstat.videoDown.bitrate = element.bitrate;
					videoDownStat.packetCount = element.packetCount;
					_this2._netstat.videoDown.packetCount = element.packetCount;
					videoDownStat.packageLost = element.packetsLost;
					_this2._netstat.videoDown.packageLost = element.packetsLost;
					videoDownStat.nackCount = element.nackCount;
					_this2._netstat.videoDown.nackCount = element.nackCount;
					videoDownStat.pliCount = element.pliCount;
					_this2._netstat.videoDown.pliCount = element.pliCount;
					videoDownStat.sliCount = element.sliCount;
					_this2._netstat.videoDown.sliCount = element.sliCount;
					videoDownStat.sliCount = element.sliCount;
					_this2._netstat.videoDown.fractionLost = element.fractionLost;
					videoDownStat.fractionLost = element.fractionLost;
					if (element.roundTripTime) {
						_this2._netstat.videoDown.roundTripTime = element.roundTripTime;
						videoDownStat.roundTripTime = element.roundTripTime;
					}

					isVideoDownStat = true;
				} else if (element.kind === 'audio') {
					/*
     this.stats[0].audioInfo.A_RECV[0].RECVUID = `${peerId}`;
     this.stats[0].audioInfo.A_RECV[0].A_DEVID = element.inboundRtpId;
     this.stats[0].audioInfo.A_RECV[0].A_RECVBR = parseInt(element.bitrate / 1000.0, 10);
     this.stats[0].audioInfo.A_RECV[0].A_LOSTRATE = element.fractionLost;
     this.stats[0].audioInfo.A_RECV[0].A_RTT = parseInt(element.roundTripTime, 10);
     this.stats[0].audioInfo.A_RECV[0].A_RECVBYTES = parseInt(element.byteCount, 10);
     this.stats[0].audioInfo.A_RECV[0].A_RECVCOUNT = parseInt(element.packetCount, 10);
     */

					audioDownStat.statTS = curTS; // 记录 统计时的时戳，用于失效清理（超时3s，认为失效）
					audioDownStat.ssrc = element.ssrc;

					_this2._netstat.audioDown.timestamp = element.timestamp;
					audioDownStat.timestamp = element.timestamp;
					_this2._netstat.audioDown.bitrate = element.bitrate;
					audioDownStat.bitrate = element.bitrate;
					_this2._netstat.audioDown.packetCount = element.packetCount;
					audioDownStat.packetCount = element.packetCount;
					_this2._netstat.audioDown.packetsLost = element.packetsLost;
					audioDownStat.packetsLost = element.packetsLost;
					_this2._netstat.audioDown.nackCount = element.nackCount;
					audioDownStat.nackCount = element.nackCount;
					_this2._netstat.audioDown.pliCount = element.pliCount;
					audioDownStat.pliCount = element.pliCount;
					_this2._netstat.audioDown.sliCount = element.sliCount;
					audioDownStat.sliCount = element.sliCount;
					_this2._netstat.audioDown.fractionLost = element.fractionLost;
					audioDownStat.fractionLost = element.fractionLost;
					if (element.roundTripTime) {
						_this2._netstat.audioDown.roundTripTime = element.roundTripTime;
						audioDownStat.roundTripTime = element.roundTripTime;
					}

					isAudioDownStat = true;
				}
			});

			this._setNetQulity();

			// 将统计数据暂存 _audioRecvStats 中，以备上层get
			if (isAudioDownStat) {
				this._audioRecvStats.set(streamId, audioDownStat);
			}

			// 将统计数据暂存 _videoRecvStats 中，以备上层get
			if (isVideoDownStat) {
				this._videoRecvStats.set(streamId, videoDownStat);
			}

			/*
   this.pushLoggerToServer(null,
   	{
   		appId: this._appId,
   		roomId: this.stats[0].roomId,
   		userId: this.stats[0].userId,
   		type: 'netStats',
   		consumerPeerId: peerId,
   		stats: stats,
   		consumer: consumerId
   	}
   );
   */

			this._cstat.stat.forEach(function (element) {
				// received video. NOTE: only care outbound-rtp.
				if (element.kind === 'video' && element.type === 'outbound-rtp') {
					element.resolution = resolution;
				}
			});

			this.consumerState(this._cstat);
		}

		// stats : 从 mediasoup 得到的 mic producer stat 信息

	}, {
		key: 'setMicStats',
		value: function setMicStats(stats, streamId) {
			var _this3 = this;

			// logger.debug(`<STAT> setMicStats streamId: ${streamId} ${JSON.stringify(stats)}`);

			var isAudioUpStat = false;
			var audioUpStat = {};

			// 
			var d = new Date();
			var curTS = d.getTime();

			stats.forEach(function (element) {
				// NOTE: only care inbound-rtp.
				if (element.type !== 'inbound-rtp') {
					return;
				}

				/*
    this.stats[0].audioInfo.A_SENT.A_BR = parseInt(element.bitrate / 1000.0, 10);
    this.stats[0].audioInfo.A_SENT.A_ENC = parseInt(element.packetCount, 10);
    this.stats[0].audioInfo.A_SENT.A_LOSTRATE = element.packetsLost;
    */

				audioUpStat.statTS = curTS; // 记录 统计时的时戳，用于失效清理（超时3s，认为失效）
				audioUpStat.ssrc = element.ssrc;

				_this3._netstat.audioUp.timestamp = element.timestamp;
				audioUpStat.timestamp = element.timestamp;
				_this3._netstat.audioUp.bitrate = element.bitrate;
				audioUpStat.bitrate = element.bitrate;
				_this3._netstat.audioUp.packetCount = element.packetCount;
				audioUpStat.packetCount = element.packetCount;
				_this3._netstat.audioUp.packetsLost = element.packetsLost;
				audioUpStat.packetsLost = element.packetsLost;
				_this3._netstat.audioUp.nackCount = element.nackCount;
				audioUpStat.nackCount = element.nackCount;
				_this3._netstat.audioUp.jitter = element.jitter;
				audioUpStat.jitter = element.jitter;
				_this3._netstat.audioUp.pliCount = element.pliCount;
				audioUpStat.pliCount = element.pliCount;
				_this3._netstat.audioUp.fractionLost = element.fractionLost;
				audioUpStat.fractionLost = element.fractionLost;
				if (element.roundTripTime) {
					_this3._netstat.audioUp.roundTripTime = element.roundTripTime;
					audioUpStat.roundTripTime = element.roundTripTime;
				}

				isAudioUpStat = true;
			});

			this._setNetQulity();

			// 将统计数据暂存 _audioSendStats 中，以备上层get
			if (isAudioUpStat) {
				this._audioSendStats.set(streamId, audioUpStat);
			}

			/*
   this.pushLoggerToServer(null,
   	{
   		type: 'netStats',
   		appId: this._appId,
   		roomId: this.stats[0].roomId,
   		userId: this.stats[0].userId,
   		producer: 'mic',
   		stats: stats
   	}
   );
   */
		}

		// stats : 从 mediasoup 得到的 webcam producer stat 信息

	}, {
		key: 'setWebcamStats',
		value: function setWebcamStats(stats, streamId) {
			var _this4 = this;

			// logger.debug(`<STAT> setWebcamStats streamId: ${streamId} ${JSON.stringify(stats)}`);

			var isVideoUpStat = false;
			var videoUpStat = {};

			// 
			var d = new Date();
			var curTS = d.getTime();

			stats.forEach(function (element) {
				// NOTE: only care inbound-rtp.
				if (element.type !== 'inbound-rtp') {
					return;
				}

				/*
    this.stats[0].videoInfo.V_SENT[0].DEVID = `${element.id}`;
    this.stats[0].videoInfo.V_SENT[0].V_VBR = parseInt(element.bitrate / 1000.0, 10);
    this.stats[0].videoInfo.V_SENT[0].V_SENDCOUNT = parseInt(element.packetCount, 10);
    this.stats[0].videoInfo.V_SENT[0].V_SENDFRACTIONLOST = element.packetsLost;
    */

				videoUpStat.statTS = curTS; // 记录 统计时的时戳，用于失效清理（超时3s，认为失效）
				videoUpStat.ssrc = element.ssrc;

				_this4._netstat.videoUp.timestamp = element.timestamp;
				videoUpStat.timestamp = element.timestamp;
				_this4._netstat.videoUp.bitrate = element.bitrate;
				videoUpStat.bitrate = element.bitrate;
				_this4._netstat.videoUp.packetCount = element.packetCount;
				videoUpStat.packetCount = element.packetCount;
				_this4._netstat.videoUp.packetsLost = element.packetsLost;
				videoUpStat.packetsLost = element.packetsLost;
				_this4._netstat.videoUp.nackCount = element.nackCount;
				videoUpStat.nackCount = element.nackCount;
				_this4._netstat.videoUp.jitter = element.jitter;
				videoUpStat.jitter = element.jitter;
				_this4._netstat.videoUp.pliCount = element.pliCount;
				videoUpStat.pliCount = element.pliCount;
				_this4._netstat.videoUp.fractionLost = element.fractionLost;
				videoUpStat.fractionLost = element.fractionLost;
				if (element.roundTripTime) {
					_this4._netstat.videoUp.roundTripTime = element.roundTripTime;
					videoUpStat.roundTripTime = element.roundTripTime;
				}

				isVideoUpStat = true;
			});

			this._setNetQulity();

			// 将统计数据暂存 _videoSendStats 中，以备上层get
			if (isVideoUpStat) {
				this._videoSendStats.set(streamId, videoUpStat);
			}

			/*
   this.pushLoggerToServer(null,
   	{
   		type: 'netStats',
   		appId: this._appId,
   		roomId: this.stats[0].roomId,
   		userId: this.stats[0].userId,
   		producer: 'webcam',
   		stats: stats
   	}
   );
   */
		}
	}, {
		key: 'startHeartBeat',
		value: function startHeartBeat() {
			var _this5 = this;

			if (!!this._reportInterval) {
				clearInterval(this._reportInterval);
				this._reportInterval = null;
			}

			logger.debug('startHeartBeat -- ');
			this._reportInterval = setInterval(function () {
				_this5._reportWebrtcStats();
			}, STAT_REPORT_INTERVAL);
		}
	}, {
		key: 'stopHeartBeat',
		value: function stopHeartBeat() {
			if (!!this._reportInterval) {
				clearInterval(this._reportInterval);
				this._reportInterval = null;
			}
		}
	}, {
		key: 'pushLoggerToServer',
		value: function pushLoggerToServer(eventType, data) {
			// 
			if (!config.log2Server) {
				return;
			}

			//... web api send data to log server.
			var data_ = '';
			if (eventType) {
				data_ = eventType + ' ' + (0, _stringify2.default)(data);
			} else {
				data_ = (0, _stringify2.default)(data);
			}

			fetch(Stats.LOGGER_SERVER_URL, {
				method: 'POST',
				mode: 'no-cors',
				cache: 'no-cache',
				headers: {
					'Content-Type': 'text/plain; charset=utf-8'
					// 'Content-Type': 'application/json; charset=utf-8',
				},
				redirect: 'follow',
				referrer: 'no-referrer',
				body: data_
			}).catch(function (error) {
				logger.error('pushLoggerToServer() error - ' + error.toString());
			}).then(function (response) {
				; // JSON.stringify(response);
			});
		}
	}, {
		key: 'consumerState',
		value: function consumerState(stat) {
			if (!config.stat2Server) return;

			fetch('https://' + this._domain + '/stats/', {
				method: 'POST',
				mode: 'no-cors',
				cache: 'no-cache',
				headers: {
					'Accept': 'application/json',
					'Content-Type': 'application/json'
				},
				redirect: 'follow',
				referrer: 'no-referrer',
				body: (0, _stringify2.default)(stat)
			}).catch(function (error) {
				logger.debug('consumerState() error - ' + error.toString());
			}).then(function (response) {
				; // JSON.stringify(response);
			});
		}
	}, {
		key: '_setNetQulity',
		value: function _setNetQulity() {
			var fractionLost = 0;
			var count = 0;
			var roundTripTime = 0;
			if (this._netstat.audioUp.packetCount !== 0) {
				count++;
				roundTripTime + this._netstat.audioUp.roundTripTime;
				// fractionLost += this._netstat.audioUp.fractionLost;
				fractionLost += this._netstat.audioUp.packetsLost / this._netstat.audioUp.packetCount;
			}

			if (this._netstat.audioDown.packetCount !== 0) {
				count++;
				roundTripTime + this._netstat.audioDown.roundTripTime;
				// fractionLost += this._netstat.audioDown.fractionLost;
				fractionLost += this._netstat.audioDown.packetsLost / this._netstat.audioDown.packetCount;
			}

			if (this._netstat.videoUp.packetCount !== 0) {
				count++;
				roundTripTime + this._netstat.videoUp.roundTripTime;
				// fractionLost += this._netstat.videoUp.fractionLost;
				fractionLost += this._netstat.videoUp.packetsLost / this._netstat.videoUp.packetCount;
			}

			if (this._netstat.videoDown.packetCount !== 0) {
				count++;
				roundTripTime + this._netstat.videoDown.roundTripTime;
				// fractionLost += this._netstat.videoDown.fractionLost;
				fractionLost += this._netstat.videoDown.packetsLost / this._netstat.videoDown.packetCount;
			}

			if (count !== 0) {
				roundTripTime /= count;

				this._netstat.fractionLost = fractionLost / count;
				this._netstat.roundTripTime = roundTripTime;
				this._netstat.quality = 1 - this._netstat.fractionLost;
			}
		}
	}, {
		key: 'sendTimeOutLog',
		value: function sendTimeOutLog(_ref) {
			var timesOfLinkGW = _ref.timesOfLinkGW,
			    linkGWTime = _ref.linkGWTime,
			    sendGWTime = _ref.sendGWTime,
			    sendEnterTime = _ref.sendEnterTime;

			var enter_timeout = {
				"glbId": uuid(),
				"appId": this._appId,
				"userId": this._userId,
				"roomId": this._roomId,
				"connectId": this._connectionId,
				"os": "WEB",
				"logTime": new Date().toISOString().replace(/a-z/ig, ' '),
				"timesOfLinkIplocal": this._iplocationInfo.reconnectTimes,
				timesOfLinkGW: timesOfLinkGW,
				"linkIplocalTime": this._iplocationInfo.connectedTime - this._iplocationInfo.firstConnectTime,
				"sendIplocalTime": this._iplocationInfo.connectedTime,
				linkGWTime: linkGWTime,
				sendGWTime: sendGWTime,
				sendEnterTime: sendEnterTime,
				"gwIp": this._gwInfo.sIp
			};
			this.pushLoggerToServer(EventType.ENTER_TIMEOUT, enter_timeout);
		}
	}, {
		key: 'sendFailLog',
		value: function sendFailLog(_ref2) {
			var timesOfLinkGW = _ref2.timesOfLinkGW,
			    linkGWTime = _ref2.linkGWTime,
			    sendGWTime = _ref2.sendGWTime,
			    sendEnterTime = _ref2.sendEnterTime,
			    role = _ref2.role,
			    result = _ref2.result;

			var event_fail = {
				"glbId": uuid(),
				"appId": this._appId,
				"userId": this._userId,
				"roomId": this._roomId,
				"connectId": this._connectionId,
				"os": "WEB",
				role: role,
				result: result,
				"logTime": new Date().toISOString().replace(/a-z/ig, ' '),
				"timesOfLinkIplocal": this._iplocationInfo.reconnectTimes,
				timesOfLinkGW: timesOfLinkGW,
				"linkIplocalTime": this._iplocationInfo.connectedTime - this._iplocationInfo.firstConnectTime,
				"sendIplocalTime": this._iplocationInfo.connectedTime,
				linkGWTime: linkGWTime,
				sendGWTime: sendGWTime,
				sendEnterTime: sendEnterTime,
				"innerDiff": 0,
				"totalDiff": 0,
				"gwIp": this._gwInfo.sIp
			};

			this.pushLoggerToServer(EventType.ENTER_FAIL, event_fail);
		}
	}, {
		key: 'audioUpStat',
		get: function get() {
			var _this6 = this;

			// 
			var d = new Date();
			var curTS = d.getTime();

			this._audioSendStats.forEach(function (value, index) {
				if (curTS - value.statTS > 3000) // 超过3s未更新，则失效删除
					{
						_this6._audioSendStats.delete(index);
					}
			});

			// 
			return this._audioSendStats;
		}
	}, {
		key: 'videoUpStat',
		get: function get() {
			var _this7 = this;

			// 
			var d = new Date();
			var curTS = d.getTime();

			this._videoSendStats.forEach(function (value, index) {
				if (curTS - value.statTS > 3000) // 超过3s未更新，则失效删除
					{
						_this7._videoSendStats.delete(index);
					}
			});

			// 
			return this._videoSendStats;
		}
	}, {
		key: 'audioDownStat',
		get: function get() {
			var _this8 = this;

			// 
			var d = new Date();
			var curTS = d.getTime();

			this._audioRecvStats.forEach(function (value, index) {
				if (curTS - value.statTS > 3000) // 超过3s未更新，则失效删除
					{
						_this8._audioRecvStats.delete(index);
					}
			});

			// 
			return this._audioRecvStats;
		}
	}, {
		key: 'videoDownStat',
		get: function get() {
			var _this9 = this;

			// 
			var d = new Date();
			var curTS = d.getTime();

			this._videoRecvStats.forEach(function (value, index) {
				if (curTS - value.statTS > 3000) // 超过3s未更新，则失效删除
					{
						_this9._videoRecvStats.delete(index);
					}
			});

			// 
			return this._videoRecvStats;
		}
	}, {
		key: 'summarize',
		get: function get() {
			return this._summarize;
		}

		//

	}, {
		key: 'netState',
		get: function get() {
			return this._netstat;
		}
	}, {
		key: 'audioOpen',
		set: function set(isOpen) {
			this._isAudioOpen = isOpen;
		}
	}, {
		key: 'videoOpen',
		set: function set(isOpen) {
			this._isVideoOpen = isOpen;
		}
	}], [{
		key: 'LOGGER_SERVER_URL',
		get: function get() {
			return 'https://log.wushuangtech.com:15100';
		}
	}]);
	return Stats;
}();

// eslint-disable-next-line no-undef


module.exports = Stats;

/***/ }),

/***/ "./lib/stream.js":
/*!***********************!*\
  !*** ./lib/stream.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var _promise = __webpack_require__(/*! babel-runtime/core-js/promise */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js");

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = __webpack_require__(/*! babel-runtime/regenerator */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/regenerator/index.js");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = __webpack_require__(/*! babel-runtime/helpers/asyncToGenerator */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/asyncToGenerator.js");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _stringify = __webpack_require__(/*! babel-runtime/core-js/json/stringify */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/json/stringify.js");

var _stringify2 = _interopRequireDefault(_stringify);

var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(/*! babel-runtime/helpers/classCallCheck */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(/*! babel-runtime/helpers/createClass */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(/*! babel-runtime/helpers/possibleConstructorReturn */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(/*! babel-runtime/helpers/inherits */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js");

var _inherits3 = _interopRequireDefault(_inherits2);

var _map = __webpack_require__(/*! babel-runtime/core-js/map */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/map.js");

var _map2 = _interopRequireDefault(_map);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var browser = __webpack_require__(/*! bowser */ "./node_modules/_bowser@1.9.4@bowser/src/bowser.js");
var hark = __webpack_require__(/*! hark */ "./node_modules/_hark@1.2.3@hark/hark.js");

var config = __webpack_require__(/*! ./config */ "./lib/config.js");
var logger = __webpack_require__(/*! ./logger */ "./lib/logger.js")('<Stream>');
var EventEmitter = __webpack_require__(/*! events */ "./node_modules/_events@3.1.0@events/events.js").EventEmitter;

var S_STREAM_MAP = new _map2.default();

// 
// navigator.mediaDevices.getSupportedConstraints();
/**
 * Stream Object and it's functions.
 */

var Stream = function (_EventEmitter) {
	(0, _inherits3.default)(Stream, _EventEmitter);

	function Stream(spec) {
		(0, _classCallCheck3.default)(this, Stream);

		var _this = (0, _possibleConstructorReturn3.default)(this, (Stream.__proto__ || (0, _getPrototypeOf2.default)(Stream)).call(this));

		if (typeof spec.userID === 'undefined' || spec.userID === null) {
			// throw new TypeError('userID')
			spec.userID = '';
		}

		spec.userID = spec.userID + '';
		if (spec.userID.trim() === '') {
			// throw new TypeError('userID is empty')
			spec.userID = '';
		}

		if (typeof spec.streamID === 'undefined' || spec.streamID === null) {
			spec.streamID = spec.userID;
		}

		spec.streamID = spec.streamID + '';
		if (spec.streamID.trim() === '') {
			spec.streamID = spec.userID;
		}

		// The specific configure of stream.
		// {
		//   streamID: '',
		//   userID: '',
		//   audio: @type {Boolean},
		//   video: @type {Boolean},
		//   screen: @type {Boolean},
		//   attributes: {
		//      // resolution was obsolated.
		//      resolution: 'sif'|'vga'|'hd720p' | { width: @type{number}, height: @type{number} }
		//      videoProfile: @type {string},
		//      // Ref: config.js: videoProfile.
		//      // NOTE: the 'width and height' can concurrent with 'sif|vga|hd720p' setting, but the prority more height of 'width and height'. 
		//      minFrameRate: @type {number},
		//      maxFrameRate: @type {number},
		//      idealFrameRate: @type {number} (NOTE: option)
		//   },
		//   codecOptions: {
		//      startBitrate: @type {number},
		//      maxBitrate: @{number},
		//      minBitrate: @type {number}
		//   },
		//   // NOTE: Unit is bits.
		//   subStream: true | false
		// }
		_this._spec = spec;

		logger.debug('constructor() -- spec: ' + (0, _stringify2.default)(spec));

		// 原始 stream
		_this._streamObjOrigin = null;
		// The webrtc stream object.
		_this._streamObj = null;

		// stream 类型：producer、consumer
		_this._streamType = '';
		if (!!_this._spec.streamType) {
			_this._streamType = spec.streamType;
		}

		//
		_this._innerStreamID = '';
		// TODO : use spec.streamID; // 注：当来自远端的 stream 时，以远端 streamID 为 streamID

		// stream identify by consumter layer.
		_this._customStreamID = _this._spec.streamID;

		// peer idnetify indicate which peer belong to.
		_this._userId = _this._spec.userID;

		// the audio volume.
		_this._volume = 0.0;

		// is local stream?
		_this._isLocalStream = false;

		// 
		_this._audioSource = null;
		if (!!_this._spec.audioSource) {
			_this._audioSource = _this._spec.audioSource;

			// 使用外部 AudioSource，不在 Stream 内创建打开 Audio 设备
			_this._spec.audio = false;
		}

		_this._videoSource = null;
		if (!!_this._spec.videoSource) {
			_this._videoSource = _this._spec.videoSource;

			// 使用外部 VideoSource，不在 Stream 内创建打开 Video 设备
			_this._spec.video = false;
		}

		// specifiy source for producer source.
		_this._source = _this._spec.source;

		// is this stream subscribed.
		_this._subscribed = false;

		// is closed
		_this._closed = false;

		// is sub-stream
		_this._isSubStream = !_this._spec.subStream ? false : _this._spec.subStream;

		// the resulotion of the 4:3 scales
		_this._keyResolution = 480;

		// is mobile device
		_this._isMobile = /mobile/i.test(navigator.userAgent);

		// is this stream published.
		_this._published = false;

		// video: 0,screen: 1, file: 2, videoMixer: 3, camera: 4
		_this._videoType = _this._spec.videoType || _this._spec.screen ? 1 : 0;

		// 如果再 未publish 状态下 replayceTrack，则 _needUpdateTrack 为 true，待 该路流 publish 时，执行 updateTrack
		_this._needUpdateTrack = false; // for replaceTrack

		_this._gainNode = null;
		// webAudio 上下文，操作音频的接口
		_this._audioCtx = null;

		// 
		_this._specialCameraId = '';
		_this._specialMicId = '';

		// 音频 profile -- 取值自 config.audioProfileSpec
		_this._audioProfile = null;
		return _this;
	}

	/**
  * Initialize stream for camera(with mic) or screen(with mic).
  * 
  * @public
  * @param onSuccess
  * @param onFailure
  */


	(0, _createClass3.default)(Stream, [{
		key: 'init',
		value: function () {
			var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(onSuccess, onFailure) {
				var _this2 = this;

				var constraints, videoSpec, resolution, deviceId, _deviceId, latest_chrome, _constraints;

				return _regenerator2.default.wrap(function _callee3$(_context3) {
					while (1) {
						switch (_context3.prev = _context3.next) {
							case 0:
								logger.debug('API init() -- this._userId: ' + this._userId + ' this._spec: ' + (0, _stringify2.default)(this._spec));

								// TODO : 设备拔插
								navigator.mediaDevices.ondevicechange = function (e) {
									logger.debug('mediaDevices.ondevicechange - ' + e);
								};

								// 
								this._streamType = 'producer';

								// constrainable properties comes from this.spec variable.
								constraints = null;


								if (this._spec.video || this._spec.screen) {
									this._enableVideoTrack = true;
								}

								videoSpec = {
									width: {
										min: config.videoSpec.width.min,
										ideal: config.videoSpec.width.ideal,
										max: config.videoSpec.width.max
									},
									height: {
										min: config.videoSpec.height.min,
										ideal: config.videoSpec.height.ideal,
										max: config.videoSpec.height.max
									},
									frameRate: {
										min: config.videoSpec.frameRate.min,
										ideal: config.videoSpec.frameRate.ideal,
										max: config.videoSpec.frameRate.max
									}
								};


								if (this._isMobile) {
									videoSpec.facingMode = this._spec.useBackCam ? { exact: 'environment' } : 'user';
								}
								if (this._spec.attributes) {
									// Obsolate the attribute.resolution field.
									// But Keep the attribute.resolution field for compatible less than 3.2.0 version's SDK.
									if (this._spec.attributes.resolution) {
										if (this._spec.attributes.resolution.toUpperCase() === 'HD720P') {
											videoSpec.width.ideal = config.videoAttributes.hd720p[0];
											videoSpec.height.ideal = config.videoAttributes.hd720p[1];
										}

										if (this._spec.attributes.resolution.toUpperCase() === 'VGA') {
											videoSpec.width.ideal = config.videoAttributes.vga[0];
											videoSpec.height.ideal = config.videoAttributes.vga[1];
										}

										if (this._spec.attributes.resolution.toUpperCase() === 'SIF') {
											videoSpec.width.ideal = config.videoAttributes.sif[0];
											videoSpec.height.ideal = config.videoAttributes.sif[1];
										}

										if (typeof this._spec.attributes.width !== 'undefined' && typeof this._spec.attributes.height !== 'undefined') {
											videoSpec.width.ideal = this._spec.attributes.width;
											videoSpec.height.ideal = this._spec.attributes.height;
										}
									}

									if (this._spec.attributes.minFrameRate && this._spec.attributes.maxFrameRate) {
										videoSpec.frameRate.min = this._spec.attributes.minFrameRate;
										videoSpec.frameRate.max = this._spec.attributes.maxFrameRate;
										if (typeof this._spec.attributes.idealFrameRate !== 'undefined') {
											videoSpec.frameRate.ideal = this._spec.attributes.idealFrameRate;
										} else {
											videoSpec.frameRate.ideal = Math.floor((this._spec.attributes.maxFrameRate - this._spec.attributes.minFrameRate) / 2 + this._spec.attributes.minFrameRate);
										}
									}

									// leaveage the videoProfile filed from the 3.2.0 version.
									if (this._spec.attributes.videoProfile) {
										resolution = this._getResolutionByVideoProfile(this._spec.attributes.videoProfile);

										videoSpec.width.ideal = resolution.width;
										videoSpec.height.ideal = resolution.height;
									}
								}

								// Determine the audio | video | screen stream constrains.

								if (!(this._spec.video && this._spec.audio)) {
									_context3.next = 14;
									break;
								}

								/**has video and audio */
								constraints = {
									video: videoSpec
								};

								if (this._spec.microphoneId) {
									deviceId = this._spec.microphoneId ? { exact: this._spec.microphoneId } : undefined;

									constraints.audio = {
										deviceId: deviceId,
										sampleRate: config.audioSpec.sampleRate,
										channelCount: config.audioSpec.channelCount
										// 记录设备ID
									};this._specialMicId = deviceId;
								} else {
									constraints.audio = {
										audio: true
										// sampleRate: config.audioSpec.sampleRate,    // for compatibility
										// channelCount: config.audioSpec.channelCount // for compatibility
									};
								}

								if (this._spec.cameraId) {
									constraints.video.deviceId = this._spec.cameraId ? { exact: this._spec.cameraId } : undefined;
									// 记录 deviceId
									this._specialCameraId = constraints.video.deviceId;
								}
								_context3.next = 37;
								break;

							case 14:
								if (!(this._spec.audio && !this._spec.screen && !this._spec.video)) {
									_context3.next = 19;
									break;
								}

								/** only has audio*/
								constraints = {
									video: false
								};

								if (this._spec.microphoneId) {
									_deviceId = this._spec.microphoneId ? { exact: this._spec.microphoneId } : undefined;

									constraints.audio = { deviceId: _deviceId };
									// 记录设备ID
									this._specialMicId = _deviceId;
								} else {
									constraints.audio = {
										audio: true
										// sampleRate: config.audioSpec.sampleRate,    // compatibility
										// channelCount: config.audioSpec.channelCount // compatibility
									};
								}
								_context3.next = 37;
								break;

							case 19:
								if (!(this._spec.video && !this._spec.audio && !this._spec.screen)) {
									_context3.next = 24;
									break;
								}

								/** only has video */
								constraints = {
									audio: false,
									video: videoSpec
								};

								if (this._spec.cameraId) {
									constraints.video.deviceId = this._spec.cameraId ? { exact: this._spec.cameraId } : undefined;
									// 记录 deviceId
									this._specialCameraId = constraints.video.deviceId;
								}
								_context3.next = 37;
								break;

							case 24:
								if (!(this._spec.screen && this._spec.video)) {
									_context3.next = 28;
									break;
								}

								/** has video and screen */
								logger.warn('API init() error - cannot set screen and video simultaneously with true. the video property more high than screen then will ignore the screen setting.');
								_context3.next = 37;
								break;

							case 28:
								if (!this._spec.screen) {
									_context3.next = 37;
									break;
								}

								/** has screen */
								latest_chrome = false;

								if (!(browser.name.toLowerCase() === 'chrome')) {
									_context3.next = 35;
									break;
								}

								if (!(parseInt(browser.version, 10) >= 72)) {
									_context3.next = 35;
									break;
								}

								latest_chrome = true;
								_context3.next = 35;
								return this._startScreenCapture().then(function () {
									var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(s) {
										var audio, track;
										return _regenerator2.default.wrap(function _callee$(_context) {
											while (1) {
												switch (_context.prev = _context.next) {
													case 0:
														_this2._isLocalStream = true;

														// 
														_this2._streamObjOrigin = s;
														_this2.streamObj = s;
														_this2._screenStreamEnded(s);

														_this2._innerStreamID = Stream._getInnerStreamID(_this2.userID, _this2.userID, 0, _this2, _this2._isSubStream);
														// if screen simultaneously go with audio track.

														if (!_this2._spec.audio) {
															_context.next = 18;
															break;
														}

														_context.prev = 6;
														_context.next = 9;
														return _this2.audioStream();

													case 9:
														audio = _context.sent;
														track = audio.getAudioTracks()[0];

														_this2.audioTracks = track;
														_context.next = 18;
														break;

													case 14:
														_context.prev = 14;
														_context.t0 = _context['catch'](6);

														logger.error('API init() error - stream of screen init failed for obtain audio track. error: ' + (0, _stringify2.default)(_context.t0));
														onFailure(_context.t0);

													case 18:

														logger.debug('API init() _startScreenCapture() success - this.userID: ' + _this2.userID + ' this._innerStreamID: ' + _this2._innerStreamID);

														onSuccess();

													case 20:
													case 'end':
														return _context.stop();
												}
											}
										}, _callee, _this2, [[6, 14]]);
									}));

									return function (_x3) {
										return _ref2.apply(this, arguments);
									};
								}()).catch(function (err) {
									logger.error('API init() error - screen capture error. error: ' + (0, _stringify2.default)(err));
									return onFailure(err);
								});

							case 35:

								if (!latest_chrome) {
									getScreenId(function (error, sourceId, screen_constraints) {
										// error    == null || 'permission-denied' || 'not-installed' || 'installed-disabled' || 'not-chrome'
										// sourceId == null || 'string' || 'firefox'

										if (sourceId !== 'firefox') {
											screen_constraints = {
												video: {
													mandatory: {
														chromeMediaSource: 'screen',
														maxWidth: 1920,
														maxHeight: 1080,
														minAspectRatio: 1.77
													}
												}
											};

											if (error === 'permission-denied') return alert('Permission is denied.');
											if (error === 'not-chrome') return alert('Please use chrome.');

											if (!error && sourceId) {
												screen_constraints.video.mandatory.chromeMediaSource = 'desktop';
												screen_constraints.video.mandatory.chromeMediaSourceId = sourceId;
											}
										}

										navigator.getUserMedia = navigator.mozGetUserMedia || navigator.webkitGetUserMedia;
										navigator.getUserMedia(screen_constraints, function () {
											var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(stream) {
												var audio, track;
												return _regenerator2.default.wrap(function _callee2$(_context2) {
													while (1) {
														switch (_context2.prev = _context2.next) {
															case 0:
																_this2._isLocalStream = true;

																_this2._streamObjOrigin = stream;
																_this2.streamObj = stream;
																_this2._innerStreamID = Stream._getInnerStreamID(_this2.userID, _this2.userID, 0, _this2, _this2._isSubStream);
																// if screen simultaneously go with audio track.

																if (!_this2._spec.audio) {
																	_context2.next = 17;
																	break;
																}

																_context2.prev = 5;
																_context2.next = 8;
																return _this2.audioStream();

															case 8:
																audio = _context2.sent;
																track = audio.getAudioTracks()[0];

																_this2.audioTracks = track;
																_context2.next = 17;
																break;

															case 13:
																_context2.prev = 13;
																_context2.t0 = _context2['catch'](5);

																logger.error('API init() getScreenId() error - stream of screen init failed for obtain audio track. error: ' + _context2.t0.toString());
																onFailure(_context2.t0);

															case 17:

																logger.debug('API init() getScreenId() success - this.userID: ' + _this2.userID + ' this._innerStreamID: ' + _this2._innerStreamID + ' screen_constraints: ' + (0, _stringify2.default)(screen_constraints));

																onSuccess();
																// share this 'MediaStream' object using RTCPeerConnection API

															case 19:
															case 'end':
																return _context2.stop();
														}
													}
												}, _callee2, _this2, [[5, 13]]);
											}));

											return function (_x4) {
												return _ref3.apply(this, arguments);
											};
										}(), function (error) {
											logger.error('API init() getScreenId() error: ' + (0, _stringify2.default)(error));
											onFailure(error);
										});
									}, this._spec.audio);
								}

								return _context3.abrupt('return');

							case 37:

								if (this._spec.video || this._spec.audio) {
									navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {
										_this2._isLocalStream = true;

										_this2._streamObjOrigin = stream;

										var videoTracks = stream.getVideoTracks();
										var audioTracks = stream.getAudioTracks();
										if (audioTracks.length > 0) {
											if (!_this2._audioCtx) {
												var audioContext = window.AudioContext || window.webkitAudioContext;
												_this2._audioCtx = new audioContext();
											}

											if (!_this2._gainNode) {
												// 音量调节节点
												_this2._gainNode = _this2._audioCtx.createGain();
												_this2._gainNode.gain.value = 1;
											}

											if (!!_this2._audioCtx && !!_this2._gainNode) {
												var source = _this2._audioCtx.createMediaStreamSource(stream);
												_this2.target = _this2._audioCtx.createMediaStreamDestination();
												source.connect(_this2._gainNode);
												_this2._gainNode.connect(_this2.target);
												if (videoTracks.length > 0) {
													_this2.target.stream.addTrack(videoTracks[0]);
												}
												_this2.streamObj = _this2.target.stream;
											} else {
												_this2.streamObj = stream;
											}
										} else {
											_this2.streamObj = stream;
										}

										// the inner stream id.
										_this2._innerStreamID = Stream._getInnerStreamID(_this2.userID, _this2.userID, 0, _this2, _this2._isSubStream);
										logger.debug('API init() getUserMedia() success - this.userID: ' + _this2.userID + ' this._innerStreamID: ' + _this2._innerStreamID + ' constraints: ' + (0, _stringify2.default)(constraints));

										onSuccess();
									}).catch(function (err) {
										logger.error('API init() getUserMedia() error - ' + err.toString());
										onFailure(err);
									});
								} else if (this._spec.mediasource) {
									_constraints = {
										audio: true,
										video: false
									};


									navigator.mediaDevices.getUserMedia(_constraints).then(function (stream) {
										_this2._isLocalStream = true;

										var videoTracks = stream.getVideoTracks();
										var audioTracks = stream.getAudioTracks();

										var oldTrack = null;
										if (audioTracks.length > 0) {
											oldTrack = audioTracks[0];
											stream.removeTrack(oldTrack);
										}
										// 
										if (!!_this2._audioSource) {
											stream.addTrack(_this2._audioSource);
										}
										if (!!_this2._videoSource) {
											stream.addTrack(_this2._videoSource);
										}

										_this2.streamObj = stream;

										// the inner stream id.
										_this2._innerStreamID = Stream._getInnerStreamID(_this2.userID, _this2.userID, 0, _this2, _this2._isSubStream);
										logger.debug('API init() getUserMedia() success - this.userID: ' + _this2.userID + ' this._innerStreamID: ' + _this2._innerStreamID + ' constraints: ' + (0, _stringify2.default)(_constraints));

										onSuccess();
									}).catch(function (e) {
										logger.error('API init() getUserMedia() error - ' + e.toString());
										onFailure(e);
									});
								}

							case 38:
							case 'end':
								return _context3.stop();
						}
					}
				}, _callee3, this);
			}));

			function init(_x, _x2) {
				return _ref.apply(this, arguments);
			}

			return init;
		}()

		/**
   * Only obtain audio stream.
   * 
   * @private
   */

	}, {
		key: 'audioStream',
		value: function audioStream() {
			var _this3 = this;

			logger.debug('API audioStream() - this._userId: ' + this._userId + ' this._innerStreamID: ' + this._innerStreamID);

			// only obtain audio stream.
			var constraints = {
				audio: true

				// mandatory microphone device.
			};if (this._spec.microphoneId) {
				if (this._spec.microphoneId.trim() !== '') {
					constraints.deviceId = this._spec.microphoneId;
					// 记录设备ID
					this._specialMicId = constraints.deviceId;
				}
			}

			navigator.getUserMedia = navigator.mozGetUserMedia || navigator.webkitGetUserMedia;
			return new _promise2.default(function (resovle, reject) {
				navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {
					if (!_this3._audioCtx) {
						var audioContext = window.AudioContext || window.webkitAudioContext;
						_this3._audioCtx = new audioContext();
					}

					if (!_this3._gainNode) {
						// 音量调节节点
						_this3._gainNode = _this3._audioCtx.createGain();
						_this3._gainNode.gain.value = 1;
					}

					if (!!_this3._audioCtx && !!_this3._gainNode) {
						var source = _this3._audioCtx.createMediaStreamSource(stream);
						_this3.target = _this3._audioCtx.createMediaStreamDestination();
						source.connect(_this3._gainNode);
						_this3._gainNode.connect(_this3.target);
						resovle(_this3.target.stream);
					} else {
						resovle(stream);
					}
				}).catch(function (error) {
					reject(error);
				});
			});
		}

		/**
   * Get the inner stream identity.
   * 
   * @private
   * @param {string} userID 
   * @param {string} streamID 
   * @param {string} number 
   * @param {Any} stream 
   * @param {Boolean} isSubStream 
   */

	}, {
		key: '_speechEvents',


		/**
   * @private
   * 
   * @param {Any} stream 
   */
		value: function _speechEvents(stream) {
			var _this4 = this;

			this._speach = new hark(stream, {});
			var that = this;
			this._speach.on('volume_change', function (volume, threshold) {
				if (volume < threshold) return;
				that._volume = Math.round((volume - threshold) * -10 / threshold);
				_this4.emit('volume-change', { userID: _this4.userID, volume: that._volume });
			});

			this._speach.on('speaking', function () {
				_this4.emit('speaking', { userID: _this4.userID });
			});

			this._speach.on('stopped_speaking', function () {
				that._volume = 0;
				// 
				_this4.emit('stopped-speaking', { userID: _this4.userID });
			});
		}

		/**
   * Get stream object property
   * 
   * @private
   */

	}, {
		key: 'getId',

		/**
   * Get stream id.
   * 
   * @public
   */
		value: function getId() {
			return this._customStreamID;
		}

		/**
   * Get attributes.
   * 
   * @private
   */

	}, {
		key: 'getAttributes',
		value: function getAttributes() {}

		/**
   * Get audio volume
   * 
   * @public
   */

	}, {
		key: 'getAudioLevel',
		value: function getAudioLevel() {
			return this._volume;
		}

		/**
   * Check has video track.
   * 
   * @public
   */

	}, {
		key: 'hasVideo',
		value: function hasVideo() {
			// checking video presence
			if (this._streamObj === null) return false;

			return !!this._streamObj.getVideoTracks().length;
		}

		/**
   * Check has audio track.
   * 
   * @public
   */

	}, {
		key: 'hasAudio',
		value: function hasAudio() {
			// checking audio presence
			if (this._streamObj === null) return false;

			return !!this._streamObj.getAudioTracks().length;
		}

		/**
   * Enable video track.
   * 
   * @public
   */

	}, {
		key: 'enableVideo',
		value: function enableVideo() {
			if (!this._isLocalStream) {
				logger.error('API enableVideo() error - only local stream can enable video, you can utilize subscribe function.');
				throw Error('only local stream can enable video, you can utilize subscribe function.');
			}

			logger.debug('API enableVideo() - this._userId: ' + this._userId + ' this._innerStreamID: ' + this._innerStreamID);
			if (this._published) {
				if (global.g_client !== null) {
					global.g_client.resumeWebcam(this);
				} else {
					logger.error('API enableVideo() error - global.g_client is NULL');
				}
			} else {
				if (this._video) {
					this._video.play();
				}
			}
		}

		/**
   * Disable video track.
   * 
   * @public
   */

	}, {
		key: 'disableVideo',
		value: function disableVideo() {
			if (!this._isLocalStream) {
				logger.error('API disableVideo() error - only local stream can enable video, you can utilize unsubscribe function.');

				throw Error('only local stream can enable video, you can utilize unsubscribe function.');
			}

			logger.debug('API disableVideo() - this._userId: ' + this._userId + ' this._innerStreamID: ' + this._innerStreamID);
			if (global.g_client !== null) {
				global.g_client.pauseWebcam(this);
			} else {
				logger.error('API disableVideo() error - global.g_client is NULL');
			}
		}

		/**
   * Enable audio track.
   * 
   * @public
   */

	}, {
		key: 'enableAudio',
		value: function enableAudio() {
			if (!this._isLocalStream) {
				logger.error('API enableAudio() error - only local stream can enable video, you can utilize subscribe function.');

				throw Error('only local stream can enable video, you can utilize subscribe function.');
			}

			logger.debug('API enableAudio() - this._userId: ' + this._userId + ' this._innerStreamID: ' + this._innerStreamID);
			if (this._published) {
				if (global.g_client !== null) {
					global.g_client.resumeMic(this);
				} else {
					logger.error('API enableAudio() error - global.g_client is NULL');
				}
			}
		}

		/**
   * Disable audio track.
   * 
   * @public
   */

	}, {
		key: 'disableAudio',
		value: function disableAudio() {
			if (!this._isLocalStream) {
				logger.error('API disableAudio() error - only local stream can enalbe video, you can utilize unsubscribe function.');

				throw Error('only local stream can enalbe video, you can utilize unsubscribe function.');
			}

			logger.debug('API disableAudio() - this._userId: ' + this._userId + ' this._innerStreamID: ' + this._innerStreamID);
			if (global.g_client !== null) {
				global.g_client.pauseMic(this);
			} else {
				logger.error('API disableAudio() error - global.g_client is NULL');
			}
		}

		/**
   * @public
   */

	}, {
		key: 'enableVideoAndAudio',
		value: function enableVideoAndAudio() {
			logger.debug('API enableVideoAndAudio() - this._userId: ' + this._userId + ' this._innerStreamID: ' + this._innerStreamID);

			if (global.g_client !== null) {
				global.g_client.resumeMic();
				global.g_client.resumeWebcam(this);
			} else {
				logger.error('API enableVideoAndAudio() error - global.g_client is NULL');
			}
		}

		/**
   * @public
   */

	}, {
		key: 'disableVideoAndAudio',
		value: function disableVideoAndAudio() {
			logger.debug('API disableVideoAndAudio() - this._userId: ' + this._userId + ' this._innerStreamID: ' + this._innerStreamID);

			if (global.g_client !== null) {
				global.g_client.pauseMic(this);
				global.g_client.pauseWebcam(this);
			} else {
				logger.error('API disableVideoAndAudio() error - global.g_client is NULL');
			}
		}

		// 
		// profile : 音频 profile
		// 取值 : 'speech_low_quality' | 'speech_standard' | 'music_standard' | 'standard_stereo' | 'high_quality' | 'high_quality_stereo'

	}, {
		key: 'setAudioProfile',
		value: function setAudioProfile(profile) {
			var audioProfile = config.audioProfileSpec.get(profile);
			this._audioProfile = !audioProfile ? null : audioProfile;

			// 
			logger.debug('API setAudioProfile() profile: ' + profile + ' ' + (0, _stringify2.default)(this._audioProfile));
		}

		// 

	}, {
		key: 'getAudioProfile',
		value: function getAudioProfile() {
			return this._audioProfile;
		}

		/**
   * Set video profile.
   * 
   * @public
   * @param {string} videoProfile defined in the config.js.
   * @param {function} onSuccess 
   * @param {function} onFailure 
   * @param {Any} codecOptions   
   *   {
   *       startBitrate: @type {number},
   *       maxBitrate: @type {number},
   *       minBitrate: @type {number}
   *   }
   */

	}, {
		key: 'setVideoProfile',
		value: function setVideoProfile(videoProfile, onSuccess, onFailure) {
			var _this5 = this;

			var codecOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

			logger.debug('API setVideoProfile() - this._userId: ' + this._userId + ' videoProfile: ' + videoProfile + ' this._innerStreamID: ' + this._innerStreamID);

			// check parames.
			if (this._streamObj === null) {
				logger.error('API setVideoProfile() error - stream is null, please init it at first.');
				throw Error('stream is null, please init it at first.');
			}

			if (!this._isLocalStream) {
				logger.error('API setVideoProfile() error - only local stream can set video profile.');
				throw Error('only local stream can set video profile.');
			}

			if (typeof onSuccess !== 'function') {
				logger.error('API setVideoProfile() error - onSuccess have to be a function.');
				throw TypeError('onSuccess have to be a function.');
			}

			if (typeof onFailure !== 'function') {
				logger.error('API setVideoProfile() error - onFailure have to be a function.');
				throw TypeError('onFailure have to be a function.');
			}

			var tracks = this._streamObj.getVideoTracks();
			if (tracks.length <= 0) {
				logger.error('API setVideoProfile() error - have no video track.');

				return;
			}

			if (codecOptions) {
				if (!codecOptions.minBandwidth || !codecOptions.maxBandwidth || !codecOptions.startBitrate) {
					logger.error('API setVideoProfile() error - codecOptions parameters invalid.');
					throw TypeError(codecOptions);
				}

				if (typeof codecOptions.minBandwidth !== 'number' || typeof codecOptions.maxBandwidth !== 'number' || typeof codecOptions.startBitrate !== 'number') {
					logger.error('API setVideoProfile() error - codecOptions parameters invalid.');
					throw TypeError(codecOptions);
				}

				if (codecOptions.minBandwidth >= codecOptions.maxBandwidth) {
					logger.error('API setVideoProfile() error - codecOptions parameters invalid.');
					throw TypeError('minBandwidth > = maxBandwidth');
				}

				this._spec.codecOptions = codecOptions;
			}

			var track = tracks[0];
			var constraints = void 0;
			var resolution = this._getResolutionByVideoProfile(videoProfile);
			var in_width = resolution.width;
			var in_height = resolution.height;
			constraints = {
				width: in_width,
				height: in_height
				// aspectRatio: 3 / 2
			};

			track.applyConstraints(constraints).then(function () {
				logger.debug('API setVideoProfile() track.applyConstraints ok -- constraints: ' + (0, _stringify2.default)(constraints));

				_this5.replaceTrack(track);
				onSuccess('applyConstraint success');
			}).catch(function (err) {
				//
				logger.error('API setVideoProfile() error - track.applyConstraints failed.');

				onFailure(err);
			});
		}

		/**
   * Get video profile.
   * @public
   */

	}, {
		key: 'getVideoProfile',
		value: function getVideoProfile() {
			if (!this._streamObj) {
				logger.error('API getVideoProfile() error - this._streamObj is NULL');
				return {};
			}

			var mediaTracks = this._streamObj.getVideoTracks();
			if (mediaTracks.length <= 0) {
				logger.error('API getVideoProfile() error - getVideoProfile: no video track');
				return {};
			}

			var setting = mediaTracks[0].getSettings();
			var resoultion = {
				width: setting.width,
				height: setting.height
			};

			logger.debug('API getVideoProfile() - this._userId: ' + this._userId + ' this._innerStreamID: ' + this._innerStreamID + ' resoultion: ' + (0, _stringify2.default)(resoultion));

			return resoultion;
		}

		/**
   * Set screen profile.
   * TODO.
   */

	}, {
		key: 'setScreenProfile',
		value: function setScreenProfile() {}

		/**
   * Play stream.
   * 
   * @public
   * @param {string} elementID. video|audio tag id
   * @param {string} assetsURL
  * @param {boolen} isControls show control panel 
   */

	}, {
		key: 'play',
		value: function play(elementID, isControls, assetsURL) {
			logger.debug('API play() - this._userId: ' + this._userId + ' this._innerStreamID: ' + this._innerStreamID);

			if (!this._streamObj) {
				logger.error('API play() error - stream is NULL.');
				throw Error('stream is null, please init it at first.');
			}

			if (this.type === 'audio') {
				/*
    this.audioElement = document.createElement('audio');
    this.audioElement.srcObject = this._streamObj;
    */
				return this.audioElement.play();
			}
			this._video = document.getElementById(elementID);
			if (!this._video) {
				logger.error('API play() error - Not found video -- id: ' + elementID + '.');
				throw Error('video id can not find ' + elementID);
			}

			if (!this._streamObj.active) {
				logger.debug('API play() - stream active is false');
			}

			// TODO : this._video.muted = Boolean(this.audioElement);
			this._video.autoplay = true;
			this._video.controls = !!isControls; // false;
			this._video.playsinline = true;
			this._video.srcObject = this._streamObj;
		}

		/**
   * Stop stream.
   */

	}, {
		key: 'stop',
		value: function stop() {}

		/**
   * Close stream.
   * 
   * @public
   */

	}, {
		key: 'close',
		value: function close() {
			logger.debug('API close() - this._userId: ' + this._userId + ' this._innerStreamID: ' + this._innerStreamID);

			var client = window.g_client;
			if (this._closed) {
				return;
			}

			if (!this._streamObj) {
				logger.error('API close() error - stream is null, please init it at first.');
				return;
			}

			// TODO : 对 stream 增加 类型（producer、consumer）
			if (client) {
				var micProducer = client._mapMicProducers.get(this._innerStreamID),
				    webcamProducer = client._mapWebcamProducers.get(this._innerStreamID);
				if (micProducer) micProducer.pause();
				if (webcamProducer) webcamProducer.close();
			}

			this._streamObj.getTracks().forEach(function (track) {
				return track.stop();
			});
			this._streamObj = null;
			this._streamObjOrigin = null;

			this.removeAllListeners();
			// S_STREAM_MAP.delete(this._innerStreamID);
			this._closed = true;

			if (this._video) {
				this._video.srcObject = null;
			}
			this._gainNode = null;
			this._audioCtx = null;

			//stream.stop() was deprecated.
			//ref: https://stackoverflow.com/questions/34966809/stop-kill-webrtc-media-stream
		}

		/**
   * @private
   */

	}, {
		key: '_startScreenCapture',
		value: function _startScreenCapture() {
			var videoConstraints = {
				aspectRatio: config.screenSpec.s_1080p.maxAspectRatio,
				// 'deviceId': 'screen:0:0',
				frameRate: config.screenSpec.s_frameRate,
				height: config.screenSpec.s_1080p.maxHeight,
				resizeMode: 'crop-and-scale',
				width: config.screenSpec.s_1080p.maxWidth,
				cursor: 'always'
				// 'displaySurface': 'monitor',
				// logicalSurface: true
			};

			var displayMediaStreamConstraints = {
				video: videoConstraints
			};

			if (navigator.getDisplayMedia) {
				return navigator.getDisplayMedia(displayMediaStreamConstraints);
			} else if (navigator.mediaDevices.getDisplayMedia) {
				return navigator.mediaDevices.getDisplayMedia(displayMediaStreamConstraints);
			} else {
				return navigator.mediaDevices.getUserMedia({ video: { mediaSource: 'screen' } });
			}
		}

		/**
   * End stream(of screen) track.
   *
   * @private
   * @param {Any} track 
   */

	}, {
		key: '_screenStreamEnded',
		value: function () {
			var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(stream) {
				var _this6 = this;

				var track;
				return _regenerator2.default.wrap(function _callee4$(_context4) {
					while (1) {
						switch (_context4.prev = _context4.next) {
							case 0:
								track = stream.getVideoTracks()[0];

								track.onended = function (e) {
									logger.debug('_screenStreamEnded() track.onended - ' + e.toString() + ' - Emit [screen-close]');
									// g_client.unpublishScreen(this,
									//     () => {
									//         logger.debug('end and unpbulish screen');
									//         this._streamObj = null;
									//     },
									//     e => {
									//         logger.error('end and uppbublish screen error ', e.message);
									//     })

									_this6.emit('screen-close', { streamID: _this6.streamID, stream: _this6 });
								};

							case 2:
							case 'end':
								return _context4.stop();
						}
					}
				}, _callee4, this);
			}));

			function _screenStreamEnded(_x6) {
				return _ref4.apply(this, arguments);
			}

			return _screenStreamEnded;
		}()

		/**
   * Take a photo for your playing stream.
   * 
   * @public
   * @param {String} retType return type of base64|file
   * @param {String} filename
   * @param {Function} onSuccess the sucess call back.
   */

	}, {
		key: 'capture',
		value: function capture(retType) {
			var filename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date().toISOString().replace(/[-:TZ.]/g, '') + this._customStreamID;
			var onSuccess = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Function();

			logger.debug('API capture() - this._userId: ' + this._userId + ' this._innerStreamID: ' + this._innerStreamID);

			if (!this._streamObj) {
				logger.error('API capture() error - this._streamObj is NULL.');
				throw Error('stream is null, please init it at first.');
			}
			if (!this._video) {
				logger.error('API capture() error - this._video is NULL.');
				throw Error('this stream has not be played: ' + this._streamObj);
			}
			if (!/[\\\/\*\:\<\>\|\?\"]/g.test(filename) && filename.length > 255) {
				logger.error('API capture() error - illegal filename.');
				throw Error('illegal filename ');
			}

			var canvas = document.createElement('canvas');
			canvas.width = this._video.videoWidth;
			canvas.height = this._video.videoHeight;
			var context = canvas.getContext('2d');
			context.drawImage(this._video, 0, 0, canvas.width, canvas.height);

			if (retType === 'file') {
				canvas.toBlob(function (blob) {
					onSuccess(new File([blob], filename + '.jpeg', { type: 'image/jpeg' }));
				});
			} else {
				onSuccess(canvas.toDataURL('image/jpeg'));
			}
		}

		/**
   * 调节音量
   * @param {number} volume 音量 [0, 1.5]    0 ----------------> 1 ----------------> 1.5
   *                                        静音                正常                 增大
   */

	}, {
		key: 'setAudioVolume',
		value: function setAudioVolume(volume) {
			if (typeof volume !== 'number') {
				logger.warn('API setAudioVolume() TypeError - volume: ' + volume);
				throw TypeError('Wrong arguments: volume must be number.');
			}
			if (!this._gainNode) {
				logger.warn('API setAudioVolume() error - no gainNode existed.');
				throw Error('setAudioVolume() error - no gainNode existed.');
			}
			if (volume < 0) {
				volume = 0;
			} else if (volume > 1.5) {
				volume = 1.5;
			}
			this._gainNode.gain.value = volume;
			logger.debug('API setAudioVolume() success - volume: ' + volume);
		}

		/**
   * 调节输入音量
   * @param {number} volume 音量 [0, 1.5]    0 ----------------> 1 ----------------> 1.5
   *                                        静音                正常                 增大
   */

	}, {
		key: 'setInputVolume',
		value: function setInputVolume(volume) {
			if (typeof volume !== 'number') {
				logger.warn('API setInputVolume() TypeError - volume: ' + volume);
				throw TypeError('Wrong arguments: volume must be number.');
			}
			if (!this._gainNode) {
				logger.warn('API setInputVolume() error - no gainNode existed.');
				throw Error('setInputVolume() error - no gainNode existed.');
			}
			if (volume < 0) {
				volume = 0;
			} else if (volume > 1.5) {
				volume = 1.5;
			}
			this._gainNode.gain.value = volume;
			logger.debug('API setInputVolume() success - volume: ' + volume);
		}

		/**
   * @public
   * @param {Any} track 
   */

	}, {
		key: 'addTrack',
		value: function addTrack(track) {}
		// TODO.


		/**
   * @public
   * @param {Any} track 
   */

	}, {
		key: 'removeTrack',
		value: function removeTrack(track) {}
		// TODO.


		/**
   * Replace old track with new track.
   * 
   * @public
   * @param {MediaStreamTrack} track
   */

	}, {
		key: 'replaceTrack',
		value: function () {
			var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(track) {
				var tracks, oldTrack;
				return _regenerator2.default.wrap(function _callee5$(_context5) {
					while (1) {
						switch (_context5.prev = _context5.next) {
							case 0:
								logger.debug('API replaceTrack() - this._userId: ' + this._userId + ' this._innerStreamID: ' + this._innerStreamID);

								if (track) {
									_context5.next = 4;
									break;
								}

								logger.warn('API replaceTrack() error - parameter [trank] is INVALID.');
								throw TypeError('track');

							case 4:
								tracks = null;
								oldTrack = null;
								_context5.t0 = track.kind;
								_context5.next = _context5.t0 === 'video' ? 9 : _context5.t0 === 'audio' ? 22 : 23;
								break;

							case 9:
								tracks = this._streamObj.getVideoTracks();
								oldTrack = tracks[0];
								this._streamObj.removeTrack(oldTrack);
								this.videoTracks = track;
								this._videoSetting = track.getSettings();
								this._setKeyResolution(track);

								if (!global.g_client) {
									_context5.next = 20;
									break;
								}

								_context5.next = 18;
								return global.g_client._replaceTrack(this, track);

							case 18:
								_context5.next = 21;
								break;

							case 20:
								logger.error('API replaceTrack() error - global.g_client is NULL.');

							case 21:
								return _context5.abrupt('break', 24);

							case 22:
								throw TypeError('Cannot support audio track replace now.');

							case 23:
								throw TypeError('track have no audio or video.');

							case 24:
							case 'end':
								return _context5.stop();
						}
					}
				}, _callee5, this);
			}));

			function replaceTrack(_x9) {
				return _ref5.apply(this, arguments);
			}

			return replaceTrack;
		}()

		/**
   * Properties of audio tracks
   * autoGainControl
   * channelCount
   * echoCancellation
   * latency
   * noiseSuppression
   * sampleRate
   * sampleSize
   * volume
   * 
   * Properties of video tracks
   * aspectRatio
   * facingMode
   * {
   *  'user'
   *  'environment'
   *  'left'
   *  'right'
   * }
   * frameRate
   * height
   * width
   * resizeMode
   * {
   *  'none'
   *  'crop-and-scale'
   * }
   * 
   * Properties of shared screen tracks
   * cursor
   * {
   *  always
   *  motion
   *  never
   * }
   * displaySurface
   * {
   *  application
   *  browser
   *  monitor
   *  window
   * }
   * logicalSurface
   * 
   * More detail information about it please Reference below links.
   * 1: https://www.w3.org/TR/webrtc/#mediatracksupportedconstraints-mediatrackcapabilities-mediatrackconstraints-and-mediatracksettings
   * 2: https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings
   * 
   * @public
   */

	}, {
		key: 'getVideoTrackSettings',
		value: function getVideoTrackSettings() {
			return this._videoSetting;
		}

		/**
   * @public
   */

	}, {
		key: 'getAudioTrackSetting',
		value: function getAudioTrackSetting() {
			return this._audioSetting;
		}

		/**
   * The video(track) width normalize.
   * 
   * @private
   * @param {MediaStreamTrack} track
   */

	}, {
		key: '_setKeyResolution',
		value: function _setKeyResolution(track) {
			if (!track) throw new TypeError('track');

			if (track.kind !== 'video') {
				return;
			}

			var setting = track.getSettings();

			if (setting.height <= 80) {
				this._keyResolution = 80;
			} else if (setting.height > 80 && setting.height <= 120) {
				this._keyResolution = 120;
			} else if (setting.height > 120 && setting.height <= 160) {
				this._keyResolution = 160;
			} else if (setting.height > 160 && setting.height <= 200) {
				this._keyResolution = 200;
			} else if (setting.height > 200 && setting.height <= 240) {
				this._keyResolution = 240;
			} else if (setting.height > 240 && setting.height <= 320) {
				this._keyResolution = 320;
			} else if (setting.height > 320 && setting.height <= 360) {
				this._keyResolution = 360;
			} else if (setting.height > 360 && setting.height <= 480) {
				this._keyResolution = 480;
			} else if (setting.height > 480 && setting.height <= 540) {
				this._keyResolution = 540;
			} else if (setting.height > 480 && setting.height <= 720) {
				this._keyResolution = 720;
			} else if (setting.height > 720 && setting.height <= 1080) {
				this._keyResolution = 1080;
			} else if (setting.height > 1080 && setting.height <= 1920) {
				this._keyResolution = 1920;
			} else if (setting.height > 1920) {
				this._keyResolution = 1920;
			} else {
				this._keyResolution = 480;
			}
		}

		/**
   * Get ideal bandwidth.
   * 
   * @private
   */

	}, {
		key: '_getResolutionByVideoProfile',


		/**
   * Get video resolution by video's profile.
   * 
   * @private
   * @param {string} profile REF: config.js: videoProfile variable. 
   */
		value: function _getResolutionByVideoProfile(profile) {
			if (!profile) {
				throw TypeError('profile');
			}

			var resolution = { width: 0, height: 0
				// The default resolution is 480p.
			};var in_width = 640;
			var in_height = 480;
			var s_in_height = void 0,
			    s_in_width = void 0;
			var _videoProfile = profile.toLowerCase();
			switch (_videoProfile) {
				case config.videoProfile.Profile_80p:
				case config.videoProfile.Profile_120p:
				case config.videoProfile.Profile_160p:
				case config.videoProfile.Profile_200p:
				case config.videoProfile.Profile_240p:
				case config.videoProfile.Profile_320p:
				case config.videoProfile.Profile_360p:
				case config.videoProfile.Profile_480p:
				case config.videoProfile.Profile_540p:
				case config.videoProfile.Profile_720p:
				case config.videoProfile.Profile_1080p:
					// eslint-disable-next-line no-case-declarations
					s_in_height = _videoProfile.slice(0, -1);
					in_height = parseInt(s_in_height, 10);
					in_width = config.videoResolution.get(in_height).width;
					break;
				case config.videoProfile.Profile_3840p:
				case config.videoProfile.Profile_7680p:
					// eslint-disable-next-line no-case-declarations
					s_in_width = _videoProfile.slice(0, -1);
					in_width = parseInt(s_in_width, 10);
					in_height = config.videoResolution.get(in_width).height;
					break;
				default:
					logger.warn('Resolution params error - Using default resolution 640*480. Profile ref: ' + (0, _stringify2.default)(config.videoProfile));
					break;
			}

			resolution.width = in_width;
			resolution.height = in_height;
			return resolution;
		}
	}, {
		key: 'streamObj',


		/**
   * @private
   */
		set: function set(streamObj) {
			this._streamObj = streamObj;
			if (!streamObj) {
				return;
			}

			// Obtain some setting of tracks if is local stream.
			if (this._isLocalStream) {
				var tracks = this.videoTracks;
				if (tracks.length > 0) {
					var videoTrack = tracks[0];
					this._videoSetting = videoTrack.getSettings();
					this._setKeyResolution(videoTrack);
				}

				tracks = this.audioTracks;
				if (tracks.length > 0) {
					var audioTrack = tracks[0];
					this._audioSetting = audioTrack.getSettings();
				}
			}

			// hark can be created only have audio tracks.
			if (streamObj.getAudioTracks().length > 0) {
				this._speechEvents(streamObj);
			}
		},
		get: function get() {
			return this._streamObj;
		}
	}, {
		key: 'streamType',
		get: function get() {
			return this._streamType;
		}
	}, {
		key: 'specialCameraId',
		get: function get() {
			return this._specialCameraId;
		}
	}, {
		key: 'specialMicId',
		get: function get() {
			return this._specialMicId;
		}

		/**
   * Set stream identity property.
   * 
   * @private
   */

	}, {
		key: 'streamID',
		set: function set(id) {
			this._customStreamID = id;
		}

		/**
   * Get stream identity property.
   * 
   * @private
   * 
   * stream id is unique identity of stream.
   */
		,
		get: function get() {
			return this._customStreamID;
		}

		/**
   * Set user identity property.
   * 
   * @private
   */

	}, {
		key: 'userID',
		set: function set(id) {
			this._userId = id;
		}

		/**
   * Get user identity property.
   * @private
   * 
   * user id represent witch belong to peer(user). 
   */
		,
		get: function get() {
			return this._userId;
		}

		/**
   * Get inner stream identity property.
   * 
   * @private
   */

	}, {
		key: 'innerStreamID',
		get: function get() {
			if (this._innerStreamID === '') {
				this._innerStreamID = Stream._getInnerStreamID(this._userId, this.streamID, 0, this, this._isSubStream);
			}

			return this._innerStreamID;
		}

		/**
   * Set audio tracks property.
   * 
   * @private
   */

	}, {
		key: 'audioTracks',
		set: function set(track) {
			var _this7 = this;

			logger.debug('API audioTracks() - this._userId: ' + this._userId + ' this._innerStreamID: ' + this._innerStreamID);

			if (!track) {
				logger.error('API audioTracks() error - parameter track is NULL');
				return new TypeError('track');
			}

			if (track.kind !== 'audio') {
				logger.error('API audioTracks() error - parameter track.kind is node audio');
				return new TypeError('track is not audio kind');
			}

			if (this._streamObj !== null) {
				this._streamObj.addTrack(track);
			} else {
				logger.error('API audioTracks() error - this._streamObj is NULL');
				throw new Error('stream object is null.');
			}

			if (!this._isLocalStream) {
				this.audioElement = new Audio(); // document.createElement('audio');
				this.audioElement.srcObject = this._streamObj;

				if (!this._audioCtx) {
					var audioContext = window.AudioContext || window.webkitAudioContext;
					this._audioCtx = new audioContext();
				}

				if (!!this._audioCtx && !this._gainNode) {
					// 音量调节节点
					this._gainNode = this._audioCtx.createGain();
					this._gainNode.gain.value = 1;
				}

				// 
				this.audioElement.onloadedmetadata = function () {
					if (!!_this7._audioCtx && !!_this7._gainNode) {
						var source = _this7._audioCtx.createMediaStreamSource(_this7._streamObj);
						_this7.audioElement.play();
						_this7.audioElement.muted = true;
						source.connect(_this7._gainNode);
						_this7._gainNode.connect(_this7._audioCtx.destination);
					}
				};
			}

			this._speechEvents(this._streamObj);

			if (!!this._video) {
				this._video.srcObject = this._streamObj;
			} else {
				// logger.error('API audioTracks() error - this._video is NULL');
			}
		}

		/**
   * Set video tracks property.
   * 
   * @private
   */
		,


		/**
   * Get audio tracks property.
   * 
   * @private
   */
		get: function get() {
			if (!this._streamObj) {
				return null;
			}

			return this._streamObj.getAudioTracks();
		}

		/**
   * Get video tracks property.
   * 
   * @private
   */

	}, {
		key: 'videoTracks',
		set: function set(track) {
			logger.debug('API videoTracks() - this._userId: ' + this._userId + ' this._innerStreamID: ' + this._innerStreamID);

			if (!track) {
				logger.error('API videoTracks() error - parameter track is NULL');
				return new TypeError('track');
			}

			if (track.kind !== 'video') {
				logger.error('API videoTracks() error - parameter track.kind is node video');
				return new TypeError('track is not video kind');
			}

			// TODO : remove old track
			// 
			if (this._streamObjOrigin != null) {
				this._streamObjOrigin.addTrack(track);
			}

			if (this._streamObj !== null) {
				this._streamObj.addTrack(track);
			} else {
				logger.error('API videoTracks() error - this._streamObj is NULL');
				throw new Error('stream object is null.');
			}

			if (!!this._video) {
				this._video.srcObject = this._streamObj;
			} else {
				// logger.error('API audioTracks() error - this._video is NULL');
			}
		},
		get: function get() {
			if (!this._streamObj) {
				return null;
			}

			return this._streamObj.getVideoTracks();
		}

		/**
   * Get tracks property.
   * 
   * @private
   */

	}, {
		key: 'tracks',
		get: function get() {
			return this._streamObj.getTracks();
		}

		/**
   * Get track's number property.
   * 
   * @private
   */

	}, {
		key: 'trackNumber',
		get: function get() {
			if (!this._streamObj) {
				return 0;
			}

			return this._streamObj.getTracks().length;
		}

		/**
   * Set subscribed property.
   * 
   * @public
   */

	}, {
		key: 'subscribed',
		set: function set(value) {
			this._subscribed = value;
		}

		/**
   * Get subscribed property.
   * 
   * @public
   */
		,
		get: function get() {
			return this._subscribed;
		}

		/**
   * default is video.
   * stream type { video | audio }
   * @returns {boolean}
   */

	}, {
		key: 'type',
		get: function get() {
			return this.trackNumber === 1 && this.audioTracks.length > 0 ? 'audio' : 'video';
		}
	}, {
		key: 'published',
		get: function get() {
			return this._published;
		}
	}, {
		key: 'videoType',
		get: function get() {
			return this._videoType;
		}
	}, {
		key: 'idealBandwidth',
		get: function get() {
			if (typeof this._spec.codecOptions !== 'undefined') {
				if (typeof this._spec.codecOptions.startBitrate !== 'undefined') {
					if (typeof this._spec.codecOptions.startBitrate === 'number') {
						logger.warn('idealBandwidth() error - spec.codecOptions.startBitrate type error');
						return this._spec.codecOptions.startBitrate;
					}
				}
			}

			return config.videoResolution.get(this._keyResolution).bps.ideal / 1000;
		}

		/**
   * Get Minimum Bandwidth.
   * 
   * @private
   */

	}, {
		key: 'minBandwidth',
		get: function get() {
			if (typeof this._spec.codecOptions !== 'undefined') {
				if (typeof this._spec.codecOptions.minBitrate !== 'undefined') {
					if (typeof this._spec.codecOptions.minBitrate === 'number') {
						logger.warn('minBandwidth() error - spec.codecOptions.minBitrate type error');
						return this._spec.codecOptions.minBitrate;
					}
				}
			}

			return config.videoResolution.get(this._keyResolution).bps.min / 1000;
		}

		/**
   * Get maximum Bandwidth.
   * 
   * @private
   */

	}, {
		key: 'maxBandwidth',
		get: function get() {
			if (typeof this._spec.codecOptions !== 'undefined') {
				if (typeof this._spec.codecOptions.maxBitrate !== 'undefined') {
					if (typeof this._spec.codecOptions.maxBitrate === 'number') {
						logger.warn('maxBandwidth() error - spec.codecOptions.maxBitrate type error');
						return this._spec.codecOptions.maxBitrate;
					}
				}
			}

			return config.videoResolution.get(this._keyResolution).bps.max / 1000;
		}
	}], [{
		key: '_getInnerStreamID',
		value: function _getInnerStreamID(userID, streamID, number, stream) {
			var isSubStream = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

			if (userID === '') {
				return '';
			}

			var s = S_STREAM_MAP.get(streamID);
			if (typeof s === 'undefined') {
				S_STREAM_MAP.set(streamID, stream);
				return streamID;
			} else {
				if (isSubStream) {
					// The formation is contract with other Entpoints version's SDK.
					if (number === 0) {
						return Stream._getInnerStreamID(userID, userID + ':' + userID + '_low', number + 1, stream);
					} else {
						return Stream._getInnerStreamID(userID, userID + ':' + userID + '_' + number + '_low', number + 1, stream);
					}
				}

				return Stream._getInnerStreamID(userID, userID + ':' + userID + '_' + (number + 1), number + 1, stream);
			}
		}
	}]);
	return Stream;
}(EventEmitter);

module.exports = Stream;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/_webpack@4.41.6@webpack/buildin/global.js */ "./node_modules/_webpack@4.41.6@webpack/buildin/global.js")))

/***/ }),

/***/ "./lib/utils.js":
/*!**********************!*\
  !*** ./lib/utils.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function getProtooUrl(peerName, roomId) {
	var appId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
	var hostname = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
	var audioPt = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'isac32';

	// const hostname = config.mediaServerAddress;
	// const url = `wss://${hostname}:3443/?peerName=${peerName}&roomId=${roomId}`;
	var url = 'wss://' + hostname + ':3443/?peerName=' + peerName + '&roomId=' + roomId + '_' + appId + '&audioPt=' + audioPt;
	return url;
}

function uuid() {
	var s = [];
	var hexDigits = '0123456789abcdef';
	for (var i = 0; i < 36; i++) {
		s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
	}

	s[14] = '4'; // bits 12-15 of the time_hi_and_version field to 0010
	s[19] = hexDigits.substr(s[19] & 0x3 | 0x8, 1); // bits 6-7 of the clock_seq_hi_and_reserved to 01
	s[8] = s[13] = s[18] = s[23] = '-';

	var uuid = s.join('');
	return uuid;
}

module.exports = {
	getProtooUrl: getProtooUrl,
	uuid: uuid
};

/***/ }),

/***/ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/array/from.js":
/*!********************************************************************************!*\
  !*** ./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/array/from.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(/*! core-js/library/fn/array/from */ "./node_modules/_core-js@2.6.11@core-js/library/fn/array/from.js"), __esModule: true };

/***/ }),

/***/ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/get-iterator.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/get-iterator.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(/*! core-js/library/fn/get-iterator */ "./node_modules/_core-js@2.6.11@core-js/library/fn/get-iterator.js"), __esModule: true };

/***/ }),

/***/ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/is-iterable.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/is-iterable.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(/*! core-js/library/fn/is-iterable */ "./node_modules/_core-js@2.6.11@core-js/library/fn/is-iterable.js"), __esModule: true };

/***/ }),

/***/ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/json/stringify.js":
/*!************************************************************************************!*\
  !*** ./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/json/stringify.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(/*! core-js/library/fn/json/stringify */ "./node_modules/_core-js@2.6.11@core-js/library/fn/json/stringify.js"), __esModule: true };

/***/ }),

/***/ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/map.js":
/*!*************************************************************************!*\
  !*** ./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/map.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(/*! core-js/library/fn/map */ "./node_modules/_core-js@2.6.11@core-js/library/fn/map.js"), __esModule: true };

/***/ }),

/***/ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/assign.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/assign.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(/*! core-js/library/fn/object/assign */ "./node_modules/_core-js@2.6.11@core-js/library/fn/object/assign.js"), __esModule: true };

/***/ }),

/***/ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/create.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/create.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(/*! core-js/library/fn/object/create */ "./node_modules/_core-js@2.6.11@core-js/library/fn/object/create.js"), __esModule: true };

/***/ }),

/***/ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/define-property.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/define-property.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(/*! core-js/library/fn/object/define-property */ "./node_modules/_core-js@2.6.11@core-js/library/fn/object/define-property.js"), __esModule: true };

/***/ }),

/***/ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/freeze.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/freeze.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(/*! core-js/library/fn/object/freeze */ "./node_modules/_core-js@2.6.11@core-js/library/fn/object/freeze.js"), __esModule: true };

/***/ }),

/***/ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/get-prototype-of.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(/*! core-js/library/fn/object/get-prototype-of */ "./node_modules/_core-js@2.6.11@core-js/library/fn/object/get-prototype-of.js"), __esModule: true };

/***/ }),

/***/ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/keys.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/keys.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(/*! core-js/library/fn/object/keys */ "./node_modules/_core-js@2.6.11@core-js/library/fn/object/keys.js"), __esModule: true };

/***/ }),

/***/ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/set-prototype-of.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/set-prototype-of.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(/*! core-js/library/fn/object/set-prototype-of */ "./node_modules/_core-js@2.6.11@core-js/library/fn/object/set-prototype-of.js"), __esModule: true };

/***/ }),

/***/ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(/*! core-js/library/fn/promise */ "./node_modules/_core-js@2.6.11@core-js/library/fn/promise.js"), __esModule: true };

/***/ }),

/***/ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/set.js":
/*!*************************************************************************!*\
  !*** ./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/set.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(/*! core-js/library/fn/set */ "./node_modules/_core-js@2.6.11@core-js/library/fn/set.js"), __esModule: true };

/***/ }),

/***/ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/symbol.js":
/*!****************************************************************************!*\
  !*** ./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/symbol.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(/*! core-js/library/fn/symbol */ "./node_modules/_core-js@2.6.11@core-js/library/fn/symbol/index.js"), __esModule: true };

/***/ }),

/***/ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/symbol/iterator.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/symbol/iterator.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(/*! core-js/library/fn/symbol/iterator */ "./node_modules/_core-js@2.6.11@core-js/library/fn/symbol/iterator.js"), __esModule: true };

/***/ }),

/***/ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/asyncToGenerator.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/asyncToGenerator.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _promise = __webpack_require__(/*! ../core-js/promise */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/promise.js");

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new _promise2.default(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          return _promise2.default.resolve(value).then(function (value) {
            step("next", value);
          }, function (err) {
            step("throw", err);
          });
        }
      }

      return step("next");
    });
  };
};

/***/ }),

/***/ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js":
/*!************************************************************************************!*\
  !*** ./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

/***/ }),

/***/ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/createClass.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _defineProperty = __webpack_require__(/*! ../core-js/object/define-property */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/define-property.js");

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

/***/ }),

/***/ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/extends.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/extends.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _assign = __webpack_require__(/*! ../core-js/object/assign */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/assign.js");

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _assign2.default || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/***/ }),

/***/ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js":
/*!******************************************************************************!*\
  !*** ./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _setPrototypeOf = __webpack_require__(/*! ../core-js/object/set-prototype-of */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/set-prototype-of.js");

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _create = __webpack_require__(/*! ../core-js/object/create */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/object/create.js");

var _create2 = _interopRequireDefault(_create);

var _typeof2 = __webpack_require__(/*! ../helpers/typeof */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/typeof.js");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }

  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};

/***/ }),

/***/ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof2 = __webpack_require__(/*! ../helpers/typeof */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/typeof.js");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};

/***/ }),

/***/ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/slicedToArray.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/slicedToArray.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _isIterable2 = __webpack_require__(/*! ../core-js/is-iterable */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/is-iterable.js");

var _isIterable3 = _interopRequireDefault(_isIterable2);

var _getIterator2 = __webpack_require__(/*! ../core-js/get-iterator */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/get-iterator.js");

var _getIterator3 = _interopRequireDefault(_getIterator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if ((0, _isIterable3.default)(Object(arr))) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

/***/ }),

/***/ "./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/typeof.js":
/*!****************************************************************************!*\
  !*** ./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/typeof.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _iterator = __webpack_require__(/*! ../core-js/symbol/iterator */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/symbol/iterator.js");

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = __webpack_require__(/*! ../core-js/symbol */ "./node_modules/_babel-runtime@6.26.0@babel-runtime/core-js/symbol.js");

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};

/***/ }),

/***/ "./node_modules/_babel-runtime@6.26.0@babel-runtime/regenerator/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/_babel-runtime@6.26.0@babel-runtime/regenerator/index.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/_regenerator-runtime@0.11.1@regenerator-runtime/runtime-module.js");


/***/ }),

/***/ "./node_modules/_bowser@1.9.4@bowser/src/bowser.js":
/*!*********************************************************!*\
  !*** ./node_modules/_bowser@1.9.4@bowser/src/bowser.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Bowser - a browser detector
 * https://github.com/ded/bowser
 * MIT License | (c) Dustin Diaz 2015
 */

!function (root, name, definition) {
  if ( true && module.exports) module.exports = definition()
  else if (true) __webpack_require__(/*! !webpack amd define */ "./node_modules/_webpack@4.41.6@webpack/buildin/amd-define.js")(name, definition)
  else {}
}(this, 'bowser', function () {
  /**
    * See useragents.js for examples of navigator.userAgent
    */

  var t = true

  function detect(ua) {

    function getFirstMatch(regex) {
      var match = ua.match(regex);
      return (match && match.length > 1 && match[1]) || '';
    }

    function getSecondMatch(regex) {
      var match = ua.match(regex);
      return (match && match.length > 1 && match[2]) || '';
    }

    var iosdevice = getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase()
      , likeAndroid = /like android/i.test(ua)
      , android = !likeAndroid && /android/i.test(ua)
      , nexusMobile = /nexus\s*[0-6]\s*/i.test(ua)
      , nexusTablet = !nexusMobile && /nexus\s*[0-9]+/i.test(ua)
      , chromeos = /CrOS/.test(ua)
      , silk = /silk/i.test(ua)
      , sailfish = /sailfish/i.test(ua)
      , tizen = /tizen/i.test(ua)
      , webos = /(web|hpw)(o|0)s/i.test(ua)
      , windowsphone = /windows phone/i.test(ua)
      , samsungBrowser = /SamsungBrowser/i.test(ua)
      , windows = !windowsphone && /windows/i.test(ua)
      , mac = !iosdevice && !silk && /macintosh/i.test(ua)
      , linux = !android && !sailfish && !tizen && !webos && /linux/i.test(ua)
      , edgeVersion = getSecondMatch(/edg([ea]|ios)\/(\d+(\.\d+)?)/i)
      , versionIdentifier = getFirstMatch(/version\/(\d+(\.\d+)?)/i)
      , tablet = /tablet/i.test(ua) && !/tablet pc/i.test(ua)
      , mobile = !tablet && /[^-]mobi/i.test(ua)
      , xbox = /xbox/i.test(ua)
      , result

    if (/opera/i.test(ua)) {
      //  an old Opera
      result = {
        name: 'Opera'
      , opera: t
      , version: versionIdentifier || getFirstMatch(/(?:opera|opr|opios)[\s\/](\d+(\.\d+)?)/i)
      }
    } else if (/opr\/|opios/i.test(ua)) {
      // a new Opera
      result = {
        name: 'Opera'
        , opera: t
        , version: getFirstMatch(/(?:opr|opios)[\s\/](\d+(\.\d+)?)/i) || versionIdentifier
      }
    }
    else if (/SamsungBrowser/i.test(ua)) {
      result = {
        name: 'Samsung Internet for Android'
        , samsungBrowser: t
        , version: versionIdentifier || getFirstMatch(/(?:SamsungBrowser)[\s\/](\d+(\.\d+)?)/i)
      }
    }
    else if (/Whale/i.test(ua)) {
      result = {
        name: 'NAVER Whale browser'
        , whale: t
        , version: getFirstMatch(/(?:whale)[\s\/](\d+(?:\.\d+)+)/i)
      }
    }
    else if (/MZBrowser/i.test(ua)) {
      result = {
        name: 'MZ Browser'
        , mzbrowser: t
        , version: getFirstMatch(/(?:MZBrowser)[\s\/](\d+(?:\.\d+)+)/i)
      }
    }
    else if (/coast/i.test(ua)) {
      result = {
        name: 'Opera Coast'
        , coast: t
        , version: versionIdentifier || getFirstMatch(/(?:coast)[\s\/](\d+(\.\d+)?)/i)
      }
    }
    else if (/focus/i.test(ua)) {
      result = {
        name: 'Focus'
        , focus: t
        , version: getFirstMatch(/(?:focus)[\s\/](\d+(?:\.\d+)+)/i)
      }
    }
    else if (/yabrowser/i.test(ua)) {
      result = {
        name: 'Yandex Browser'
      , yandexbrowser: t
      , version: versionIdentifier || getFirstMatch(/(?:yabrowser)[\s\/](\d+(\.\d+)?)/i)
      }
    }
    else if (/ucbrowser/i.test(ua)) {
      result = {
          name: 'UC Browser'
        , ucbrowser: t
        , version: getFirstMatch(/(?:ucbrowser)[\s\/](\d+(?:\.\d+)+)/i)
      }
    }
    else if (/mxios/i.test(ua)) {
      result = {
        name: 'Maxthon'
        , maxthon: t
        , version: getFirstMatch(/(?:mxios)[\s\/](\d+(?:\.\d+)+)/i)
      }
    }
    else if (/epiphany/i.test(ua)) {
      result = {
        name: 'Epiphany'
        , epiphany: t
        , version: getFirstMatch(/(?:epiphany)[\s\/](\d+(?:\.\d+)+)/i)
      }
    }
    else if (/puffin/i.test(ua)) {
      result = {
        name: 'Puffin'
        , puffin: t
        , version: getFirstMatch(/(?:puffin)[\s\/](\d+(?:\.\d+)?)/i)
      }
    }
    else if (/sleipnir/i.test(ua)) {
      result = {
        name: 'Sleipnir'
        , sleipnir: t
        , version: getFirstMatch(/(?:sleipnir)[\s\/](\d+(?:\.\d+)+)/i)
      }
    }
    else if (/k-meleon/i.test(ua)) {
      result = {
        name: 'K-Meleon'
        , kMeleon: t
        , version: getFirstMatch(/(?:k-meleon)[\s\/](\d+(?:\.\d+)+)/i)
      }
    }
    else if (windowsphone) {
      result = {
        name: 'Windows Phone'
      , osname: 'Windows Phone'
      , windowsphone: t
      }
      if (edgeVersion) {
        result.msedge = t
        result.version = edgeVersion
      }
      else {
        result.msie = t
        result.version = getFirstMatch(/iemobile\/(\d+(\.\d+)?)/i)
      }
    }
    else if (/msie|trident/i.test(ua)) {
      result = {
        name: 'Internet Explorer'
      , msie: t
      , version: getFirstMatch(/(?:msie |rv:)(\d+(\.\d+)?)/i)
      }
    } else if (chromeos) {
      result = {
        name: 'Chrome'
      , osname: 'Chrome OS'
      , chromeos: t
      , chromeBook: t
      , chrome: t
      , version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
      }
    } else if (/edg([ea]|ios)/i.test(ua)) {
      result = {
        name: 'Microsoft Edge'
      , msedge: t
      , version: edgeVersion
      }
    }
    else if (/vivaldi/i.test(ua)) {
      result = {
        name: 'Vivaldi'
        , vivaldi: t
        , version: getFirstMatch(/vivaldi\/(\d+(\.\d+)?)/i) || versionIdentifier
      }
    }
    else if (sailfish) {
      result = {
        name: 'Sailfish'
      , osname: 'Sailfish OS'
      , sailfish: t
      , version: getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i)
      }
    }
    else if (/seamonkey\//i.test(ua)) {
      result = {
        name: 'SeaMonkey'
      , seamonkey: t
      , version: getFirstMatch(/seamonkey\/(\d+(\.\d+)?)/i)
      }
    }
    else if (/firefox|iceweasel|fxios/i.test(ua)) {
      result = {
        name: 'Firefox'
      , firefox: t
      , version: getFirstMatch(/(?:firefox|iceweasel|fxios)[ \/](\d+(\.\d+)?)/i)
      }
      if (/\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(ua)) {
        result.firefoxos = t
        result.osname = 'Firefox OS'
      }
    }
    else if (silk) {
      result =  {
        name: 'Amazon Silk'
      , silk: t
      , version : getFirstMatch(/silk\/(\d+(\.\d+)?)/i)
      }
    }
    else if (/phantom/i.test(ua)) {
      result = {
        name: 'PhantomJS'
      , phantom: t
      , version: getFirstMatch(/phantomjs\/(\d+(\.\d+)?)/i)
      }
    }
    else if (/slimerjs/i.test(ua)) {
      result = {
        name: 'SlimerJS'
        , slimer: t
        , version: getFirstMatch(/slimerjs\/(\d+(\.\d+)?)/i)
      }
    }
    else if (/blackberry|\bbb\d+/i.test(ua) || /rim\stablet/i.test(ua)) {
      result = {
        name: 'BlackBerry'
      , osname: 'BlackBerry OS'
      , blackberry: t
      , version: versionIdentifier || getFirstMatch(/blackberry[\d]+\/(\d+(\.\d+)?)/i)
      }
    }
    else if (webos) {
      result = {
        name: 'WebOS'
      , osname: 'WebOS'
      , webos: t
      , version: versionIdentifier || getFirstMatch(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i)
      };
      /touchpad\//i.test(ua) && (result.touchpad = t)
    }
    else if (/bada/i.test(ua)) {
      result = {
        name: 'Bada'
      , osname: 'Bada'
      , bada: t
      , version: getFirstMatch(/dolfin\/(\d+(\.\d+)?)/i)
      };
    }
    else if (tizen) {
      result = {
        name: 'Tizen'
      , osname: 'Tizen'
      , tizen: t
      , version: getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i) || versionIdentifier
      };
    }
    else if (/qupzilla/i.test(ua)) {
      result = {
        name: 'QupZilla'
        , qupzilla: t
        , version: getFirstMatch(/(?:qupzilla)[\s\/](\d+(?:\.\d+)+)/i) || versionIdentifier
      }
    }
    else if (/chromium/i.test(ua)) {
      result = {
        name: 'Chromium'
        , chromium: t
        , version: getFirstMatch(/(?:chromium)[\s\/](\d+(?:\.\d+)?)/i) || versionIdentifier
      }
    }
    else if (/chrome|crios|crmo/i.test(ua)) {
      result = {
        name: 'Chrome'
        , chrome: t
        , version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
      }
    }
    else if (android) {
      result = {
        name: 'Android'
        , version: versionIdentifier
      }
    }
    else if (/safari|applewebkit/i.test(ua)) {
      result = {
        name: 'Safari'
      , safari: t
      }
      if (versionIdentifier) {
        result.version = versionIdentifier
      }
    }
    else if (iosdevice) {
      result = {
        name : iosdevice == 'iphone' ? 'iPhone' : iosdevice == 'ipad' ? 'iPad' : 'iPod'
      }
      // WTF: version is not part of user agent in web apps
      if (versionIdentifier) {
        result.version = versionIdentifier
      }
    }
    else if(/googlebot/i.test(ua)) {
      result = {
        name: 'Googlebot'
      , googlebot: t
      , version: getFirstMatch(/googlebot\/(\d+(\.\d+))/i) || versionIdentifier
      }
    }
    else {
      result = {
        name: getFirstMatch(/^(.*)\/(.*) /),
        version: getSecondMatch(/^(.*)\/(.*) /)
     };
   }

    // set webkit or gecko flag for browsers based on these engines
    if (!result.msedge && /(apple)?webkit/i.test(ua)) {
      if (/(apple)?webkit\/537\.36/i.test(ua)) {
        result.name = result.name || "Blink"
        result.blink = t
      } else {
        result.name = result.name || "Webkit"
        result.webkit = t
      }
      if (!result.version && versionIdentifier) {
        result.version = versionIdentifier
      }
    } else if (!result.opera && /gecko\//i.test(ua)) {
      result.name = result.name || "Gecko"
      result.gecko = t
      result.version = result.version || getFirstMatch(/gecko\/(\d+(\.\d+)?)/i)
    }

    // set OS flags for platforms that have multiple browsers
    if (!result.windowsphone && (android || result.silk)) {
      result.android = t
      result.osname = 'Android'
    } else if (!result.windowsphone && iosdevice) {
      result[iosdevice] = t
      result.ios = t
      result.osname = 'iOS'
    } else if (mac) {
      result.mac = t
      result.osname = 'macOS'
    } else if (xbox) {
      result.xbox = t
      result.osname = 'Xbox'
    } else if (windows) {
      result.windows = t
      result.osname = 'Windows'
    } else if (linux) {
      result.linux = t
      result.osname = 'Linux'
    }

    function getWindowsVersion (s) {
      switch (s) {
        case 'NT': return 'NT'
        case 'XP': return 'XP'
        case 'NT 5.0': return '2000'
        case 'NT 5.1': return 'XP'
        case 'NT 5.2': return '2003'
        case 'NT 6.0': return 'Vista'
        case 'NT 6.1': return '7'
        case 'NT 6.2': return '8'
        case 'NT 6.3': return '8.1'
        case 'NT 10.0': return '10'
        default: return undefined
      }
    }

    // OS version extraction
    var osVersion = '';
    if (result.windows) {
      osVersion = getWindowsVersion(getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i))
    } else if (result.windowsphone) {
      osVersion = getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i);
    } else if (result.mac) {
      osVersion = getFirstMatch(/Mac OS X (\d+([_\.\s]\d+)*)/i);
      osVersion = osVersion.replace(/[_\s]/g, '.');
    } else if (iosdevice) {
      osVersion = getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i);
      osVersion = osVersion.replace(/[_\s]/g, '.');
    } else if (android) {
      osVersion = getFirstMatch(/android[ \/-](\d+(\.\d+)*)/i);
    } else if (result.webos) {
      osVersion = getFirstMatch(/(?:web|hpw)os\/(\d+(\.\d+)*)/i);
    } else if (result.blackberry) {
      osVersion = getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i);
    } else if (result.bada) {
      osVersion = getFirstMatch(/bada\/(\d+(\.\d+)*)/i);
    } else if (result.tizen) {
      osVersion = getFirstMatch(/tizen[\/\s](\d+(\.\d+)*)/i);
    }
    if (osVersion) {
      result.osversion = osVersion;
    }

    // device type extraction
    var osMajorVersion = !result.windows && osVersion.split('.')[0];
    if (
         tablet
      || nexusTablet
      || iosdevice == 'ipad'
      || (android && (osMajorVersion == 3 || (osMajorVersion >= 4 && !mobile)))
      || result.silk
    ) {
      result.tablet = t
    } else if (
         mobile
      || iosdevice == 'iphone'
      || iosdevice == 'ipod'
      || android
      || nexusMobile
      || result.blackberry
      || result.webos
      || result.bada
    ) {
      result.mobile = t
    }

    // Graded Browser Support
    // http://developer.yahoo.com/yui/articles/gbs
    if (result.msedge ||
        (result.msie && result.version >= 10) ||
        (result.yandexbrowser && result.version >= 15) ||
		    (result.vivaldi && result.version >= 1.0) ||
        (result.chrome && result.version >= 20) ||
        (result.samsungBrowser && result.version >= 4) ||
        (result.whale && compareVersions([result.version, '1.0']) === 1) ||
        (result.mzbrowser && compareVersions([result.version, '6.0']) === 1) ||
        (result.focus && compareVersions([result.version, '1.0']) === 1) ||
        (result.firefox && result.version >= 20.0) ||
        (result.safari && result.version >= 6) ||
        (result.opera && result.version >= 10.0) ||
        (result.ios && result.osversion && result.osversion.split(".")[0] >= 6) ||
        (result.blackberry && result.version >= 10.1)
        || (result.chromium && result.version >= 20)
        ) {
      result.a = t;
    }
    else if ((result.msie && result.version < 10) ||
        (result.chrome && result.version < 20) ||
        (result.firefox && result.version < 20.0) ||
        (result.safari && result.version < 6) ||
        (result.opera && result.version < 10.0) ||
        (result.ios && result.osversion && result.osversion.split(".")[0] < 6)
        || (result.chromium && result.version < 20)
        ) {
      result.c = t
    } else result.x = t

    return result
  }

  var bowser = detect(typeof navigator !== 'undefined' ? navigator.userAgent || '' : '')

  bowser.test = function (browserList) {
    for (var i = 0; i < browserList.length; ++i) {
      var browserItem = browserList[i];
      if (typeof browserItem=== 'string') {
        if (browserItem in bowser) {
          return true;
        }
      }
    }
    return false;
  }

  /**
   * Get version precisions count
   *
   * @example
   *   getVersionPrecision("1.10.3") // 3
   *
   * @param  {string} version
   * @return {number}
   */
  function getVersionPrecision(version) {
    return version.split(".").length;
  }

  /**
   * Array::map polyfill
   *
   * @param  {Array} arr
   * @param  {Function} iterator
   * @return {Array}
   */
  function map(arr, iterator) {
    var result = [], i;
    if (Array.prototype.map) {
      return Array.prototype.map.call(arr, iterator);
    }
    for (i = 0; i < arr.length; i++) {
      result.push(iterator(arr[i]));
    }
    return result;
  }

  /**
   * Calculate browser version weight
   *
   * @example
   *   compareVersions(['1.10.2.1',  '1.8.2.1.90'])    // 1
   *   compareVersions(['1.010.2.1', '1.09.2.1.90']);  // 1
   *   compareVersions(['1.10.2.1',  '1.10.2.1']);     // 0
   *   compareVersions(['1.10.2.1',  '1.0800.2']);     // -1
   *
   * @param  {Array<String>} versions versions to compare
   * @return {Number} comparison result
   */
  function compareVersions(versions) {
    // 1) get common precision for both versions, for example for "10.0" and "9" it should be 2
    var precision = Math.max(getVersionPrecision(versions[0]), getVersionPrecision(versions[1]));
    var chunks = map(versions, function (version) {
      var delta = precision - getVersionPrecision(version);

      // 2) "9" -> "9.0" (for precision = 2)
      version = version + new Array(delta + 1).join(".0");

      // 3) "9.0" -> ["000000000"", "000000009"]
      return map(version.split("."), function (chunk) {
        return new Array(20 - chunk.length).join("0") + chunk;
      }).reverse();
    });

    // iterate in reverse order by reversed chunks array
    while (--precision >= 0) {
      // 4) compare: "000000009" > "000000010" = false (but "9" > "10" = true)
      if (chunks[0][precision] > chunks[1][precision]) {
        return 1;
      }
      else if (chunks[0][precision] === chunks[1][precision]) {
        if (precision === 0) {
          // all version chunks are same
          return 0;
        }
      }
      else {
        return -1;
      }
    }
  }

  /**
   * Check if browser is unsupported
   *
   * @example
   *   bowser.isUnsupportedBrowser({
   *     msie: "10",
   *     firefox: "23",
   *     chrome: "29",
   *     safari: "5.1",
   *     opera: "16",
   *     phantom: "534"
   *   });
   *
   * @param  {Object}  minVersions map of minimal version to browser
   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
   * @param  {String}  [ua] user agent string
   * @return {Boolean}
   */
  function isUnsupportedBrowser(minVersions, strictMode, ua) {
    var _bowser = bowser;

    // make strictMode param optional with ua param usage
    if (typeof strictMode === 'string') {
      ua = strictMode;
      strictMode = void(0);
    }

    if (strictMode === void(0)) {
      strictMode = false;
    }
    if (ua) {
      _bowser = detect(ua);
    }

    var version = "" + _bowser.version;
    for (var browser in minVersions) {
      if (minVersions.hasOwnProperty(browser)) {
        if (_bowser[browser]) {
          if (typeof minVersions[browser] !== 'string') {
            throw new Error('Browser version in the minVersion map should be a string: ' + browser + ': ' + String(minVersions));
          }

          // browser version and min supported version.
          return compareVersions([version, minVersions[browser]]) < 0;
        }
      }
    }

    return strictMode; // not found
  }

  /**
   * Check if browser is supported
   *
   * @param  {Object} minVersions map of minimal version to browser
   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
   * @param  {String}  [ua] user agent string
   * @return {Boolean}
   */
  function check(minVersions, strictMode, ua) {
    return !isUnsupportedBrowser(minVersions, strictMode, ua);
  }

  bowser.isUnsupportedBrowser = isUnsupportedBrowser;
  bowser.compareVersions = compareVersions;
  bowser.check = check;

  /*
   * Set our detect method to the main bowser object so we can
   * reuse it to test other user agents.
   * This is needed to implement future tests.
   */
  bowser._detect = detect;

  /*
   * Set our detect public method to the main bowser object
   * This is needed to implement bowser in server side
   */
  bowser.detect = detect;
  return bowser
});


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/fn/array/from.js":
/*!***********************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/fn/array/from.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es6.string.iterator */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.string.iterator.js");
__webpack_require__(/*! ../../modules/es6.array.from */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.array.from.js");
module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_core.js").Array.from;


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/fn/get-iterator.js":
/*!*************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/fn/get-iterator.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../modules/web.dom.iterable */ "./node_modules/_core-js@2.6.11@core-js/library/modules/web.dom.iterable.js");
__webpack_require__(/*! ../modules/es6.string.iterator */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.string.iterator.js");
module.exports = __webpack_require__(/*! ../modules/core.get-iterator */ "./node_modules/_core-js@2.6.11@core-js/library/modules/core.get-iterator.js");


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/fn/is-iterable.js":
/*!************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/fn/is-iterable.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../modules/web.dom.iterable */ "./node_modules/_core-js@2.6.11@core-js/library/modules/web.dom.iterable.js");
__webpack_require__(/*! ../modules/es6.string.iterator */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.string.iterator.js");
module.exports = __webpack_require__(/*! ../modules/core.is-iterable */ "./node_modules/_core-js@2.6.11@core-js/library/modules/core.is-iterable.js");


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/fn/json/stringify.js":
/*!***************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/fn/json/stringify.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(/*! ../../modules/_core */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_core.js");
var $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });
module.exports = function stringify(it) { // eslint-disable-line no-unused-vars
  return $JSON.stringify.apply($JSON, arguments);
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/fn/map.js":
/*!****************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/fn/map.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../modules/es6.object.to-string */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.to-string.js");
__webpack_require__(/*! ../modules/es6.string.iterator */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.string.iterator.js");
__webpack_require__(/*! ../modules/web.dom.iterable */ "./node_modules/_core-js@2.6.11@core-js/library/modules/web.dom.iterable.js");
__webpack_require__(/*! ../modules/es6.map */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.map.js");
__webpack_require__(/*! ../modules/es7.map.to-json */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es7.map.to-json.js");
__webpack_require__(/*! ../modules/es7.map.of */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es7.map.of.js");
__webpack_require__(/*! ../modules/es7.map.from */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es7.map.from.js");
module.exports = __webpack_require__(/*! ../modules/_core */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_core.js").Map;


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/fn/object/assign.js":
/*!**************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/fn/object/assign.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es6.object.assign */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.assign.js");
module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_core.js").Object.assign;


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/fn/object/create.js":
/*!**************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/fn/object/create.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es6.object.create */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.create.js");
var $Object = __webpack_require__(/*! ../../modules/_core */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_core.js").Object;
module.exports = function create(P, D) {
  return $Object.create(P, D);
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/fn/object/define-property.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/fn/object/define-property.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es6.object.define-property */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.define-property.js");
var $Object = __webpack_require__(/*! ../../modules/_core */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_core.js").Object;
module.exports = function defineProperty(it, key, desc) {
  return $Object.defineProperty(it, key, desc);
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/fn/object/freeze.js":
/*!**************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/fn/object/freeze.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es6.object.freeze */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.freeze.js");
module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_core.js").Object.freeze;


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/fn/object/get-prototype-of.js":
/*!************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/fn/object/get-prototype-of.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es6.object.get-prototype-of */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.get-prototype-of.js");
module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_core.js").Object.getPrototypeOf;


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/fn/object/keys.js":
/*!************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/fn/object/keys.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es6.object.keys */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.keys.js");
module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_core.js").Object.keys;


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/fn/object/set-prototype-of.js":
/*!************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/fn/object/set-prototype-of.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es6.object.set-prototype-of */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.set-prototype-of.js");
module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_core.js").Object.setPrototypeOf;


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/fn/promise.js":
/*!********************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/fn/promise.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../modules/es6.object.to-string */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.to-string.js");
__webpack_require__(/*! ../modules/es6.string.iterator */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.string.iterator.js");
__webpack_require__(/*! ../modules/web.dom.iterable */ "./node_modules/_core-js@2.6.11@core-js/library/modules/web.dom.iterable.js");
__webpack_require__(/*! ../modules/es6.promise */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.promise.js");
__webpack_require__(/*! ../modules/es7.promise.finally */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es7.promise.finally.js");
__webpack_require__(/*! ../modules/es7.promise.try */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es7.promise.try.js");
module.exports = __webpack_require__(/*! ../modules/_core */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_core.js").Promise;


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/fn/set.js":
/*!****************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/fn/set.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../modules/es6.object.to-string */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.to-string.js");
__webpack_require__(/*! ../modules/es6.string.iterator */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.string.iterator.js");
__webpack_require__(/*! ../modules/web.dom.iterable */ "./node_modules/_core-js@2.6.11@core-js/library/modules/web.dom.iterable.js");
__webpack_require__(/*! ../modules/es6.set */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.set.js");
__webpack_require__(/*! ../modules/es7.set.to-json */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es7.set.to-json.js");
__webpack_require__(/*! ../modules/es7.set.of */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es7.set.of.js");
__webpack_require__(/*! ../modules/es7.set.from */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es7.set.from.js");
module.exports = __webpack_require__(/*! ../modules/_core */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_core.js").Set;


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/fn/symbol/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/fn/symbol/index.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es6.symbol */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.symbol.js");
__webpack_require__(/*! ../../modules/es6.object.to-string */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.to-string.js");
__webpack_require__(/*! ../../modules/es7.symbol.async-iterator */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es7.symbol.async-iterator.js");
__webpack_require__(/*! ../../modules/es7.symbol.observable */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es7.symbol.observable.js");
module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_core.js").Symbol;


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/fn/symbol/iterator.js":
/*!****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/fn/symbol/iterator.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es6.string.iterator */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.string.iterator.js");
__webpack_require__(/*! ../../modules/web.dom.iterable */ "./node_modules/_core-js@2.6.11@core-js/library/modules/web.dom.iterable.js");
module.exports = __webpack_require__(/*! ../../modules/_wks-ext */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_wks-ext.js").f('iterator');


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_a-function.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_a-function.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_add-to-unscopables.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_add-to-unscopables.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function () { /* empty */ };


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_an-instance.js":
/*!******************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_an-instance.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_an-object.js":
/*!****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_an-object.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_is-object.js");
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_array-from-iterable.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_array-from-iterable.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_for-of.js");

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_array-includes.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_array-includes.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-iobject.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-length.js");
var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-absolute-index.js");
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_array-methods.js":
/*!********************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_array-methods.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_ctx.js");
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iobject.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-length.js");
var asc = __webpack_require__(/*! ./_array-species-create */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_array-species-create.js");
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_array-species-constructor.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_array-species-constructor.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_is-object.js");
var isArray = __webpack_require__(/*! ./_is-array */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_is-array.js");
var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_wks.js")('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_array-species-create.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_array-species-create.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(/*! ./_array-species-constructor */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_array-species-constructor.js");

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_classof.js":
/*!**************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_classof.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_cof.js");
var TAG = __webpack_require__(/*! ./_wks */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_wks.js")('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_cof.js":
/*!**********************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_cof.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_collection-strong.js":
/*!************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_collection-strong.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-dp.js").f;
var create = __webpack_require__(/*! ./_object-create */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-create.js");
var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_redefine-all.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_ctx.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_an-instance.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_for-of.js");
var $iterDefine = __webpack_require__(/*! ./_iter-define */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iter-define.js");
var step = __webpack_require__(/*! ./_iter-step */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iter-step.js");
var setSpecies = __webpack_require__(/*! ./_set-species */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_set-species.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_descriptors.js");
var fastKey = __webpack_require__(/*! ./_meta */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_meta.js").fastKey;
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_validate-collection.js");
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_collection-to-json.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_collection-to-json.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = __webpack_require__(/*! ./_classof */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_classof.js");
var from = __webpack_require__(/*! ./_array-from-iterable */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_array-from-iterable.js");
module.exports = function (NAME) {
  return function toJSON() {
    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_collection.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_collection.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(/*! ./_global */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_global.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_export.js");
var meta = __webpack_require__(/*! ./_meta */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_meta.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_fails.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_hide.js");
var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_redefine-all.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_for-of.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_an-instance.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_is-object.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_set-to-string-tag.js");
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-dp.js").f;
var each = __webpack_require__(/*! ./_array-methods */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_array-methods.js")(0);
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_descriptors.js");

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  if (!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    C = wrapper(function (target, iterable) {
      anInstance(target, C, NAME, '_c');
      target._c = new Base();
      if (iterable != undefined) forOf(iterable, IS_MAP, target[ADDER], target);
    });
    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','), function (KEY) {
      var IS_ADDER = KEY == 'add' || KEY == 'set';
      if (KEY in proto && !(IS_WEAK && KEY == 'clear')) hide(C.prototype, KEY, function (a, b) {
        anInstance(this, C, KEY);
        if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;
        var result = this._c[KEY](a === 0 ? 0 : a, b);
        return IS_ADDER ? this : result;
      });
    });
    IS_WEAK || dP(C.prototype, 'size', {
      get: function () {
        return this._c.size;
      }
    });
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F, O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_core.js":
/*!***********************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_core.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.6.11' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_create-property.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_create-property.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $defineProperty = __webpack_require__(/*! ./_object-dp */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-dp.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_property-desc.js");

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_ctx.js":
/*!**********************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_ctx.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_a-function.js");
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_defined.js":
/*!**************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_defined.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_descriptors.js":
/*!******************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_descriptors.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(/*! ./_fails */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_fails.js")(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_dom-create.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_dom-create.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_is-object.js");
var document = __webpack_require__(/*! ./_global */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_global.js").document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_enum-bug-keys.js":
/*!********************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_enum-bug-keys.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_enum-keys.js":
/*!****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_enum-keys.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-keys.js");
var gOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-gops.js");
var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-pie.js");
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_export.js":
/*!*************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_export.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_global.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_core.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_ctx.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_hide.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_has.js");
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && has(exports, key)) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_fails.js":
/*!************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_fails.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_for-of.js":
/*!*************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_for-of.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_ctx.js");
var call = __webpack_require__(/*! ./_iter-call */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iter-call.js");
var isArrayIter = __webpack_require__(/*! ./_is-array-iter */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_is-array-iter.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_an-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-length.js");
var getIterFn = __webpack_require__(/*! ./core.get-iterator-method */ "./node_modules/_core-js@2.6.11@core-js/library/modules/core.get-iterator-method.js");
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_global.js":
/*!*************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_global.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_has.js":
/*!**********************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_has.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_hide.js":
/*!***********************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_hide.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-dp.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_property-desc.js");
module.exports = __webpack_require__(/*! ./_descriptors */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_descriptors.js") ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_html.js":
/*!***********************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_html.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(/*! ./_global */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_global.js").document;
module.exports = document && document.documentElement;


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_ie8-dom-define.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_ie8-dom-define.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(/*! ./_descriptors */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_descriptors.js") && !__webpack_require__(/*! ./_fails */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_fails.js")(function () {
  return Object.defineProperty(__webpack_require__(/*! ./_dom-create */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_dom-create.js")('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_invoke.js":
/*!*************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_invoke.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iobject.js":
/*!**************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_iobject.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_cof.js");
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_is-array-iter.js":
/*!********************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_is-array-iter.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iterators.js");
var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_wks.js")('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_is-array.js":
/*!***************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_is-array.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_cof.js");
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_is-object.js":
/*!****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_is-object.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iter-call.js":
/*!****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_iter-call.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_an-object.js");
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iter-create.js":
/*!******************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_iter-create.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(/*! ./_object-create */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-create.js");
var descriptor = __webpack_require__(/*! ./_property-desc */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_property-desc.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_set-to-string-tag.js");
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(/*! ./_hide */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_hide.js")(IteratorPrototype, __webpack_require__(/*! ./_wks */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_wks.js")('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iter-define.js":
/*!******************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_iter-define.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_library.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_export.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_redefine.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_hide.js");
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iterators.js");
var $iterCreate = __webpack_require__(/*! ./_iter-create */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iter-create.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_set-to-string-tag.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-gpo.js");
var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_wks.js")('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iter-detect.js":
/*!******************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_iter-detect.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_wks.js")('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iter-step.js":
/*!****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_iter-step.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iterators.js":
/*!****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_iterators.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_library.js":
/*!**************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_library.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = true;


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_meta.js":
/*!***********************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_meta.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(/*! ./_uid */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_uid.js")('meta');
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_is-object.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_has.js");
var setDesc = __webpack_require__(/*! ./_object-dp */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-dp.js").f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(/*! ./_fails */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_fails.js")(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_microtask.js":
/*!****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_microtask.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_global.js");
var macrotask = __webpack_require__(/*! ./_task */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_task.js").set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__(/*! ./_cof */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_cof.js")(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_new-promise-capability.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_new-promise-capability.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 25.4.1.5 NewPromiseCapability(C)
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_a-function.js");

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-assign.js":
/*!********************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_object-assign.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_descriptors.js");
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-keys.js");
var gOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-gops.js");
var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-pie.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-object.js");
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iobject.js");
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(/*! ./_fails */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_fails.js")(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-create.js":
/*!********************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_object-create.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_an-object.js");
var dPs = __webpack_require__(/*! ./_object-dps */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-dps.js");
var enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_enum-bug-keys.js");
var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_shared-key.js")('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(/*! ./_dom-create */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_dom-create.js")('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(/*! ./_html */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_html.js").appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-dp.js":
/*!****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_object-dp.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_an-object.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_ie8-dom-define.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-primitive.js");
var dP = Object.defineProperty;

exports.f = __webpack_require__(/*! ./_descriptors */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_descriptors.js") ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-dps.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_object-dps.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-dp.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_an-object.js");
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-keys.js");

module.exports = __webpack_require__(/*! ./_descriptors */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_descriptors.js") ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-gopd.js":
/*!******************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_object-gopd.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-pie.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_property-desc.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-iobject.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-primitive.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_has.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_ie8-dom-define.js");
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(/*! ./_descriptors */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_descriptors.js") ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-gopn-ext.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_object-gopn-ext.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-iobject.js");
var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-gopn.js").f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-gopn.js":
/*!******************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_object-gopn.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(/*! ./_object-keys-internal */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-keys-internal.js");
var hiddenKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_enum-bug-keys.js").concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-gops.js":
/*!******************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_object-gops.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-gpo.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_object-gpo.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(/*! ./_has */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_has.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-object.js");
var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_shared-key.js")('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-keys-internal.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_object-keys-internal.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(/*! ./_has */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_has.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-iobject.js");
var arrayIndexOf = __webpack_require__(/*! ./_array-includes */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_array-includes.js")(false);
var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_shared-key.js")('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-keys.js":
/*!******************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_object-keys.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(/*! ./_object-keys-internal */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_enum-bug-keys.js");

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-pie.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_object-pie.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-sap.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_object-sap.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(/*! ./_export */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_export.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_core.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_fails.js");
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_perform.js":
/*!**************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_perform.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_promise-resolve.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_promise-resolve.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_an-object.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_is-object.js");
var newPromiseCapability = __webpack_require__(/*! ./_new-promise-capability */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_new-promise-capability.js");

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_property-desc.js":
/*!********************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_property-desc.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_redefine-all.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_redefine-all.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var hide = __webpack_require__(/*! ./_hide */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_hide.js");
module.exports = function (target, src, safe) {
  for (var key in src) {
    if (safe && target[key]) target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_redefine.js":
/*!***************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_redefine.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./_hide */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_hide.js");


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_set-collection-from.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_set-collection-from.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(/*! ./_export */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_export.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_a-function.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_ctx.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_for-of.js");

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
    var mapFn = arguments[1];
    var mapping, A, n, cb;
    aFunction(this);
    mapping = mapFn !== undefined;
    if (mapping) aFunction(mapFn);
    if (source == undefined) return new this();
    A = [];
    if (mapping) {
      n = 0;
      cb = ctx(mapFn, arguments[2], 2);
      forOf(source, false, function (nextItem) {
        A.push(cb(nextItem, n++));
      });
    } else {
      forOf(source, false, A.push, A);
    }
    return new this(A);
  } });
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_set-collection-of.js":
/*!************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_set-collection-of.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(/*! ./_export */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_export.js");

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { of: function of() {
    var length = arguments.length;
    var A = new Array(length);
    while (length--) A[length] = arguments[length];
    return new this(A);
  } });
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_set-proto.js":
/*!****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_set-proto.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_is-object.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_an-object.js");
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = __webpack_require__(/*! ./_ctx */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_ctx.js")(Function.call, __webpack_require__(/*! ./_object-gopd */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-gopd.js").f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_set-species.js":
/*!******************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_set-species.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(/*! ./_global */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_global.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_core.js");
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-dp.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_descriptors.js");
var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_wks.js")('species');

module.exports = function (KEY) {
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_set-to-string-tag.js":
/*!************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_set-to-string-tag.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(/*! ./_object-dp */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-dp.js").f;
var has = __webpack_require__(/*! ./_has */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_has.js");
var TAG = __webpack_require__(/*! ./_wks */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_wks.js")('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_shared-key.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_shared-key.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(/*! ./_shared */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_shared.js")('keys');
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_uid.js");
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_shared.js":
/*!*************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_shared.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(/*! ./_core */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_core.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_global.js");
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(/*! ./_library */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_library.js") ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_species-constructor.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_species-constructor.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_an-object.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_a-function.js");
var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_wks.js")('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_string-at.js":
/*!****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_string-at.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-integer.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_defined.js");
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_task.js":
/*!***********************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_task.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_ctx.js");
var invoke = __webpack_require__(/*! ./_invoke */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_invoke.js");
var html = __webpack_require__(/*! ./_html */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_html.js");
var cel = __webpack_require__(/*! ./_dom-create */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_dom-create.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_global.js");
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (__webpack_require__(/*! ./_cof */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_cof.js")(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-absolute-index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_to-absolute-index.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-integer.js");
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-integer.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_to-integer.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-iobject.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_to-iobject.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iobject.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_defined.js");
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-length.js":
/*!****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_to-length.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-integer.js");
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-object.js":
/*!****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_to-object.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_defined.js");
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-primitive.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_to-primitive.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_is-object.js");
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_uid.js":
/*!**********************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_uid.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_user-agent.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_user-agent.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_global.js");
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_validate-collection.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_validate-collection.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_is-object.js");
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_wks-define.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_wks-define.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_global.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_core.js");
var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_library.js");
var wksExt = __webpack_require__(/*! ./_wks-ext */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_wks-ext.js");
var defineProperty = __webpack_require__(/*! ./_object-dp */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-dp.js").f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_wks-ext.js":
/*!**************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_wks-ext.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(/*! ./_wks */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_wks.js");


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/_wks.js":
/*!**********************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/_wks.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(/*! ./_shared */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_shared.js")('wks');
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_uid.js");
var Symbol = __webpack_require__(/*! ./_global */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_global.js").Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/core.get-iterator-method.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/core.get-iterator-method.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(/*! ./_classof */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_classof.js");
var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_wks.js")('iterator');
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iterators.js");
module.exports = __webpack_require__(/*! ./_core */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_core.js").getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/core.get-iterator.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/core.get-iterator.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_an-object.js");
var get = __webpack_require__(/*! ./core.get-iterator-method */ "./node_modules/_core-js@2.6.11@core-js/library/modules/core.get-iterator-method.js");
module.exports = __webpack_require__(/*! ./_core */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_core.js").getIterator = function (it) {
  var iterFn = get(it);
  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
  return anObject(iterFn.call(it));
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/core.is-iterable.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/core.is-iterable.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(/*! ./_classof */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_classof.js");
var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_wks.js")('iterator');
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iterators.js");
module.exports = __webpack_require__(/*! ./_core */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_core.js").isIterable = function (it) {
  var O = Object(it);
  return O[ITERATOR] !== undefined
    || '@@iterator' in O
    // eslint-disable-next-line no-prototype-builtins
    || Iterators.hasOwnProperty(classof(O));
};


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.array.from.js":
/*!********************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/es6.array.from.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_ctx.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_export.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-object.js");
var call = __webpack_require__(/*! ./_iter-call */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iter-call.js");
var isArrayIter = __webpack_require__(/*! ./_is-array-iter */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_is-array-iter.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-length.js");
var createProperty = __webpack_require__(/*! ./_create-property */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_create-property.js");
var getIterFn = __webpack_require__(/*! ./core.get-iterator-method */ "./node_modules/_core-js@2.6.11@core-js/library/modules/core.get-iterator-method.js");

$export($export.S + $export.F * !__webpack_require__(/*! ./_iter-detect */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iter-detect.js")(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.array.iterator.js":
/*!************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/es6.array.iterator.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_add-to-unscopables.js");
var step = __webpack_require__(/*! ./_iter-step */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iter-step.js");
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iterators.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-iobject.js");

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(/*! ./_iter-define */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iter-define.js")(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.map.js":
/*!*************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/es6.map.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(/*! ./_collection-strong */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_collection-strong.js");
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_validate-collection.js");
var MAP = 'Map';

// 23.1 Map Objects
module.exports = __webpack_require__(/*! ./_collection */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_collection.js")(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.assign.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.assign.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_export.js");

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(/*! ./_object-assign */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-assign.js") });


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.create.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.create.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_export.js");
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: __webpack_require__(/*! ./_object-create */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-create.js") });


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.define-property.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.define-property.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_export.js");
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(/*! ./_descriptors */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_descriptors.js"), 'Object', { defineProperty: __webpack_require__(/*! ./_object-dp */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-dp.js").f });


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.freeze.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.freeze.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.5 Object.freeze(O)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_is-object.js");
var meta = __webpack_require__(/*! ./_meta */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_meta.js").onFreeze;

__webpack_require__(/*! ./_object-sap */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-sap.js")('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.get-prototype-of.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.get-prototype-of.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-object.js");
var $getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-gpo.js");

__webpack_require__(/*! ./_object-sap */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-sap.js")('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.keys.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.keys.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-object.js");
var $keys = __webpack_require__(/*! ./_object-keys */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-keys.js");

__webpack_require__(/*! ./_object-sap */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-sap.js")('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.set-prototype-of.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.set-prototype-of.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_export.js");
$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(/*! ./_set-proto */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_set-proto.js").set });


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.to-string.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/es6.object.to-string.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.promise.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/es6.promise.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_library.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_global.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_ctx.js");
var classof = __webpack_require__(/*! ./_classof */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_classof.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_export.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_is-object.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_a-function.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_an-instance.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_for-of.js");
var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_species-constructor.js");
var task = __webpack_require__(/*! ./_task */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_task.js").set;
var microtask = __webpack_require__(/*! ./_microtask */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_microtask.js")();
var newPromiseCapabilityModule = __webpack_require__(/*! ./_new-promise-capability */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_new-promise-capability.js");
var perform = __webpack_require__(/*! ./_perform */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_perform.js");
var userAgent = __webpack_require__(/*! ./_user-agent */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_user-agent.js");
var promiseResolve = __webpack_require__(/*! ./_promise-resolve */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_promise-resolve.js");
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[__webpack_require__(/*! ./_wks */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_wks.js")('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(/*! ./_redefine-all */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_redefine-all.js")($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
__webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_set-to-string-tag.js")($Promise, PROMISE);
__webpack_require__(/*! ./_set-species */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_set-species.js")(PROMISE);
Wrapper = __webpack_require__(/*! ./_core */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_core.js")[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(/*! ./_iter-detect */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iter-detect.js")(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.set.js":
/*!*************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/es6.set.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(/*! ./_collection-strong */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_collection-strong.js");
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_validate-collection.js");
var SET = 'Set';

// 23.2 Set Objects
module.exports = __webpack_require__(/*! ./_collection */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_collection.js")(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.string.iterator.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/es6.string.iterator.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__(/*! ./_string-at */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_string-at.js")(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(/*! ./_iter-define */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iter-define.js")(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.symbol.js":
/*!****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/es6.symbol.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(/*! ./_global */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_global.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_has.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_descriptors.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_export.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_redefine.js");
var META = __webpack_require__(/*! ./_meta */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_meta.js").KEY;
var $fails = __webpack_require__(/*! ./_fails */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_fails.js");
var shared = __webpack_require__(/*! ./_shared */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_shared.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_set-to-string-tag.js");
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_uid.js");
var wks = __webpack_require__(/*! ./_wks */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_wks.js");
var wksExt = __webpack_require__(/*! ./_wks-ext */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_wks-ext.js");
var wksDefine = __webpack_require__(/*! ./_wks-define */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_wks-define.js");
var enumKeys = __webpack_require__(/*! ./_enum-keys */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_enum-keys.js");
var isArray = __webpack_require__(/*! ./_is-array */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_is-array.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_an-object.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_is-object.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-object.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-iobject.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_to-primitive.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_property-desc.js");
var _create = __webpack_require__(/*! ./_object-create */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-create.js");
var gOPNExt = __webpack_require__(/*! ./_object-gopn-ext */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-gopn-ext.js");
var $GOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-gopd.js");
var $GOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-gops.js");
var $DP = __webpack_require__(/*! ./_object-dp */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-dp.js");
var $keys = __webpack_require__(/*! ./_object-keys */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-keys.js");
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(/*! ./_object-gopn */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-gopn.js").f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(/*! ./_object-pie */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_object-pie.js").f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(/*! ./_library */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_library.js")) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });

$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return $GOPS.f(toObject(it));
  }
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(/*! ./_hide */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_hide.js")($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/es7.map.from.js":
/*!******************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/es7.map.from.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
__webpack_require__(/*! ./_set-collection-from */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_set-collection-from.js")('Map');


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/es7.map.of.js":
/*!****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/es7.map.of.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
__webpack_require__(/*! ./_set-collection-of */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_set-collection-of.js")('Map');


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/es7.map.to-json.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/es7.map.to-json.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(/*! ./_export */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_export.js");

$export($export.P + $export.R, 'Map', { toJSON: __webpack_require__(/*! ./_collection-to-json */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_collection-to-json.js")('Map') });


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/es7.promise.finally.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/es7.promise.finally.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// https://github.com/tc39/proposal-promise-finally

var $export = __webpack_require__(/*! ./_export */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_export.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_core.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_global.js");
var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_species-constructor.js");
var promiseResolve = __webpack_require__(/*! ./_promise-resolve */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_promise-resolve.js");

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/es7.promise.try.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/es7.promise.try.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-promise-try
var $export = __webpack_require__(/*! ./_export */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_export.js");
var newPromiseCapability = __webpack_require__(/*! ./_new-promise-capability */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_new-promise-capability.js");
var perform = __webpack_require__(/*! ./_perform */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_perform.js");

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/es7.set.from.js":
/*!******************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/es7.set.from.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
__webpack_require__(/*! ./_set-collection-from */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_set-collection-from.js")('Set');


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/es7.set.of.js":
/*!****************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/es7.set.of.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
__webpack_require__(/*! ./_set-collection-of */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_set-collection-of.js")('Set');


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/es7.set.to-json.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/es7.set.to-json.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(/*! ./_export */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_export.js");

$export($export.P + $export.R, 'Set', { toJSON: __webpack_require__(/*! ./_collection-to-json */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_collection-to-json.js")('Set') });


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/es7.symbol.async-iterator.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/es7.symbol.async-iterator.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_wks-define */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_wks-define.js")('asyncIterator');


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/es7.symbol.observable.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/es7.symbol.observable.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_wks-define */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_wks-define.js")('observable');


/***/ }),

/***/ "./node_modules/_core-js@2.6.11@core-js/library/modules/web.dom.iterable.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/_core-js@2.6.11@core-js/library/modules/web.dom.iterable.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./es6.array.iterator */ "./node_modules/_core-js@2.6.11@core-js/library/modules/es6.array.iterator.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_global.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_hide.js");
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_iterators.js");
var TO_STRING_TAG = __webpack_require__(/*! ./_wks */ "./node_modules/_core-js@2.6.11@core-js/library/modules/_wks.js")('toStringTag');

var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
  'TextTrackList,TouchList').split(',');

for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}


/***/ }),

/***/ "./node_modules/_debug@4.1.1@debug/src/browser.js":
/*!********************************************************!*\
  !*** ./node_modules/_debug@4.1.1@debug/src/browser.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */

exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();

/**
 * Colors.
 */

exports.colors = [
	'#0000CC',
	'#0000FF',
	'#0033CC',
	'#0033FF',
	'#0066CC',
	'#0066FF',
	'#0099CC',
	'#0099FF',
	'#00CC00',
	'#00CC33',
	'#00CC66',
	'#00CC99',
	'#00CCCC',
	'#00CCFF',
	'#3300CC',
	'#3300FF',
	'#3333CC',
	'#3333FF',
	'#3366CC',
	'#3366FF',
	'#3399CC',
	'#3399FF',
	'#33CC00',
	'#33CC33',
	'#33CC66',
	'#33CC99',
	'#33CCCC',
	'#33CCFF',
	'#6600CC',
	'#6600FF',
	'#6633CC',
	'#6633FF',
	'#66CC00',
	'#66CC33',
	'#9900CC',
	'#9900FF',
	'#9933CC',
	'#9933FF',
	'#99CC00',
	'#99CC33',
	'#CC0000',
	'#CC0033',
	'#CC0066',
	'#CC0099',
	'#CC00CC',
	'#CC00FF',
	'#CC3300',
	'#CC3333',
	'#CC3366',
	'#CC3399',
	'#CC33CC',
	'#CC33FF',
	'#CC6600',
	'#CC6633',
	'#CC9900',
	'#CC9933',
	'#CCCC00',
	'#CCCC33',
	'#FF0000',
	'#FF0033',
	'#FF0066',
	'#FF0099',
	'#FF00CC',
	'#FF00FF',
	'#FF3300',
	'#FF3333',
	'#FF3366',
	'#FF3399',
	'#FF33CC',
	'#FF33FF',
	'#FF6600',
	'#FF6633',
	'#FF9900',
	'#FF9933',
	'#FFCC00',
	'#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

// eslint-disable-next-line complexity
function useColors() {
	// NB: In an Electron preload script, document will be defined but not fully
	// initialized. Since we know we're in Chrome, we'll just detect this case
	// explicitly
	if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
		return true;
	}

	// Internet Explorer and Edge do not support colors.
	if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
		return false;
	}

	// Is webkit? http://stackoverflow.com/a/16459606/376773
	// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
		// Is firebug? http://stackoverflow.com/a/398120/376773
		(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
		// Is firefox >= v31?
		// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
		// Double check webkit in userAgent just in case we are in a worker
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
	args[0] = (this.useColors ? '%c' : '') +
		this.namespace +
		(this.useColors ? ' %c' : ' ') +
		args[0] +
		(this.useColors ? '%c ' : ' ') +
		'+' + module.exports.humanize(this.diff);

	if (!this.useColors) {
		return;
	}

	const c = 'color: ' + this.color;
	args.splice(1, 0, c, 'color: inherit');

	// The final "%c" is somewhat tricky, because there could be other
	// arguments passed either before or after the %c, so we need to
	// figure out the correct index to insert the CSS into
	let index = 0;
	let lastC = 0;
	args[0].replace(/%[a-zA-Z%]/g, match => {
		if (match === '%%') {
			return;
		}
		index++;
		if (match === '%c') {
			// We only are interested in the *last* %c
			// (the user may have provided their own)
			lastC = index;
		}
	});

	args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */
function log(...args) {
	// This hackery is required for IE8/9, where
	// the `console.log` function doesn't have 'apply'
	return typeof console === 'object' &&
		console.log &&
		console.log(...args);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */
function save(namespaces) {
	try {
		if (namespaces) {
			exports.storage.setItem('debug', namespaces);
		} else {
			exports.storage.removeItem('debug');
		}
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */
function load() {
	let r;
	try {
		r = exports.storage.getItem('debug');
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}

	// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	if (!r && typeof process !== 'undefined' && 'env' in process) {
		r = process.env.DEBUG;
	}

	return r;
}

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
	try {
		// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
		// The Browser also has localStorage in the global context.
		return localStorage;
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

module.exports = __webpack_require__(/*! ./common */ "./node_modules/_debug@4.1.1@debug/src/common.js")(exports);

const {formatters} = module.exports;

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
	try {
		return JSON.stringify(v);
	} catch (error) {
		return '[UnexpectedJSONParseError]: ' + error.message;
	}
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../_process@0.11.10@process/browser.js */ "./node_modules/_process@0.11.10@process/browser.js")))

/***/ }),

/***/ "./node_modules/_debug@4.1.1@debug/src/common.js":
/*!*******************************************************!*\
  !*** ./node_modules/_debug@4.1.1@debug/src/common.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

function setup(env) {
	createDebug.debug = createDebug;
	createDebug.default = createDebug;
	createDebug.coerce = coerce;
	createDebug.disable = disable;
	createDebug.enable = enable;
	createDebug.enabled = enabled;
	createDebug.humanize = __webpack_require__(/*! ms */ "./node_modules/_ms@2.1.2@ms/index.js");

	Object.keys(env).forEach(key => {
		createDebug[key] = env[key];
	});

	/**
	* Active `debug` instances.
	*/
	createDebug.instances = [];

	/**
	* The currently active debug mode names, and names to skip.
	*/

	createDebug.names = [];
	createDebug.skips = [];

	/**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/
	createDebug.formatters = {};

	/**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/
	function selectColor(namespace) {
		let hash = 0;

		for (let i = 0; i < namespace.length; i++) {
			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
			hash |= 0; // Convert to 32bit integer
		}

		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
	}
	createDebug.selectColor = selectColor;

	/**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/
	function createDebug(namespace) {
		let prevTime;

		function debug(...args) {
			// Disabled?
			if (!debug.enabled) {
				return;
			}

			const self = debug;

			// Set `diff` timestamp
			const curr = Number(new Date());
			const ms = curr - (prevTime || curr);
			self.diff = ms;
			self.prev = prevTime;
			self.curr = curr;
			prevTime = curr;

			args[0] = createDebug.coerce(args[0]);

			if (typeof args[0] !== 'string') {
				// Anything else let's inspect with %O
				args.unshift('%O');
			}

			// Apply any `formatters` transformations
			let index = 0;
			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
				// If we encounter an escaped % then don't increase the array index
				if (match === '%%') {
					return match;
				}
				index++;
				const formatter = createDebug.formatters[format];
				if (typeof formatter === 'function') {
					const val = args[index];
					match = formatter.call(self, val);

					// Now we need to remove `args[index]` since it's inlined in the `format`
					args.splice(index, 1);
					index--;
				}
				return match;
			});

			// Apply env-specific formatting (colors, etc.)
			createDebug.formatArgs.call(self, args);

			const logFn = self.log || createDebug.log;
			logFn.apply(self, args);
		}

		debug.namespace = namespace;
		debug.enabled = createDebug.enabled(namespace);
		debug.useColors = createDebug.useColors();
		debug.color = selectColor(namespace);
		debug.destroy = destroy;
		debug.extend = extend;
		// Debug.formatArgs = formatArgs;
		// debug.rawLog = rawLog;

		// env-specific initialization logic for debug instances
		if (typeof createDebug.init === 'function') {
			createDebug.init(debug);
		}

		createDebug.instances.push(debug);

		return debug;
	}

	function destroy() {
		const index = createDebug.instances.indexOf(this);
		if (index !== -1) {
			createDebug.instances.splice(index, 1);
			return true;
		}
		return false;
	}

	function extend(namespace, delimiter) {
		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
		newDebug.log = this.log;
		return newDebug;
	}

	/**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/
	function enable(namespaces) {
		createDebug.save(namespaces);

		createDebug.names = [];
		createDebug.skips = [];

		let i;
		const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
		const len = split.length;

		for (i = 0; i < len; i++) {
			if (!split[i]) {
				// ignore empty strings
				continue;
			}

			namespaces = split[i].replace(/\*/g, '.*?');

			if (namespaces[0] === '-') {
				createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
			} else {
				createDebug.names.push(new RegExp('^' + namespaces + '$'));
			}
		}

		for (i = 0; i < createDebug.instances.length; i++) {
			const instance = createDebug.instances[i];
			instance.enabled = createDebug.enabled(instance.namespace);
		}
	}

	/**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/
	function disable() {
		const namespaces = [
			...createDebug.names.map(toNamespace),
			...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
		].join(',');
		createDebug.enable('');
		return namespaces;
	}

	/**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/
	function enabled(name) {
		if (name[name.length - 1] === '*') {
			return true;
		}

		let i;
		let len;

		for (i = 0, len = createDebug.skips.length; i < len; i++) {
			if (createDebug.skips[i].test(name)) {
				return false;
			}
		}

		for (i = 0, len = createDebug.names.length; i < len; i++) {
			if (createDebug.names[i].test(name)) {
				return true;
			}
		}

		return false;
	}

	/**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/
	function toNamespace(regexp) {
		return regexp.toString()
			.substring(2, regexp.toString().length - 2)
			.replace(/\.\*\?$/, '*');
	}

	/**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/
	function coerce(val) {
		if (val instanceof Error) {
			return val.stack || val.message;
		}
		return val;
	}

	createDebug.enable(createDebug.load());

	return createDebug;
}

module.exports = setup;


/***/ }),

/***/ "./node_modules/_es5-ext@0.10.53@es5-ext/global.js":
/*!*********************************************************!*\
  !*** ./node_modules/_es5-ext@0.10.53@es5-ext/global.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var naiveFallback = function () {
	if (typeof self === "object" && self) return self;
	if (typeof window === "object" && window) return window;
	throw new Error("Unable to resolve global `this`");
};

module.exports = (function () {
	if (this) return this;

	// Unexpected strict mode (may happen if e.g. bundled into ESM module)

	// Fallback to standard globalThis if available
	if (typeof globalThis === "object" && globalThis) return globalThis;

	// Thanks @mathiasbynens -> https://mathiasbynens.be/notes/globalthis
	// In all ES5+ engines global object inherits from Object.prototype
	// (if you approached one that doesn't please report)
	try {
		Object.defineProperty(Object.prototype, "__global__", {
			get: function () { return this; },
			configurable: true
		});
	} catch (error) {
		// Unfortunate case of updates to Object.prototype being restricted
		// via preventExtensions, seal or freeze
		return naiveFallback();
	}
	try {
		// Safari case (window.__global__ works, but __global__ does not)
		if (!__global__) return naiveFallback();
		return __global__;
	} finally {
		delete Object.prototype.__global__;
	}
})();


/***/ }),

/***/ "./node_modules/_events@3.1.0@events/events.js":
/*!*****************************************************!*\
  !*** ./node_modules/_events@3.1.0@events/events.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}


/***/ }),

/***/ "./node_modules/_hark@1.2.3@hark/hark.js":
/*!***********************************************!*\
  !*** ./node_modules/_hark@1.2.3@hark/hark.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var WildEmitter = __webpack_require__(/*! wildemitter */ "./node_modules/_wildemitter@1.2.1@wildemitter/wildemitter.js");

function getMaxVolume (analyser, fftBins) {
  var maxVolume = -Infinity;
  analyser.getFloatFrequencyData(fftBins);

  for(var i=4, ii=fftBins.length; i < ii; i++) {
    if (fftBins[i] > maxVolume && fftBins[i] < 0) {
      maxVolume = fftBins[i];
    }
  };

  return maxVolume;
}


var audioContextType;
if (typeof window !== 'undefined') {
  audioContextType = window.AudioContext || window.webkitAudioContext;
}
// use a single audio context due to hardware limits
var audioContext = null;
module.exports = function(stream, options) {
  var harker = new WildEmitter();

  // make it not break in non-supported browsers
  if (!audioContextType) return harker;

  //Config
  var options = options || {},
      smoothing = (options.smoothing || 0.1),
      interval = (options.interval || 50),
      threshold = options.threshold,
      play = options.play,
      history = options.history || 10,
      running = true;

  // Ensure that just a single AudioContext is internally created
  audioContext = options.audioContext || audioContext || new audioContextType();

  var sourceNode, fftBins, analyser;

  analyser = audioContext.createAnalyser();
  analyser.fftSize = 512;
  analyser.smoothingTimeConstant = smoothing;
  fftBins = new Float32Array(analyser.frequencyBinCount);

  if (stream.jquery) stream = stream[0];
  if (stream instanceof HTMLAudioElement || stream instanceof HTMLVideoElement) {
    //Audio Tag
    sourceNode = audioContext.createMediaElementSource(stream);
    if (typeof play === 'undefined') play = true;
    threshold = threshold || -50;
  } else {
    //WebRTC Stream
    sourceNode = audioContext.createMediaStreamSource(stream);
    threshold = threshold || -50;
  }

  sourceNode.connect(analyser);
  if (play) analyser.connect(audioContext.destination);

  harker.speaking = false;

  harker.suspend = function() {
    return audioContext.suspend();
  }
  harker.resume = function() {
    return audioContext.resume();
  }
  Object.defineProperty(harker, 'state', { get: function() {
    return audioContext.state;
  }});
  audioContext.onstatechange = function() {
    harker.emit('state_change', audioContext.state);
  }

  harker.setThreshold = function(t) {
    threshold = t;
  };

  harker.setInterval = function(i) {
    interval = i;
  };

  harker.stop = function() {
    running = false;
    harker.emit('volume_change', -100, threshold);
    if (harker.speaking) {
      harker.speaking = false;
      harker.emit('stopped_speaking');
    }
    analyser.disconnect();
    sourceNode.disconnect();
  };
  harker.speakingHistory = [];
  for (var i = 0; i < history; i++) {
      harker.speakingHistory.push(0);
  }

  // Poll the analyser node to determine if speaking
  // and emit events if changed
  var looper = function() {
    setTimeout(function() {

      //check if stop has been called
      if(!running) {
        return;
      }

      var currentVolume = getMaxVolume(analyser, fftBins);

      harker.emit('volume_change', currentVolume, threshold);

      var history = 0;
      if (currentVolume > threshold && !harker.speaking) {
        // trigger quickly, short history
        for (var i = harker.speakingHistory.length - 3; i < harker.speakingHistory.length; i++) {
          history += harker.speakingHistory[i];
        }
        if (history >= 2) {
          harker.speaking = true;
          harker.emit('speaking');
        }
      } else if (currentVolume < threshold && harker.speaking) {
        for (var i = 0; i < harker.speakingHistory.length; i++) {
          history += harker.speakingHistory[i];
        }
        if (history == 0) {
          harker.speaking = false;
          harker.emit('stopped_speaking');
        }
      }
      harker.speakingHistory.shift();
      harker.speakingHistory.push(0 + (currentVolume > threshold));

      looper();
    }, interval);
  };
  looper();

  return harker;
}


/***/ }),

/***/ "./node_modules/_ms@2.1.2@ms/index.js":
/*!********************************************!*\
  !*** ./node_modules/_ms@2.1.2@ms/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}


/***/ }),

/***/ "./node_modules/_process@0.11.10@process/browser.js":
/*!**********************************************************!*\
  !*** ./node_modules/_process@0.11.10@process/browser.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/_random-number@0.0.9@random-number/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/_random-number@0.0.9@random-number/index.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

void function(root){

  function defaults(options){
    var options = options || {}
    var min = options.min
    var max = options.max
    var integer = options.integer || false
    if ( min == null && max == null ) {
      min = 0
      max = 1
    } else if ( min == null ) {
      min = max - 1
    } else if ( max == null ) {
      max = min + 1
    }
    if ( max < min ) throw new Error('invalid options, max must be >= min')
    return {
      min:     min
    , max:     max
    , integer: integer
    }
  }

  function random(options){
    options = defaults(options)
    if ( options.max === options.min ) return options.min
    var r = Math.random() * (options.max - options.min + Number(!!options.integer)) + options.min
    return options.integer ? Math.floor(r) : r
  }

  function generator(options){
    options = defaults(options)
    return function(min, max, integer){
      options.min     = min != null ? min : options.min
      options.max     = max != null ? max : options.max
      options.integer = integer != null ? integer : options.integer
      return random(options)
    }
  }

  module.exports =  random
  module.exports.generator = generator
  module.exports.defaults = defaults
}(this)


/***/ }),

/***/ "./node_modules/_regenerator-runtime@0.11.1@regenerator-runtime/runtime-module.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/_regenerator-runtime@0.11.1@regenerator-runtime/runtime-module.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() { return this })() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = __webpack_require__(/*! ./runtime */ "./node_modules/_regenerator-runtime@0.11.1@regenerator-runtime/runtime.js");

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}


/***/ }),

/***/ "./node_modules/_regenerator-runtime@0.11.1@regenerator-runtime/runtime.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/_regenerator-runtime@0.11.1@regenerator-runtime/runtime.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() { return this })() || Function("return this")()
);


/***/ }),

/***/ "./node_modules/_retry@0.12.0@retry/index.js":
/*!***************************************************!*\
  !*** ./node_modules/_retry@0.12.0@retry/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./lib/retry */ "./node_modules/_retry@0.12.0@retry/lib/retry.js");

/***/ }),

/***/ "./node_modules/_retry@0.12.0@retry/lib/retry.js":
/*!*******************************************************!*\
  !*** ./node_modules/_retry@0.12.0@retry/lib/retry.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var RetryOperation = __webpack_require__(/*! ./retry_operation */ "./node_modules/_retry@0.12.0@retry/lib/retry_operation.js");

exports.operation = function(options) {
  var timeouts = exports.timeouts(options);
  return new RetryOperation(timeouts, {
      forever: options && options.forever,
      unref: options && options.unref,
      maxRetryTime: options && options.maxRetryTime
  });
};

exports.timeouts = function(options) {
  if (options instanceof Array) {
    return [].concat(options);
  }

  var opts = {
    retries: 10,
    factor: 2,
    minTimeout: 1 * 1000,
    maxTimeout: Infinity,
    randomize: false
  };
  for (var key in options) {
    opts[key] = options[key];
  }

  if (opts.minTimeout > opts.maxTimeout) {
    throw new Error('minTimeout is greater than maxTimeout');
  }

  var timeouts = [];
  for (var i = 0; i < opts.retries; i++) {
    timeouts.push(this.createTimeout(i, opts));
  }

  if (options && options.forever && !timeouts.length) {
    timeouts.push(this.createTimeout(i, opts));
  }

  // sort the array numerically ascending
  timeouts.sort(function(a,b) {
    return a - b;
  });

  return timeouts;
};

exports.createTimeout = function(attempt, opts) {
  var random = (opts.randomize)
    ? (Math.random() + 1)
    : 1;

  var timeout = Math.round(random * opts.minTimeout * Math.pow(opts.factor, attempt));
  timeout = Math.min(timeout, opts.maxTimeout);

  return timeout;
};

exports.wrap = function(obj, options, methods) {
  if (options instanceof Array) {
    methods = options;
    options = null;
  }

  if (!methods) {
    methods = [];
    for (var key in obj) {
      if (typeof obj[key] === 'function') {
        methods.push(key);
      }
    }
  }

  for (var i = 0; i < methods.length; i++) {
    var method   = methods[i];
    var original = obj[method];

    obj[method] = function retryWrapper(original) {
      var op       = exports.operation(options);
      var args     = Array.prototype.slice.call(arguments, 1);
      var callback = args.pop();

      args.push(function(err) {
        if (op.retry(err)) {
          return;
        }
        if (err) {
          arguments[0] = op.mainError();
        }
        callback.apply(this, arguments);
      });

      op.attempt(function() {
        original.apply(obj, args);
      });
    }.bind(obj, original);
    obj[method].options = options;
  }
};


/***/ }),

/***/ "./node_modules/_retry@0.12.0@retry/lib/retry_operation.js":
/*!*****************************************************************!*\
  !*** ./node_modules/_retry@0.12.0@retry/lib/retry_operation.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function RetryOperation(timeouts, options) {
  // Compatibility for the old (timeouts, retryForever) signature
  if (typeof options === 'boolean') {
    options = { forever: options };
  }

  this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));
  this._timeouts = timeouts;
  this._options = options || {};
  this._maxRetryTime = options && options.maxRetryTime || Infinity;
  this._fn = null;
  this._errors = [];
  this._attempts = 1;
  this._operationTimeout = null;
  this._operationTimeoutCb = null;
  this._timeout = null;
  this._operationStart = null;

  if (this._options.forever) {
    this._cachedTimeouts = this._timeouts.slice(0);
  }
}
module.exports = RetryOperation;

RetryOperation.prototype.reset = function() {
  this._attempts = 1;
  this._timeouts = this._originalTimeouts;
}

RetryOperation.prototype.stop = function() {
  if (this._timeout) {
    clearTimeout(this._timeout);
  }

  this._timeouts       = [];
  this._cachedTimeouts = null;
};

RetryOperation.prototype.retry = function(err) {
  if (this._timeout) {
    clearTimeout(this._timeout);
  }

  if (!err) {
    return false;
  }
  var currentTime = new Date().getTime();
  if (err && currentTime - this._operationStart >= this._maxRetryTime) {
    this._errors.unshift(new Error('RetryOperation timeout occurred'));
    return false;
  }

  this._errors.push(err);

  var timeout = this._timeouts.shift();
  if (timeout === undefined) {
    if (this._cachedTimeouts) {
      // retry forever, only keep last error
      this._errors.splice(this._errors.length - 1, this._errors.length);
      this._timeouts = this._cachedTimeouts.slice(0);
      timeout = this._timeouts.shift();
    } else {
      return false;
    }
  }

  var self = this;
  var timer = setTimeout(function() {
    self._attempts++;

    if (self._operationTimeoutCb) {
      self._timeout = setTimeout(function() {
        self._operationTimeoutCb(self._attempts);
      }, self._operationTimeout);

      if (self._options.unref) {
          self._timeout.unref();
      }
    }

    self._fn(self._attempts);
  }, timeout);

  if (this._options.unref) {
      timer.unref();
  }

  return true;
};

RetryOperation.prototype.attempt = function(fn, timeoutOps) {
  this._fn = fn;

  if (timeoutOps) {
    if (timeoutOps.timeout) {
      this._operationTimeout = timeoutOps.timeout;
    }
    if (timeoutOps.cb) {
      this._operationTimeoutCb = timeoutOps.cb;
    }
  }

  var self = this;
  if (this._operationTimeoutCb) {
    this._timeout = setTimeout(function() {
      self._operationTimeoutCb();
    }, self._operationTimeout);
  }

  this._operationStart = new Date().getTime();

  this._fn(this._attempts);
};

RetryOperation.prototype.try = function(fn) {
  console.log('Using RetryOperation.try() is deprecated');
  this.attempt(fn);
};

RetryOperation.prototype.start = function(fn) {
  console.log('Using RetryOperation.start() is deprecated');
  this.attempt(fn);
};

RetryOperation.prototype.start = RetryOperation.prototype.try;

RetryOperation.prototype.errors = function() {
  return this._errors;
};

RetryOperation.prototype.attempts = function() {
  return this._attempts;
};

RetryOperation.prototype.mainError = function() {
  if (this._errors.length === 0) {
    return null;
  }

  var counts = {};
  var mainError = null;
  var mainErrorCount = 0;

  for (var i = 0; i < this._errors.length; i++) {
    var error = this._errors[i];
    var message = error.message;
    var count = (counts[message] || 0) + 1;

    counts[message] = count;

    if (count >= mainErrorCount) {
      mainError = error;
      mainErrorCount = count;
    }
  }

  return mainError;
};


/***/ }),

/***/ "./node_modules/_webpack@4.41.6@webpack/buildin/amd-define.js":
/*!***************************************!*\
  !*** (webpack)/buildin/amd-define.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function() {
	throw new Error("define cannot be used indirect");
};


/***/ }),

/***/ "./node_modules/_webpack@4.41.6@webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/_websocket@1.0.31@websocket/lib/browser.js":
/*!*****************************************************************!*\
  !*** ./node_modules/_websocket@1.0.31@websocket/lib/browser.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _globalThis;
try {
	_globalThis = __webpack_require__(/*! es5-ext/global */ "./node_modules/_es5-ext@0.10.53@es5-ext/global.js");
} catch (error) {
} finally {
	if (!_globalThis && typeof window !== 'undefined') { _globalThis = window; }
	if (!_globalThis) { throw new Error('Could not determine global this'); }
}

var NativeWebSocket = _globalThis.WebSocket || _globalThis.MozWebSocket;
var websocket_version = __webpack_require__(/*! ./version */ "./node_modules/_websocket@1.0.31@websocket/lib/version.js");


/**
 * Expose a W3C WebSocket class with just one or two arguments.
 */
function W3CWebSocket(uri, protocols) {
	var native_instance;

	if (protocols) {
		native_instance = new NativeWebSocket(uri, protocols);
	}
	else {
		native_instance = new NativeWebSocket(uri);
	}

	/**
	 * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket
	 * class). Since it is an Object it will be returned as it is when creating an
	 * instance of W3CWebSocket via 'new W3CWebSocket()'.
	 *
	 * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2
	 */
	return native_instance;
}
if (NativeWebSocket) {
	['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'].forEach(function(prop) {
		Object.defineProperty(W3CWebSocket, prop, {
			get: function() { return NativeWebSocket[prop]; }
		});
	});
}

/**
 * Module exports.
 */
module.exports = {
    'w3cwebsocket' : NativeWebSocket ? W3CWebSocket : null,
    'version'      : websocket_version
};


/***/ }),

/***/ "./node_modules/_websocket@1.0.31@websocket/lib/version.js":
/*!*****************************************************************!*\
  !*** ./node_modules/_websocket@1.0.31@websocket/lib/version.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ../package.json */ "./node_modules/_websocket@1.0.31@websocket/package.json").version;


/***/ }),

/***/ "./node_modules/_websocket@1.0.31@websocket/package.json":
/*!***************************************************************!*\
  !*** ./node_modules/_websocket@1.0.31@websocket/package.json ***!
  \***************************************************************/
/*! exports provided: name, description, keywords, author, contributors, version, repository, homepage, engines, dependencies, devDependencies, config, scripts, main, directories, browser, license, __npminstall_done, _from, _resolved, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"name\":\"websocket\",\"description\":\"Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.\",\"keywords\":[\"websocket\",\"websockets\",\"socket\",\"networking\",\"comet\",\"push\",\"RFC-6455\",\"realtime\",\"server\",\"client\"],\"author\":\"Brian McKelvey <theturtle32@gmail.com> (https://github.com/theturtle32)\",\"contributors\":[\"Iñaki Baz Castillo <ibc@aliax.net> (http://dev.sipdoc.net)\"],\"version\":\"1.0.31\",\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/theturtle32/WebSocket-Node.git\"},\"homepage\":\"https://github.com/theturtle32/WebSocket-Node\",\"engines\":{\"node\":\">=0.10.0\"},\"dependencies\":{\"debug\":\"^2.2.0\",\"es5-ext\":\"^0.10.50\",\"nan\":\"^2.14.0\",\"typedarray-to-buffer\":\"^3.1.5\",\"yaeti\":\"^0.0.6\"},\"devDependencies\":{\"buffer-equal\":\"^1.0.0\",\"faucet\":\"^0.0.1\",\"gulp\":\"^4.0.2\",\"gulp-jshint\":\"^2.0.4\",\"jshint-stylish\":\"^2.2.1\",\"jshint\":\"^2.0.0\",\"tape\":\"^4.9.1\"},\"config\":{\"verbose\":false},\"scripts\":{\"install\":\"(node-gyp rebuild 2> builderror.log) || (exit 0)\",\"test\":\"faucet test/unit\",\"gulp\":\"gulp\"},\"main\":\"index\",\"directories\":{\"lib\":\"./lib\"},\"browser\":\"lib/browser.js\",\"license\":\"Apache-2.0\",\"__npminstall_done\":\"Mon Feb 24 2020 15:02:39 GMT+0800 (GMT+08:00)\",\"_from\":\"websocket@1.0.31\",\"_resolved\":\"https://registry.npm.taobao.org/websocket/download/websocket-1.0.31.tgz\"}");

/***/ }),

/***/ "./node_modules/_wildemitter@1.2.1@wildemitter/wildemitter.js":
/*!********************************************************************!*\
  !*** ./node_modules/_wildemitter@1.2.1@wildemitter/wildemitter.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
WildEmitter.js is a slim little event emitter by @henrikjoreteg largely based
on @visionmedia's Emitter from UI Kit.

Why? I wanted it standalone.

I also wanted support for wildcard emitters like this:

emitter.on('*', function (eventName, other, event, payloads) {

});

emitter.on('somenamespace*', function (eventName, payloads) {

});

Please note that callbacks triggered by wildcard registered events also get
the event name as the first argument.
*/

module.exports = WildEmitter;

function WildEmitter() { }

WildEmitter.mixin = function (constructor) {
    var prototype = constructor.prototype || constructor;

    prototype.isWildEmitter= true;

    // Listen on the given `event` with `fn`. Store a group name if present.
    prototype.on = function (event, groupName, fn) {
        this.callbacks = this.callbacks || {};
        var hasGroup = (arguments.length === 3),
            group = hasGroup ? arguments[1] : undefined,
            func = hasGroup ? arguments[2] : arguments[1];
        func._groupName = group;
        (this.callbacks[event] = this.callbacks[event] || []).push(func);
        return this;
    };

    // Adds an `event` listener that will be invoked a single
    // time then automatically removed.
    prototype.once = function (event, groupName, fn) {
        var self = this,
            hasGroup = (arguments.length === 3),
            group = hasGroup ? arguments[1] : undefined,
            func = hasGroup ? arguments[2] : arguments[1];
        function on() {
            self.off(event, on);
            func.apply(this, arguments);
        }
        this.on(event, group, on);
        return this;
    };

    // Unbinds an entire group
    prototype.releaseGroup = function (groupName) {
        this.callbacks = this.callbacks || {};
        var item, i, len, handlers;
        for (item in this.callbacks) {
            handlers = this.callbacks[item];
            for (i = 0, len = handlers.length; i < len; i++) {
                if (handlers[i]._groupName === groupName) {
                    //console.log('removing');
                    // remove it and shorten the array we're looping through
                    handlers.splice(i, 1);
                    i--;
                    len--;
                }
            }
        }
        return this;
    };

    // Remove the given callback for `event` or all
    // registered callbacks.
    prototype.off = function (event, fn) {
        this.callbacks = this.callbacks || {};
        var callbacks = this.callbacks[event],
            i;

        if (!callbacks) return this;

        // remove all handlers
        if (arguments.length === 1) {
            delete this.callbacks[event];
            return this;
        }

        // remove specific handler
        i = callbacks.indexOf(fn);
        if (i !== -1) {
            callbacks.splice(i, 1);
            if (callbacks.length === 0) {
                delete this.callbacks[event];
            }
        }
        return this;
    };

    /// Emit `event` with the given args.
    // also calls any `*` handlers
    prototype.emit = function (event) {
        this.callbacks = this.callbacks || {};
        var args = [].slice.call(arguments, 1),
            callbacks = this.callbacks[event],
            specialCallbacks = this.getWildcardCallbacks(event),
            i,
            len,
            item,
            listeners;

        if (callbacks) {
            listeners = callbacks.slice();
            for (i = 0, len = listeners.length; i < len; ++i) {
                if (!listeners[i]) {
                    break;
                }
                listeners[i].apply(this, args);
            }
        }

        if (specialCallbacks) {
            len = specialCallbacks.length;
            listeners = specialCallbacks.slice();
            for (i = 0, len = listeners.length; i < len; ++i) {
                if (!listeners[i]) {
                    break;
                }
                listeners[i].apply(this, [event].concat(args));
            }
        }

        return this;
    };

    // Helper for for finding special wildcard event handlers that match the event
    prototype.getWildcardCallbacks = function (eventName) {
        this.callbacks = this.callbacks || {};
        var item,
            split,
            result = [];

        for (item in this.callbacks) {
            split = item.split('*');
            if (item === '*' || (split.length === 2 && eventName.slice(0, split[0].length) === split[0])) {
                result = result.concat(this.callbacks[item]);
            }
        }
        return result;
    };

};

WildEmitter.mixin(WildEmitter);


/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/*! exports provided: name, version, description, buildDate, main, scripts, author, license, dependencies, devDependencies, files, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"name\":\"tttwebsdk\",\"version\":\"3.4.6\",\"description\":\"webrtc of 3ttech.cn\",\"buildDate\":\"Feb_23_2020\",\"main\":\"lib/TTTRtcWeb.js\",\"scripts\":{\"test\":\"jest\",\"start\":\"webpack-dev-server --open\",\"build:app\":\"webpack\",\"build:demo\":\"webpack --config webpack.config/webpack.config.demo.js\",\"build:prod\":\"webpack --config webpack.config/webpack.config.prod.js\",\"build:proddemo\":\"webpack --config webpack.config/webpack.config.proddemo.js\",\"build:demo-multistream\":\"webpack --config webpack.config/webpack.config.demo_multistream.js\",\"build:sdk\":\"webpack --config webpack.config/webpack.config.js --mode development\",\"lint\":\"eslint -c .eslintrc.js lib/protoo lib/client.js lib/index.js lib/stats.js lib/config.js lib/utils.js lib/stream.js lib/TTTRtcWeb.js\",\"3.1:test\":\"webpack --config ./tests/3.1.test.pages/webpack.config.js\"},\"author\":\"3ttech.cn\",\"license\":\"ISC\",\"dependencies\":{\"babel-runtime\":\"^6.26.0\",\"bowser\":\"^1.9.3\",\"debug\":\"^4.1.1\",\"hark\":\"^1.2.3\",\"random-number\":\"^0.0.9\",\"retry\":\"^0.12.0\",\"websocket\":\"^1.0.28\"},\"devDependencies\":{\"babel-core\":\"^6.26.3\",\"babel-loader\":\"^7.1.1\",\"babel-plugin-transform-runtime\":\"^6.23.0\",\"babel-polyfill\":\"^6.26.0\",\"babel-preset-env\":\"^1.7.0\",\"babel-preset-es2015\":\"^6.24.1\",\"babel-preset-stage-0\":\"^6.24.1\",\"copy-webpack-plugin\":\"^5.0.4\",\"eslint\":\"^5.16.0\",\"eslint-plugin-react\":\"^7.13.0\",\"html-webpack-plugin\":\"^3.2.0\",\"http-server\":\"^0.11.1\",\"jest\":\"^24.9.0\",\"jest-websocket-mock\":\"^1.5.0\",\"mock-socket\":\"^9.0.0\",\"sweetalert2\":\"^8.11.4\",\"webpack\":\"^4.41.0\",\"webpack-cli\":\"^3.2.3\",\"webpack-dev-server\":\"^3.1.14\",\"webpack-jquery-ui\":\"^2.0.1\"},\"files\":[\"lib/\",\"screen/\",\"docs/\",\"README.md\",\"CHANGELOG.md\"]}");

/***/ })

/******/ });
});
//# sourceMappingURL=tttwebsdk.js.map